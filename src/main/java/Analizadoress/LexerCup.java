// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: final.jflex

package Analizadoress;

import static Analizadoress.sym.*;
import java_cup.runtime.Symbol;

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class LexerCup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int COMENTARIO = 2;
  public static final int TEXTON = 4;
  public static final int COMENTARIO_BLOQUE = 6;
  public static final int TODO = 8;
  public static final int H1STATE = 10;
  public static final int H1COMILLA = 12;
  public static final int H1_TEXTO = 14;
  public static final int SPAMSTATE = 16;
  public static final int SPAMCOMILLA = 18;
  public static final int SPAMTEXTO = 20;
  public static final int CPSTATE = 22;
  public static final int CPCOMILLA = 24;
  public static final int CPTEXTO = 26;
  public static final int INPUTSTATE = 28;
  public static final int INPUTCOMILLA = 30;
  public static final int INPUTTEXTO = 32;
  public static final int TEXT_AREA_STATE = 34;
  public static final int TEXT_AREA_COMILLA = 36;
  public static final int TEXT_AREA_TEXTO = 38;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 19, 19
  };

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  2,  0,  0,  1,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     3,  4,  5,  6,  7,  8,  9,  8, 10, 11, 12, 13,  8, 14,  8, 15, 
    16, 17, 16, 16, 16, 16, 16, 16, 16, 16, 18,  8, 19, 20, 21,  8, 
    22, 23, 24, 25, 26, 27, 28, 29, 30, 31,  8, 32, 33, 34, 35, 36, 
    37,  8, 38, 39, 40, 41, 42, 43, 44, 45,  8, 46,  8, 47,  8, 48, 
     8, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 
    64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  8, 
     8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8, 
     8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8, 
     8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8, 
     8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8
  };

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\24\0\1\1\1\2\1\3\1\4\1\1\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\1\1\13\1\14\1\15"+
    "\16\1\1\16\1\17\20\1\1\2\1\20\1\21\1\22"+
    "\30\21\1\1\1\21\1\1\1\23\1\14\1\24\5\1"+
    "\1\25\27\1\2\26\1\1\1\27\1\30\1\31\1\1"+
    "\1\32\1\33\1\34\1\1\1\35\1\36\2\1\1\37"+
    "\5\1\1\40\1\41\3\1\1\42\1\43\4\1\1\44"+
    "\1\45\1\46\1\47\2\0\1\50\1\0\1\51\1\52"+
    "\12\0\1\53\24\0\1\54\11\0\1\55\1\56\1\21"+
    "\1\57\30\21\122\0\1\60\13\0\1\61\14\0\1\62"+
    "\16\0\1\63\1\64\4\0\1\21\1\65\20\21\1\66"+
    "\6\21\1\67\3\0\1\65\20\0\1\66\22\0\1\70"+
    "\2\0\1\71\6\0\1\72\3\0\1\73\6\0\1\74"+
    "\1\75\1\76\1\0\1\77\10\0\1\100\3\0\1\101"+
    "\2\0\1\102\6\0\1\103\1\0\1\104\1\0\1\105"+
    "\2\0\1\106\1\0\12\21\1\107\5\21\13\0\1\107"+
    "\10\0\1\110\3\0\1\111\2\0\1\112\11\0\1\113"+
    "\2\0\1\114\16\0\1\115\2\0\1\116\1\117\2\0"+
    "\1\120\7\0\1\121\1\21\1\122\11\21\2\0\1\122"+
    "\27\0\1\123\1\0\1\124\1\125\1\126\3\0\1\127"+
    "\1\130\5\0\1\131\4\0\1\132\4\0\1\133\2\0"+
    "\1\134\1\0\4\21\7\0\1\135\4\0\1\136\2\0"+
    "\1\137\11\0\1\140\1\0\1\141\2\0\1\142\1\143"+
    "\3\0\1\144\1\145\1\0\1\146\1\21\1\0\1\146"+
    "\1\0\1\147\4\0\1\150\4\0\1\151\1\152\1\0"+
    "\1\153\3\0\1\154\6\0\1\21\6\0\1\155\6\0"+
    "\1\156\2\0\1\157\2\0\1\21\2\0\1\160\3\0"+
    "\1\161\3\0\1\162\1\0\1\163\2\0\1\164\1\165"+
    "\1\166\1\0\1\167\1\0\1\170\2\0\1\171\3\0"+
    "\1\172\4\0\1\173\1\174\1\175\4\0\1\176";

  private static int [] zzUnpackAction() {
    int [] result = new int[778];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\116\0\234\0\352\0\u0138\0\u0186\0\u01d4\0\u0222"+
    "\0\u0270\0\u02be\0\u030c\0\u035a\0\u03a8\0\u03f6\0\u0444\0\u0492"+
    "\0\u04e0\0\u052e\0\u057c\0\u05ca\0\u0618\0\u0666\0\u06b4\0\u0618"+
    "\0\u0702\0\u0618\0\u0618\0\u0618\0\u0618\0\u0618\0\u0618\0\u0750"+
    "\0\u079e\0\u07ec\0\u083a\0\u0888\0\u08d6\0\u0924\0\u0972\0\u09c0"+
    "\0\u0a0e\0\u0a5c\0\u0aaa\0\u0af8\0\u0b46\0\u0b94\0\u0be2\0\u0c30"+
    "\0\u0c7e\0\u0618\0\u0618\0\u0ccc\0\u0d1a\0\u0d68\0\u0db6\0\u0e04"+
    "\0\u0e52\0\u0ea0\0\u0eee\0\u0f3c\0\u0f8a\0\u0fd8\0\u1026\0\u1074"+
    "\0\u10c2\0\u1110\0\u115e\0\u0618\0\u0618\0\u11ac\0\u0618\0\u11fa"+
    "\0\u1248\0\u1296\0\u12e4\0\u1332\0\u1380\0\u13ce\0\u141c\0\u146a"+
    "\0\u14b8\0\u1506\0\u1554\0\u15a2\0\u15f0\0\u163e\0\u168c\0\u16da"+
    "\0\u1728\0\u1776\0\u17c4\0\u1812\0\u1860\0\u18ae\0\u18fc\0\u194a"+
    "\0\u1998\0\u19e6\0\u0618\0\u0618\0\u0618\0\u1a34\0\u1a82\0\u1ad0"+
    "\0\u1b1e\0\u1b6c\0\u0618\0\u1bba\0\u1248\0\u1c08\0\u1c56\0\u1ca4"+
    "\0\u1cf2\0\u1d40\0\u1d8e\0\u1ddc\0\u1e2a\0\u1e78\0\u1ec6\0\u1f14"+
    "\0\u1f62\0\u1fb0\0\u1ffe\0\u204c\0\u209a\0\u20e8\0\u2136\0\u2184"+
    "\0\u21d2\0\u2220\0\u226e\0\u22bc\0\u230a\0\u0618\0\u0618\0\u0618"+
    "\0\u2358\0\u0618\0\u0618\0\u0618\0\u23a6\0\u0618\0\u0618\0\u23f4"+
    "\0\u2442\0\u0618\0\u2490\0\u24de\0\u252c\0\u257a\0\u25c8\0\u0618"+
    "\0\u0618\0\u2616\0\u2664\0\u26b2\0\u0618\0\u2700\0\u274e\0\u279c"+
    "\0\u27ea\0\u2838\0\u0618\0\u0618\0\u0618\0\u0618\0\u2886\0\u28d4"+
    "\0\u0618\0\u2922\0\u0618\0\u0618\0\u2970\0\u29be\0\u2a0c\0\u2a5a"+
    "\0\u2aa8\0\u2af6\0\u2b44\0\u2b92\0\u2be0\0\u2c2e\0\u0618\0\u2c7c"+
    "\0\u2cca\0\u2d18\0\u2d66\0\u2db4\0\u2e02\0\u2e50\0\u2e9e\0\u2eec"+
    "\0\u2f3a\0\u2f88\0\u2fd6\0\u3024\0\u3072\0\u30c0\0\u310e\0\u315c"+
    "\0\u31aa\0\u31f8\0\u3246\0\u0618\0\u3294\0\u32e2\0\u3330\0\u337e"+
    "\0\u33cc\0\u341a\0\u3468\0\u34b6\0\u3504\0\u0618\0\u0618\0\u3552"+
    "\0\u1248\0\u35a0\0\u35ee\0\u363c\0\u368a\0\u36d8\0\u3726\0\u3774"+
    "\0\u37c2\0\u3810\0\u385e\0\u38ac\0\u38fa\0\u3948\0\u3996\0\u39e4"+
    "\0\u3a32\0\u3a80\0\u3ace\0\u3b1c\0\u3b6a\0\u3bb8\0\u3c06\0\u3c54"+
    "\0\u3ca2\0\u3cf0\0\u19e6\0\u3d3e\0\u3d8c\0\u1b6c\0\u1bba\0\u1c08"+
    "\0\u1c56\0\u1ca4\0\u1cf2\0\u1d40\0\u1d8e\0\u1ddc\0\u1e2a\0\u1e78"+
    "\0\u1ec6\0\u1f14\0\u1f62\0\u1fb0\0\u1ffe\0\u204c\0\u209a\0\u20e8"+
    "\0\u2136\0\u2184\0\u21d2\0\u2220\0\u3dda\0\u3e28\0\u3e76\0\u3ec4"+
    "\0\u3f12\0\u3f60\0\u3fae\0\u3ffc\0\u404a\0\u4098\0\u40e6\0\u4134"+
    "\0\u4182\0\u41d0\0\u421e\0\u426c\0\u42ba\0\u4308\0\u4356\0\u43a4"+
    "\0\u43f2\0\u4440\0\u448e\0\u44dc\0\u452a\0\u230a\0\u4578\0\u2358"+
    "\0\u45c6\0\u23a6\0\u4614\0\u4662\0\u2442\0\u2490\0\u24de\0\u252c"+
    "\0\u257a\0\u46b0\0\u46fe\0\u474c\0\u479a\0\u25c8\0\u47e8\0\u4836"+
    "\0\u4884\0\u26b2\0\u274e\0\u279c\0\u27ea\0\u2838\0\u48d2\0\u4920"+
    "\0\u496e\0\u49bc\0\u4a0a\0\u0618\0\u4a58\0\u4aa6\0\u4af4\0\u4b42"+
    "\0\u4b90\0\u4bde\0\u4c2c\0\u4c7a\0\u4cc8\0\u4d16\0\u4d64\0\u0618"+
    "\0\u4db2\0\u4e00\0\u4e4e\0\u4e9c\0\u4eea\0\u4f38\0\u4f86\0\u4fd4"+
    "\0\u5022\0\u5070\0\u50be\0\u510c\0\u0618\0\u515a\0\u51a8\0\u51f6"+
    "\0\u5244\0\u5292\0\u52e0\0\u532e\0\u537c\0\u53ca\0\u5418\0\u5466"+
    "\0\u54b4\0\u5502\0\u5550\0\u559e\0\u0618\0\u55ec\0\u563a\0\u5688"+
    "\0\u56d6\0\u5724\0\u5772\0\u57c0\0\u580e\0\u585c\0\u58aa\0\u58f8"+
    "\0\u5946\0\u5994\0\u59e2\0\u5a30\0\u5a7e\0\u5acc\0\u5b1a\0\u5b68"+
    "\0\u5bb6\0\u5c04\0\u5c52\0\u5ca0\0\u5cee\0\u5d3c\0\u5d8a\0\u5dd8"+
    "\0\u5e26\0\u5e74\0\u0618\0\u5ec2\0\u5f10\0\u5f5e\0\u5fac\0\u5ffa"+
    "\0\u6048\0\u6096\0\u60e4\0\u6132\0\u6180\0\u61ce\0\u621c\0\u626a"+
    "\0\u62b8\0\u6306\0\u6354\0\u63a2\0\u63f0\0\u643e\0\u648c\0\u64da"+
    "\0\u6528\0\u6576\0\u65c4\0\u6612\0\u6660\0\u66ae\0\u66fc\0\u674a"+
    "\0\u6798\0\u67e6\0\u6834\0\u6882\0\u68d0\0\u691e\0\u696c\0\u69ba"+
    "\0\u559e\0\u6a08\0\u0618\0\u6a56\0\u6aa4\0\u6af2\0\u6b40\0\u6b8e"+
    "\0\u6bdc\0\u6c2a\0\u6c78\0\u6cc6\0\u0618\0\u6d14\0\u6d62\0\u6db0"+
    "\0\u0618\0\u6dfe\0\u6e4c\0\u6e9a\0\u6ee8\0\u6f36\0\u6f84\0\u0618"+
    "\0\u0618\0\u0618\0\u6fd2\0\u0618\0\u7020\0\u706e\0\u70bc\0\u710a"+
    "\0\u7158\0\u71a6\0\u71f4\0\u7242\0\u7290\0\u72de\0\u732c\0\u737a"+
    "\0\u0618\0\u73c8\0\u7416\0\u0618\0\u7464\0\u74b2\0\u7500\0\u754e"+
    "\0\u759c\0\u75ea\0\u0618\0\u7638\0\u0618\0\u7686\0\u0618\0\u76d4"+
    "\0\u7722\0\u0618\0\u7770\0\u77be\0\u780c\0\u785a\0\u78a8\0\u78f6"+
    "\0\u7944\0\u7992\0\u79e0\0\u7a2e\0\u7a7c\0\u7aca\0\u7b18\0\u7b66"+
    "\0\u7bb4\0\u7c02\0\u7c50\0\u7c9e\0\u7cec\0\u7d3a\0\u7d88\0\u7dd6"+
    "\0\u7e24\0\u7e72\0\u7ec0\0\u7f0e\0\u7f5c\0\u7faa\0\u7ff8\0\u8046"+
    "\0\u8094\0\u80e2\0\u8130\0\u817e\0\u81cc\0\u821a\0\u8268\0\u0618"+
    "\0\u82b6\0\u8304\0\u8352\0\u83a0\0\u83ee\0\u843c\0\u848a\0\u84d8"+
    "\0\u8526\0\u8574\0\u85c2\0\u8610\0\u865e\0\u86ac\0\u86fa\0\u8748"+
    "\0\u0618\0\u8796\0\u87e4\0\u0618\0\u8832\0\u8880\0\u88ce\0\u891c"+
    "\0\u896a\0\u89b8\0\u8a06\0\u8a54\0\u8aa2\0\u8af0\0\u8b3e\0\u8b8c"+
    "\0\u8bda\0\u8c28\0\u0618\0\u8c76\0\u8cc4\0\u0618\0\u0618\0\u8d12"+
    "\0\u8d60\0\u0618\0\u8dae\0\u8dfc\0\u8e4a\0\u8e98\0\u8ee6\0\u8f34"+
    "\0\u8f82\0\u0618\0\u8fd0\0\u901e\0\u906c\0\u90ba\0\u9108\0\u9156"+
    "\0\u91a4\0\u91f2\0\u9240\0\u928e\0\u92dc\0\u932a\0\u9378\0\u93c6"+
    "\0\u9414\0\u9462\0\u94b0\0\u94fe\0\u954c\0\u959a\0\u95e8\0\u9636"+
    "\0\u9684\0\u96d2\0\u9720\0\u976e\0\u97bc\0\u980a\0\u9858\0\u98a6"+
    "\0\u98f4\0\u9942\0\u9990\0\u99de\0\u9a2c\0\u9a7a\0\u9ac8\0\u0618"+
    "\0\u9b16\0\u0618\0\u0618\0\u0618\0\u9b64\0\u9bb2\0\u9c00\0\u0618"+
    "\0\u0618\0\u9c4e\0\u9c9c\0\u9cea\0\u9d38\0\u9d86\0\u0618\0\u9dd4"+
    "\0\u9e22\0\u9e70\0\u9ebe\0\u0618\0\u9f0c\0\u9f5a\0\u9fa8\0\u9ff6"+
    "\0\u0618\0\ua044\0\ua092\0\u0618\0\ua0e0\0\ua12e\0\ua17c\0\ua1ca"+
    "\0\ua218\0\ua266\0\ua2b4\0\ua302\0\ua350\0\ua39e\0\ua3ec\0\ua43a"+
    "\0\u0618\0\ua488\0\ua4d6\0\ua524\0\ua572\0\ua5c0\0\ua60e\0\ua65c"+
    "\0\u0618\0\ua6aa\0\ua6f8\0\ua746\0\ua794\0\ua7e2\0\ua830\0\ua87e"+
    "\0\ua8cc\0\ua91a\0\u0618\0\ua968\0\u0618\0\ua9b6\0\uaa04\0\u0618"+
    "\0\u0618\0\uaa52\0\uaaa0\0\uaaee\0\u0618\0\u0618\0\uab3c\0\uab8a"+
    "\0\uabd8\0\uac26\0\uac74\0\uacc2\0\u0618\0\uad10\0\uad5e\0\uadac"+
    "\0\uadfa\0\uae48\0\uae96\0\uaee4\0\uaf32\0\uaf80\0\u0618\0\u0618"+
    "\0\uafce\0\u0618\0\ub01c\0\ub06a\0\ub0b8\0\u0618\0\ub106\0\ub154"+
    "\0\ub1a2\0\ub1f0\0\ub23e\0\ub28c\0\ub2da\0\ub328\0\ub376\0\ub3c4"+
    "\0\ub412\0\ub460\0\ub4ae\0\u0618\0\ub4fc\0\ub54a\0\ub598\0\ub5e6"+
    "\0\ub634\0\ub682\0\u0618\0\ub6d0\0\ub71e\0\u0618\0\ub76c\0\ub7ba"+
    "\0\ub808\0\ub856\0\ub8a4\0\u0618\0\ub8f2\0\ub940\0\ub98e\0\u0618"+
    "\0\ub9dc\0\uba2a\0\uba78\0\u0618\0\ubac6\0\u0618\0\ubb14\0\ubb62"+
    "\0\u0618\0\u0618\0\u0618\0\ubbb0\0\ubbfe\0\ubc4c\0\u0618\0\ubc9a"+
    "\0\ubce8\0\u0618\0\ubd36\0\ubd84\0\ubdd2\0\u0618\0\ube20\0\ube6e"+
    "\0\ubebc\0\ubf0a\0\u0618\0\u0618\0\u0618\0\ubf58\0\ubfa6\0\ubff4"+
    "\0\uc042\0\u0618";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[778];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\25\3\26\1\27\1\30\3\25\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\2\25\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\25\1\46\1\47\1\50\2\25"+
    "\1\51\1\52\1\25\1\53\1\25\1\54\1\55\1\56"+
    "\1\57\1\25\1\60\2\25\1\61\2\25\1\62\1\63"+
    "\1\25\1\64\1\65\1\66\1\67\1\25\1\70\1\71"+
    "\1\72\1\73\4\25\1\74\1\75\2\25\1\76\1\77"+
    "\1\100\2\25\1\101\3\25\1\102\1\103\1\25\2\104"+
    "\1\105\113\104\3\25\1\106\1\25\1\107\1\110\1\111"+
    "\6\112\1\111\1\112\2\113\1\112\3\25\1\112\1\114"+
    "\1\112\1\115\3\112\1\116\14\112\1\117\5\112\1\111"+
    "\1\120\1\121\1\122\2\112\1\123\1\124\2\112\1\125"+
    "\1\112\1\126\1\127\1\130\1\131\1\132\1\112\1\133"+
    "\1\134\1\135\2\112\1\136\1\112\1\137\4\112\16\104"+
    "\1\140\6\104\1\25\70\104\3\25\1\112\1\25\1\141"+
    "\15\112\1\142\2\25\70\112\1\25\3\26\1\25\1\143"+
    "\16\25\1\144\1\145\30\25\1\62\1\63\3\25\1\146"+
    "\2\25\1\147\2\25\1\150\12\25\1\151\14\25\1\152"+
    "\1\25\1\153\1\154\1\155\6\25\1\155\1\25\2\156"+
    "\5\25\1\157\1\25\1\160\3\25\1\161\14\25\1\162"+
    "\5\25\1\155\1\163\1\164\1\165\2\25\1\166\1\167"+
    "\2\25\1\170\1\25\1\171\1\172\1\173\1\174\1\175"+
    "\1\25\1\176\1\177\1\200\2\25\1\201\1\25\1\202"+
    "\5\25\2\26\1\203\2\25\15\204\1\205\2\25\70\204"+
    "\1\25\3\26\1\25\1\206\16\25\1\144\1\207\30\25"+
    "\1\62\1\63\3\25\1\146\2\25\1\147\2\25\1\150"+
    "\12\25\1\151\14\25\1\152\1\25\1\210\1\154\1\155"+
    "\6\25\1\155\1\25\2\156\5\25\1\157\1\25\1\160"+
    "\3\25\1\161\14\25\1\162\5\25\1\155\1\163\1\164"+
    "\1\165\2\25\1\166\1\167\2\25\1\170\1\25\1\171"+
    "\1\172\1\173\1\174\1\175\1\25\1\176\1\177\1\200"+
    "\2\25\1\201\1\25\1\202\5\25\2\26\1\203\2\25"+
    "\15\204\1\211\2\25\70\204\1\25\3\26\1\25\1\212"+
    "\16\25\1\144\1\213\30\25\1\62\1\63\3\25\1\146"+
    "\2\25\1\147\2\25\1\150\12\25\1\151\14\25\1\152"+
    "\1\25\1\214\1\154\1\155\6\25\1\155\1\25\2\156"+
    "\5\25\1\157\1\25\1\160\3\25\1\161\14\25\1\162"+
    "\5\25\1\155\1\163\1\164\1\165\2\25\1\166\1\167"+
    "\2\25\1\170\1\25\1\171\1\172\1\173\1\174\1\175"+
    "\1\25\1\176\1\177\1\200\2\25\1\201\1\25\1\202"+
    "\5\25\2\26\1\203\2\25\15\204\1\215\2\25\70\204"+
    "\1\25\3\26\1\25\1\216\16\25\1\144\1\217\30\25"+
    "\1\62\1\63\3\25\1\146\2\25\1\147\2\25\1\150"+
    "\12\25\1\220\14\25\1\221\1\25\1\222\1\154\1\155"+
    "\6\25\1\155\1\25\2\156\5\25\1\157\1\25\1\160"+
    "\3\25\1\161\14\25\1\162\5\25\1\155\1\163\1\164"+
    "\1\223\2\25\1\166\1\167\2\25\1\170\1\25\1\171"+
    "\1\172\1\224\1\174\1\175\1\25\1\225\1\177\1\226"+
    "\2\25\1\201\1\25\1\202\5\25\2\26\1\203\2\25"+
    "\15\204\1\227\2\25\70\204\1\25\3\26\1\25\1\230"+
    "\16\25\1\144\1\231\30\25\1\62\1\63\3\25\1\232"+
    "\2\25\1\147\2\25\1\150\10\25\1\233\1\25\1\151"+
    "\14\25\1\234\1\25\1\235\1\25\1\155\6\25\1\155"+
    "\1\25\2\236\5\25\1\157\1\25\1\160\3\25\1\161"+
    "\14\25\1\162\5\25\1\155\2\25\1\165\6\25\1\170"+
    "\1\25\1\237\5\25\1\240\1\241\13\25\2\26\1\203"+
    "\2\25\15\204\1\242\2\25\70\204\117\0\3\26\116\0"+
    "\1\243\17\0\1\244\102\0\1\245\221\0\1\246\3\0"+
    "\1\247\1\250\17\0\1\251\4\0\1\252\31\0\1\252"+
    "\56\0\1\253\115\0\1\254\160\0\1\255\67\0\1\256"+
    "\5\0\1\257\75\0\1\260\30\0\1\261\70\0\1\262"+
    "\123\0\1\263\1\0\1\264\10\0\1\265\112\0\1\266"+
    "\100\0\1\267\6\0\1\270\105\0\1\271\133\0\1\272"+
    "\107\0\1\273\120\0\1\274\102\0\1\275\120\0\1\276"+
    "\115\0\1\277\153\0\1\300\102\0\1\301\15\0\1\302"+
    "\76\0\1\261\7\0\1\303\3\0\1\304\2\0\1\305"+
    "\103\0\1\306\111\0\1\307\15\0\1\310\103\0\1\311"+
    "\115\0\1\312\14\0\1\313\77\0\1\314\11\0\1\315"+
    "\100\0\1\316\132\0\1\317\116\0\1\320\120\0\1\321"+
    "\1\0\1\322\76\0\1\323\14\0\1\324\104\0\1\325"+
    "\46\0\1\326\207\0\1\327\4\0\1\106\2\0\1\110"+
    "\11\112\2\113\1\112\3\0\1\112\1\114\1\112\1\115"+
    "\3\112\1\116\14\112\1\117\6\112\1\120\1\121\1\122"+
    "\2\112\1\123\1\124\2\112\1\125\1\112\1\126\1\127"+
    "\1\130\1\131\1\132\1\112\1\133\1\134\1\135\2\112"+
    "\1\136\1\112\1\137\4\112\3\0\1\112\2\0\12\112"+
    "\2\330\1\112\3\0\1\112\6\330\24\112\6\330\27\112"+
    "\3\0\1\331\2\0\15\331\3\0\70\331\3\0\1\112"+
    "\2\0\15\112\3\0\70\112\3\0\1\112\2\0\12\112"+
    "\2\113\1\112\3\0\17\112\1\332\32\112\1\332\15\112"+
    "\3\0\1\112\2\0\15\112\3\0\54\112\1\333\13\112"+
    "\3\0\1\112\2\0\15\112\3\0\51\112\1\334\16\112"+
    "\3\0\1\112\2\0\15\112\3\0\37\112\1\335\30\112"+
    "\3\0\1\112\2\0\15\112\3\0\37\112\1\336\30\112"+
    "\3\0\1\112\2\0\15\112\3\0\53\112\1\337\14\112"+
    "\3\0\1\112\2\0\15\112\3\0\46\112\1\340\21\112"+
    "\3\0\1\112\2\0\15\112\3\0\37\112\1\341\30\112"+
    "\3\0\1\112\2\0\15\112\3\0\57\112\1\342\10\112"+
    "\3\0\1\112\2\0\15\112\3\0\54\112\1\343\13\112"+
    "\3\0\1\112\2\0\15\112\3\0\57\112\1\344\10\112"+
    "\3\0\1\112\2\0\15\112\3\0\37\112\1\345\3\112"+
    "\1\346\24\112\3\0\1\112\2\0\15\112\3\0\33\112"+
    "\1\347\34\112\3\0\1\112\2\0\15\112\3\0\33\112"+
    "\1\350\34\112\3\0\1\112\2\0\15\112\3\0\46\112"+
    "\1\351\21\112\3\0\1\112\2\0\15\112\3\0\57\112"+
    "\1\352\10\112\3\0\1\112\2\0\15\112\3\0\37\112"+
    "\1\353\3\112\1\354\24\112\3\0\1\112\2\0\15\112"+
    "\3\0\33\112\1\355\7\112\1\356\24\112\3\0\1\112"+
    "\2\0\15\112\3\0\37\112\1\357\30\112\3\0\1\112"+
    "\2\0\15\112\3\0\42\112\1\360\25\112\3\0\1\112"+
    "\2\0\15\112\3\0\37\112\1\361\30\112\16\0\1\362"+
    "\104\0\1\141\113\0\1\363\13\0\1\364\175\0\1\365"+
    "\115\0\1\310\102\0\1\314\116\0\1\323\33\0\1\366"+
    "\2\0\1\367\11\0\2\370\5\0\1\371\1\0\1\372"+
    "\3\0\1\373\14\0\1\374\6\0\1\375\1\376\1\377"+
    "\2\0\1\u0100\1\u0101\2\0\1\u0102\1\0\1\u0103\1\u0104"+
    "\1\u0105\1\u0106\1\u0107\1\0\1\u0108\1\u0109\1\u010a\2\0"+
    "\1\u010b\1\0\1\u010c\24\0\2\u010d\5\0\6\u010d\24\0"+
    "\6\u010d\47\0\2\370\23\0\1\u010e\32\0\1\u010e\117\0"+
    "\1\u010f\112\0\1\u0110\103\0\1\u0111\115\0\1\u0112\131\0"+
    "\1\u0113\110\0\1\u0114\106\0\1\u0115\135\0\1\u0116\112\0"+
    "\1\u0117\120\0\1\u0118\75\0\1\u0119\3\0\1\u011a\105\0"+
    "\1\u011b\115\0\1\u011c\130\0\1\u011d\126\0\1\u011e\75\0"+
    "\1\u011f\3\0\1\u0120\105\0\1\u0121\7\0\1\u0122\111\0"+
    "\1\u0123\120\0\1\u0124\112\0\1\u0125\31\0\2\26\1\203"+
    "\2\0\15\204\3\0\70\204\3\0\1\204\2\0\15\204"+
    "\3\0\70\204\3\0\1\u0126\13\0\1\u0127\101\0\1\u0128"+
    "\13\0\1\u0129\101\0\1\u012a\13\0\1\u012b\163\0\1\323"+
    "\23\0\1\u012c\7\0\1\u012d\2\0\1\367\11\0\2\370"+
    "\5\0\1\371\1\0\1\372\3\0\1\373\14\0\1\374"+
    "\6\0\1\375\1\376\1\u012e\2\0\1\u0100\1\u0101\2\0"+
    "\1\u0102\1\0\1\u0103\1\u0104\1\u012f\1\u0106\1\u0107\1\0"+
    "\1\u0130\1\u0109\1\u0131\2\0\1\u010b\1\0\1\u010c\71\0"+
    "\1\u0115\2\0\1\u0132\106\0\1\u011c\23\0\1\u0133\71\0"+
    "\1\u0134\3\0\1\u011f\3\0\1\u0120\111\0\1\u0135\33\0"+
    "\1\u0136\13\0\1\u0137\175\0\1\u0138\115\0\1\u0139\21\0"+
    "\1\u013a\14\0\2\370\5\0\1\371\1\0\1\372\3\0"+
    "\1\373\14\0\1\374\10\0\1\377\6\0\1\u0102\1\0"+
    "\1\u013b\5\0\1\u013c\1\u013d\32\0\2\236\23\0\1\u010e"+
    "\32\0\1\u010e\102\0\1\u0119\121\0\1\u0120\105\0\1\u0121"+
    "\37\0\1\u013e\13\0\1\u013f\101\0\1\247\25\0\1\252"+
    "\31\0\1\252\50\0\1\u0140\157\0\1\u0141\131\0\1\u0142"+
    "\54\0\1\u0143\113\0\1\u0144\132\0\1\u0145\77\0\1\u0146"+
    "\1\0\1\u0147\2\0\1\u0148\1\u0149\1\u014a\1\0\1\u014b"+
    "\2\0\1\u014c\2\0\1\u014d\12\0\1\u0146\1\0\1\u0147"+
    "\2\0\1\u0148\1\u0149\1\u014a\2\0\1\u014b\2\0\1\u014c"+
    "\3\0\1\u014d\61\0\1\u014e\115\0\1\u014f\100\0\1\u0150"+
    "\122\0\1\u0151\121\0\1\u0152\111\0\1\u0153\7\0\1\u0154"+
    "\116\0\1\u0155\107\0\1\u0156\133\0\1\u0157\101\0\1\u0158"+
    "\116\0\1\u0159\4\0\1\u015a\76\0\1\u015b\121\0\1\u015c"+
    "\162\0\1\u015d\74\0\1\u015e\131\0\1\u015f\77\0\1\u0160"+
    "\115\0\1\u0161\130\0\1\u0162\104\0\1\u0163\126\0\1\u0164"+
    "\117\0\1\u0165\123\0\1\u0166\102\0\1\u0167\111\0\1\u0168"+
    "\134\0\1\u0169\106\0\1\u016a\103\0\1\u016b\141\0\1\u016c"+
    "\71\0\1\u016d\134\0\1\u016e\123\0\1\u016f\112\0\1\u0170"+
    "\74\0\1\u0171\34\0\1\112\2\0\12\112\2\u0172\1\112"+
    "\3\0\1\112\6\u0172\24\112\6\u0172\27\112\3\0\1\112"+
    "\2\0\15\112\3\0\26\112\1\u0173\33\112\1\u0173\5\112"+
    "\3\0\1\112\2\0\15\112\3\0\43\112\1\u0174\24\112"+
    "\3\0\1\112\2\0\15\112\3\0\57\112\1\u0175\10\112"+
    "\3\0\1\112\2\0\15\112\3\0\50\112\1\u0176\17\112"+
    "\3\0\1\112\2\0\15\112\3\0\54\112\1\u0177\13\112"+
    "\3\0\1\112\2\0\15\112\3\0\57\112\1\u0178\10\112"+
    "\3\0\1\112\2\0\15\112\3\0\33\112\1\u0179\23\112"+
    "\1\u017a\10\112\3\0\1\112\2\0\15\112\3\0\50\112"+
    "\1\u017b\17\112\3\0\1\112\2\0\15\112\3\0\35\112"+
    "\1\u017c\32\112\3\0\1\112\2\0\15\112\3\0\33\112"+
    "\1\u017d\3\112\1\u017e\30\112\3\0\1\112\2\0\15\112"+
    "\3\0\55\112\1\u017f\12\112\3\0\1\112\2\0\15\112"+
    "\3\0\40\112\1\u0180\27\112\3\0\1\112\2\0\15\112"+
    "\3\0\47\112\1\u017a\20\112\3\0\1\112\2\0\15\112"+
    "\3\0\54\112\1\u0181\13\112\3\0\1\112\2\0\15\112"+
    "\3\0\60\112\1\u017d\7\112\3\0\1\112\2\0\15\112"+
    "\3\0\43\112\1\u0182\24\112\3\0\1\112\2\0\15\112"+
    "\3\0\54\112\1\u0183\13\112\3\0\1\112\2\0\15\112"+
    "\3\0\36\112\1\u0184\31\112\3\0\1\112\2\0\15\112"+
    "\3\0\41\112\1\u0185\26\112\3\0\1\112\2\0\15\112"+
    "\3\0\50\112\1\u0186\17\112\3\0\1\112\2\0\15\112"+
    "\3\0\46\112\1\u0187\21\112\3\0\1\112\2\0\15\112"+
    "\3\0\33\112\1\u0188\34\112\3\0\1\112\2\0\15\112"+
    "\3\0\43\112\1\u0189\24\112\3\0\1\112\2\0\15\112"+
    "\3\0\46\112\1\u018a\21\112\25\0\1\u018b\73\0\1\364"+
    "\25\0\1\u018c\31\0\1\u018c\126\0\1\u018d\41\0\2\u018e"+
    "\5\0\6\u018e\24\0\6\u018e\103\0\1\u018f\33\0\1\u018f"+
    "\76\0\1\u0190\131\0\1\u0191\106\0\1\u0192\121\0\1\u0193"+
    "\120\0\1\u0194\71\0\1\u0195\23\0\1\u0196\106\0\1\u0197"+
    "\102\0\1\u0198\113\0\1\u0199\3\0\1\u019a\133\0\1\u019b"+
    "\100\0\1\u019c\124\0\1\u0196\122\0\1\u019d\121\0\1\u0199"+
    "\100\0\1\u019e\126\0\1\u019f\77\0\1\u01a0\120\0\1\u01a1"+
    "\124\0\1\u01a2\113\0\1\u01a3\102\0\1\u01a4\125\0\1\u01a5"+
    "\120\0\1\u01a6\24\0\1\u0127\25\0\1\u01a7\31\0\1\u01a7"+
    "\35\0\1\u0129\25\0\1\u01a8\31\0\1\u01a8\35\0\1\u012b"+
    "\25\0\1\u01a9\31\0\1\u01a9\132\0\1\u01aa\102\0\1\u01ab"+
    "\125\0\1\u01ac\104\0\1\u01ad\112\0\1\u01a4\26\0\1\u01ae"+
    "\10\0\1\u0137\25\0\1\u01af\31\0\1\u01af\126\0\1\u01b0"+
    "\130\0\1\u01b1\11\0\1\u013f\25\0\1\u01b2\31\0\1\u01b2"+
    "\50\0\1\u01b3\135\0\1\u01b4\1\u01b5\5\0\1\u01b6\1\0"+
    "\1\u01b7\1\u01b8\17\0\1\u01b4\1\u01b5\6\0\1\u01b6\2\0"+
    "\1\u01b7\1\u01b8\110\0\1\u01b9\64\0\1\u01ba\76\0\1\u01bb"+
    "\132\0\1\u01bc\1\0\1\u01bd\2\0\1\u01be\25\0\1\u01bc"+
    "\2\0\1\u01bd\2\0\1\u01be\47\0\1\u01bf\31\0\1\u01bf"+
    "\55\0\1\u01c0\31\0\1\u01c0\53\0\1\u01c1\11\0\1\u01c2"+
    "\31\0\1\u01c2\72\0\1\u01c3\32\0\1\u01c3\57\0\1\u01c4"+
    "\31\0\1\u01c4\71\0\1\u01c5\32\0\1\u01c5\46\0\1\u01c6"+
    "\1\0\1\u01c7\27\0\1\u01c6\1\0\1\u01c7\61\0\1\u01c8"+
    "\117\0\1\u01c9\132\0\1\u01ca\115\0\1\u01cb\115\0\1\u01cc"+
    "\100\0\1\u01cd\121\0\1\u01ce\5\0\1\u01cf\130\0\1\u01d0"+
    "\76\0\1\u01d1\105\0\1\u01d2\117\0\1\u01d3\115\0\1\u01d4"+
    "\125\0\1\u01d5\113\0\1\u01d6\147\0\1\u01d7\116\0\1\u01d8"+
    "\123\0\1\u01d9\116\0\1\u01da\111\0\1\u01db\3\0\1\u01dc"+
    "\1\0\1\u01dd\101\0\1\u01de\127\0\1\u01df\116\0\1\u01e0"+
    "\44\0\1\u01e1\151\0\1\u01e2\114\0\1\u01e3\114\0\1\u01e4"+
    "\115\0\1\u01e5\124\0\1\u01e6\124\0\1\u01e7\103\0\1\u01e8"+
    "\130\0\1\u01e9\76\0\1\u01ea\134\0\1\u01eb\14\0\1\112"+
    "\2\0\12\112\2\u01ec\1\112\3\0\1\112\6\u01ec\24\112"+
    "\6\u01ec\27\112\3\0\1\u0173\2\0\15\112\3\0\70\112"+
    "\3\0\1\112\2\0\15\112\3\0\33\112\1\u01ed\34\112"+
    "\3\0\1\112\2\0\15\112\3\0\54\112\1\u01ee\13\112"+
    "\3\0\1\112\2\0\15\112\3\0\37\112\1\u01ef\30\112"+
    "\3\0\1\112\2\0\15\112\3\0\36\112\1\u01f0\31\112"+
    "\3\0\1\112\2\0\15\112\3\0\33\112\1\u0184\34\112"+
    "\3\0\1\112\2\0\15\112\3\0\35\112\1\u01f1\32\112"+
    "\3\0\1\112\2\0\15\112\3\0\37\112\1\u0184\30\112"+
    "\3\0\1\112\2\0\15\112\3\0\56\112\1\u01f2\11\112"+
    "\3\0\1\112\2\0\15\112\3\0\42\112\1\u01f3\25\112"+
    "\3\0\1\112\2\0\15\112\3\0\63\112\1\u0184\4\112"+
    "\3\0\1\112\2\0\15\112\3\0\37\112\1\u01f4\30\112"+
    "\3\0\1\112\2\0\15\112\3\0\56\112\1\u01f5\11\112"+
    "\3\0\1\112\2\0\15\112\3\0\56\112\1\u01f6\11\112"+
    "\3\0\1\112\2\0\15\112\3\0\51\112\1\u01f7\16\112"+
    "\3\0\1\112\2\0\15\112\3\0\60\112\1\u017a\7\112"+
    "\3\0\1\112\2\0\15\112\3\0\52\112\1\u01f8\15\112"+
    "\3\0\1\u0184\2\0\15\112\3\0\70\112\3\0\1\112"+
    "\2\0\15\112\3\0\42\112\1\u0180\25\112\3\0\1\112"+
    "\2\0\15\112\3\0\55\112\1\u01f9\12\112\3\0\1\112"+
    "\2\0\15\112\3\0\60\112\1\u01fa\7\112\3\0\1\112"+
    "\2\0\15\112\3\0\46\112\1\u0184\21\112\3\0\1\112"+
    "\2\0\15\112\3\0\56\112\1\u017a\11\112\3\0\1\112"+
    "\2\0\15\112\3\0\46\112\1\u01fb\21\112\60\0\1\u01fc"+
    "\134\0\1\u01db\36\0\2\u01fd\5\0\6\u01fd\24\0\6\u01fd"+
    "\32\0\1\u018f\173\0\1\u01fe\136\0\1\u01ff\100\0\1\u0200"+
    "\114\0\1\u0201\112\0\1\u01a0\117\0\1\u0202\117\0\1\u01a0"+
    "\134\0\1\u0203\101\0\1\u0204\136\0\1\u01a0\71\0\1\u0205"+
    "\134\0\1\u0206\115\0\1\u0207\110\0\1\u0208\124\0\1\u0196"+
    "\107\0\1\u0209\20\0\1\u01a0\202\0\1\u019c\130\0\1\u020a"+
    "\120\0\1\u020b\103\0\1\u01a0\125\0\1\u0196\105\0\1\u020c"+
    "\101\0\1\u020d\115\0\1\u020e\115\0\1\u020f\122\0\1\u0210"+
    "\113\0\1\u0211\114\0\1\u0212\124\0\1\u0213\130\0\1\u0214"+
    "\71\0\1\u0215\140\0\1\u01dc\72\0\1\u0216\56\0\1\u0217"+
    "\137\0\1\u0218\32\0\1\u0218\22\0\1\u01b6\157\0\1\u0219"+
    "\32\0\1\u0219\50\0\1\u021a\3\0\1\u021b\25\0\1\u021a"+
    "\3\0\1\u021b\106\0\1\u021c\103\0\1\u021d\76\0\1\u021e"+
    "\116\0\1\u021f\31\0\1\u021f\101\0\1\u0220\33\0\1\u0220"+
    "\63\0\1\u0221\33\0\1\u0221\46\0\1\u0222\31\0\1\u0222"+
    "\53\0\1\u0223\31\0\1\u0223\71\0\1\u0224\31\0\1\u0224"+
    "\71\0\1\u0225\32\0\1\u0225\67\0\1\u0226\33\0\1\u0226"+
    "\57\0\1\u0227\33\0\1\u0227\54\0\1\u0228\32\0\1\u0228"+
    "\60\0\1\u0229\124\0\1\u022a\111\0\1\u022b\102\0\1\u022c"+
    "\115\0\1\u022d\132\0\1\u022e\104\0\1\u022f\111\0\1\u0230"+
    "\134\0\1\u0231\122\0\1\u0232\75\0\1\u0233\151\0\1\u0234"+
    "\113\0\1\u0235\133\0\1\u0236\114\0\1\u0237\110\0\1\u0238"+
    "\115\0\1\u0239\105\0\1\u023a\46\0\1\u023b\173\0\1\u023c"+
    "\111\0\1\u023d\114\0\1\u023e\117\0\1\u023f\122\0\1\u0240"+
    "\35\0\1\u0241\167\0\1\u0242\30\0\1\112\2\0\12\112"+
    "\2\u0243\1\112\3\0\1\112\6\u0243\24\112\6\u0243\27\112"+
    "\3\0\1\112\2\0\15\112\3\0\46\112\1\u0244\21\112"+
    "\3\0\1\112\2\0\15\112\3\0\43\112\1\u0245\24\112"+
    "\3\0\1\112\2\0\15\112\3\0\60\112\1\u0246\7\112"+
    "\3\0\1\112\2\0\15\112\3\0\33\112\1\u0247\34\112"+
    "\3\0\1\112\2\0\15\112\3\0\45\112\1\u0184\22\112"+
    "\3\0\1\112\2\0\15\112\3\0\37\112\1\u0248\30\112"+
    "\3\0\1\112\2\0\15\112\3\0\55\112\1\u0249\12\112"+
    "\3\0\1\112\2\0\15\112\3\0\50\112\1\u0184\17\112"+
    "\3\0\1\112\2\0\15\112\3\0\43\112\1\u024a\24\112"+
    "\3\0\1\u01f6\2\0\15\112\3\0\70\112\3\0\1\112"+
    "\2\0\15\112\3\0\51\112\1\u01f4\16\112\3\0\1\112"+
    "\2\0\15\112\3\0\46\112\1\u017a\21\112\3\0\1\112"+
    "\2\0\10\112\1\u024b\4\112\3\0\70\112\3\0\1\112"+
    "\2\0\15\112\3\0\37\112\1\u024c\30\112\3\0\1\112"+
    "\2\0\15\112\3\0\51\112\1\u024d\16\112\50\0\1\u024e"+
    "\33\0\1\u024e\31\0\2\u024f\5\0\6\u024f\24\0\6\u024f"+
    "\123\0\1\u0250\112\0\1\u0251\132\0\1\u0252\70\0\1\u0253"+
    "\127\0\1\u01a0\107\0\1\u0254\133\0\1\u0255\110\0\1\u01a0"+
    "\110\0\1\u0256\27\0\1\u0207\211\0\1\u0205\112\0\1\u0196"+
    "\37\0\1\u0257\164\0\1\u0258\127\0\1\u0259\54\0\1\u025a"+
    "\31\0\1\u025a\74\0\1\u025b\33\0\1\u025b\57\0\1\u025c"+
    "\32\0\1\u025c\110\0\1\u025d\107\0\1\u025e\127\0\1\u0214"+
    "\21\0\1\u0214\151\0\1\u025f\31\0\1\u025f\74\0\1\u0260"+
    "\33\0\1\u0260\14\0\1\u0217\157\0\1\u0261\32\0\1\u0261"+
    "\44\0\1\u0262\31\0\1\u0262\110\0\1\u0263\33\0\1\u0263"+
    "\55\0\1\u0264\33\0\1\u0264\72\0\1\u0265\114\0\1\u0266"+
    "\105\0\1\u0267\122\0\1\u0268\33\0\1\u0268\54\0\1\u0269"+
    "\33\0\1\u0269\42\0\1\u026a\31\0\1\u026a\64\0\1\u026b"+
    "\31\0\1\u026b\71\0\1\u026c\32\0\1\u026c\61\0\1\u026d"+
    "\31\0\1\u026d\63\0\1\u026e\31\0\1\u026e\57\0\1\u026f"+
    "\31\0\1\u026f\71\0\1\u0270\124\0\1\u0271\112\0\1\u0272"+
    "\116\0\1\u0273\110\0\1\u0274\103\0\1\u0275\135\0\1\u0276"+
    "\116\0\1\u0277\114\0\1\u0278\104\0\1\u0279\161\0\1\u027a"+
    "\74\0\1\u027b\132\0\1\u027c\100\0\1\u027d\122\0\1\u027e"+
    "\14\0\1\u027f\77\0\1\u0280\134\0\1\u0281\76\0\1\u0282"+
    "\113\0\1\u0283\121\0\1\u0284\107\0\1\u0285\37\0\1\112"+
    "\2\0\12\112\2\u0286\1\112\3\0\1\112\6\u0286\24\112"+
    "\6\u0286\27\112\3\0\1\u0244\2\0\15\112\3\0\70\112"+
    "\3\0\1\112\2\0\15\112\3\0\37\112\1\u0287\30\112"+
    "\3\0\1\112\2\0\15\112\3\0\33\112\1\u0244\34\112"+
    "\3\0\1\112\2\0\15\112\3\0\50\112\1\u0246\17\112"+
    "\3\0\1\112\2\0\15\112\3\0\54\112\1\u01f6\13\112"+
    "\3\0\1\112\2\0\15\112\3\0\43\112\1\u0178\24\112"+
    "\3\0\1\112\2\0\15\112\3\0\40\112\1\u0288\27\112"+
    "\3\0\1\112\2\0\15\112\3\0\55\112\1\u0289\12\112"+
    "\3\0\1\112\2\0\15\112\3\0\54\112\1\u0184\13\112"+
    "\3\0\1\112\2\0\15\112\3\0\61\112\1\u0184\6\112"+
    "\37\0\1\u028a\31\0\1\u028a\44\0\2\u028b\5\0\6\u028b"+
    "\24\0\6\u028b\32\0\1\u0250\177\0\1\u028c\111\0\1\u0250"+
    "\132\0\1\u0252\121\0\1\u0207\104\0\1\u0194\112\0\1\u028d"+
    "\132\0\1\u028e\114\0\1\u01a0\122\0\1\u01a0\27\0\1\u028f"+
    "\141\0\1\u0290\32\0\1\u0290\20\0\1\u025c\21\0\1\u0291"+
    "\152\0\1\u0292\135\0\1\u0214\56\0\1\u0293\32\0\1\u0293"+
    "\52\0\1\u0294\31\0\1\u0294\101\0\1\u0295\33\0\1\u0295"+
    "\52\0\1\u0296\32\0\1\u0296\70\0\1\u0297\33\0\1\u0297"+
    "\52\0\1\u0298\32\0\1\u0298\115\0\1\u0299\60\0\1\u029a"+
    "\111\0\1\u029b\126\0\1\u029c\32\0\1\u029c\62\0\1\u029d"+
    "\32\0\1\u029d\63\0\1\u029e\32\0\1\u029e\46\0\1\u029f"+
    "\31\0\1\u029f\61\0\1\u02a0\146\0\1\u02a1\70\0\1\u02a2"+
    "\114\0\1\u02a3\132\0\1\u02a4\101\0\1\u02a5\121\0\1\u02a6"+
    "\155\0\1\u02a7\114\0\1\u02a8\113\0\1\u02a9\102\0\1\u02aa"+
    "\125\0\1\u02ab\121\0\1\u02ac\122\0\1\u02ad\106\0\1\u02ae"+
    "\116\0\1\u02af\24\0\1\112\2\0\12\112\2\u02b0\1\112"+
    "\3\0\1\112\6\u02b0\24\112\6\u02b0\27\112\3\0\1\112"+
    "\2\0\15\112\3\0\54\112\1\u0244\13\112\3\0\1\112"+
    "\2\0\15\112\3\0\63\112\1\u01f6\4\112\3\0\1\112"+
    "\2\0\15\112\3\0\37\112\1\u02b1\30\112\50\0\1\u02b2"+
    "\33\0\1\u02b2\31\0\2\u02b3\5\0\6\u02b3\24\0\6\u02b3"+
    "\131\0\1\u0250\124\0\1\u0207\71\0\1\u02b4\33\0\1\u028f"+
    "\21\0\1\u02b5\117\0\1\u02b6\31\0\1\u02b6\133\0\1\u02b7"+
    "\63\0\1\u02b8\32\0\1\u02b8\71\0\1\u02b9\33\0\1\u02b9"+
    "\55\0\1\u02ba\33\0\1\u02ba\14\0\1\u0296\141\0\1\u02bb"+
    "\31\0\1\u02bb\67\0\1\u02bc\31\0\1\u02bc\73\0\1\u02bd"+
    "\120\0\1\u02be\112\0\1\u02bf\32\0\1\u02bf\62\0\1\u02c0"+
    "\32\0\1\u02c0\67\0\1\u02c1\33\0\1\u02c1\61\0\1\u02c2"+
    "\33\0\1\u02c2\57\0\1\u02c3\112\0\1\u02c4\101\0\1\u02c5"+
    "\146\0\1\u02c6\76\0\1\u02c7\161\0\1\u02c8\105\0\1\u02c9"+
    "\132\0\1\u02ca\70\0\1\u02cb\121\0\1\u02cc\27\0\1\u02b0"+
    "\2\0\15\112\3\0\70\112\3\0\1\112\2\0\15\112"+
    "\3\0\54\112\1\u02cd\13\112\41\0\1\u02ce\32\0\1\u02ce"+
    "\24\0\1\u02b3\214\0\1\u02cf\55\0\1\u02d0\32\0\1\u02d0"+
    "\130\0\1\u0214\56\0\1\u02d1\33\0\1\u02d1\60\0\1\u02d2"+
    "\33\0\1\u02d2\14\0\1\u02ba\160\0\1\u02d3\33\0\1\u02d3"+
    "\16\0\1\u02bc\21\0\1\u02d4\124\0\1\u02d5\141\0\1\u02d6"+
    "\74\0\1\u02d7\31\0\1\u02d7\104\0\1\u02d8\106\0\1\u02d9"+
    "\114\0\1\u02da\100\0\1\u02db\160\0\1\u02dc\110\0\1\u02dd"+
    "\111\0\1\u02de\126\0\1\u02df\106\0\1\u02e0\31\0\1\112"+
    "\2\0\15\112\3\0\43\112\1\u02e1\24\112\33\0\1\u02e2"+
    "\31\0\1\u02e2\121\0\1\u02e3\27\0\1\u02d0\21\0\1\u02e4"+
    "\140\0\1\u02e5\33\0\1\u02e5\40\0\1\u02e6\31\0\1\u02e6"+
    "\67\0\1\u02e7\31\0\1\u02e7\74\0\1\u02e8\100\0\1\u02e9"+
    "\131\0\1\u02ea\32\0\1\u02ea\62\0\1\u02eb\114\0\1\u02ec"+
    "\117\0\1\u02ed\135\0\1\u02ee\125\0\1\u02ef\51\0\1\u02f0"+
    "\163\0\1\u02f1\22\0\1\112\2\0\15\112\3\0\40\112"+
    "\1\u0244\27\112\3\0\1\u02e2\21\0\1\u02f2\156\0\1\u0250"+
    "\32\0\1\u02e5\21\0\1\u02f3\136\0\1\u02f4\33\0\1\u02f4"+
    "\42\0\1\u02f5\31\0\1\u02f5\75\0\1\u02f6\111\0\1\u02f7"+
    "\31\0\1\u02f7\77\0\1\u02f8\112\0\1\u02f9\160\0\1\u02fa"+
    "\115\0\1\u02fb\37\0\1\u02fc\31\0\1\u02fc\33\0\1\u02f5"+
    "\145\0\1\u02fd\124\0\1\u02fe\112\0\1\u02ff\115\0\1\u0300"+
    "\105\0\1\u0301\31\0\1\u0301\63\0\1\u0302\132\0\1\u0303"+
    "\135\0\1\u0304\34\0\1\u0301\21\0\1\u0305\140\0\1\u0306"+
    "\111\0\1\u0307\117\0\1\u0308\106\0\1\u0309\122\0\1\u030a"+
    "\51\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[49296];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\24\0\1\11\2\1\1\11\1\1\6\11\22\1\2\11"+
    "\20\1\2\11\1\1\1\11\33\1\3\11\5\1\1\11"+
    "\32\1\3\11\1\1\3\11\1\1\2\11\2\1\1\11"+
    "\5\1\2\11\3\1\1\11\5\1\4\11\2\0\1\11"+
    "\1\0\2\11\12\0\1\11\24\0\1\11\11\0\2\11"+
    "\32\1\122\0\1\11\13\0\1\11\14\0\1\11\16\0"+
    "\1\1\1\11\4\0\31\1\1\11\3\0\1\1\20\0"+
    "\1\1\22\0\1\11\2\0\1\1\6\0\1\11\3\0"+
    "\1\11\6\0\3\11\1\0\1\11\10\0\1\1\3\0"+
    "\1\11\2\0\1\11\6\0\1\11\1\0\1\11\1\0"+
    "\1\11\2\0\1\11\1\0\20\1\13\0\1\1\10\0"+
    "\1\11\3\0\1\1\2\0\1\1\11\0\1\11\2\0"+
    "\1\11\16\0\1\11\2\0\2\11\2\0\1\11\7\0"+
    "\1\11\13\1\2\0\1\1\27\0\1\11\1\0\3\11"+
    "\3\0\2\11\5\0\1\11\4\0\1\11\4\0\1\11"+
    "\2\0\1\11\1\0\4\1\7\0\1\11\4\0\1\1"+
    "\2\0\1\11\11\0\1\11\1\0\1\11\2\0\2\11"+
    "\3\0\2\11\1\0\2\1\1\0\1\1\1\0\1\11"+
    "\4\0\1\1\4\0\2\11\1\0\1\11\3\0\1\11"+
    "\6\0\1\1\6\0\1\11\6\0\1\11\2\0\1\11"+
    "\2\0\1\1\2\0\1\11\3\0\1\11\3\0\1\11"+
    "\1\0\1\11\2\0\3\11\1\0\1\1\1\0\1\11"+
    "\2\0\1\11\3\0\1\11\4\0\3\11\4\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[778];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
//private ArrayList<ReporteError> reporteError = new ArrayList<>();





  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexerCup(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    return ZZ_CMAP[input];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("Error tipo lexico "+yytext());
            }
            // fall through
          case 127: break;
          case 2:
            { 
            }
            // fall through
          case 128: break;
          case 3:
            { return new Symbol(sym.NOT,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 129: break;
          case 4:
            { yybegin(TEXTON); {return new Symbol(sym.COMILLA,yyline+1, yycolumn+1,yytext());}
            }
            // fall through
          case 130: break;
          case 5:
            { return new Symbol(sym.PARENTESIS_ABRE,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 131: break;
          case 6:
            { return new Symbol(sym.PARENTESIS_CIERRA,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 132: break;
          case 7:
            { return new Symbol(sym.MULTIPLICACION,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 133: break;
          case 8:
            { return new Symbol(sym.SUMA,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 134: break;
          case 9:
            { return new Symbol(sym.RESTA,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 135: break;
          case 10:
            { return new Symbol(sym.DIVISION,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 136: break;
          case 11:
            { return new Symbol(sym.MENOR_QUE,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 137: break;
          case 12:
            { return new Symbol(sym.IGUAL,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 138: break;
          case 13:
            { return new Symbol(sym.MAYOR_QUE,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 139: break;
          case 14:
            { return new Symbol(sym.CORCHETE_ABRE,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 140: break;
          case 15:
            { return new Symbol(sym.CORCHETE_CIERRA,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 141: break;
          case 16:
            { yybegin(YYINITIAL); /*SOLO IGNORA EL COMENTARIO*/
            }
            // fall through
          case 142: break;
          case 17:
            { { return new Symbol(sym.TEXTO,yyline+1, yycolumn+1,yytext()); }
            }
            // fall through
          case 143: break;
          case 18:
            { yybegin(YYINITIAL); {return new Symbol(sym.COMILLA,yyline+1, yycolumn+1,yytext());}
            }
            // fall through
          case 144: break;
          case 19:
            { yybegin(H1COMILLA); {return new Symbol(sym.COMILLA,yyline+1, yycolumn+1,yytext());}
            }
            // fall through
          case 145: break;
          case 20:
            { yybegin(H1_TEXTO); {return new Symbol(sym.MAYOR_QUE,yyline+1, yycolumn+1,yytext());}
            }
            // fall through
          case 146: break;
          case 21:
            { yybegin(H1STATE); {return new Symbol(sym.COMILLA,yyline+1, yycolumn+1,yytext());}
            }
            // fall through
          case 147: break;
          case 22:
            { return new Symbol(sym.TEXTO,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 148: break;
          case 23:
            { yybegin(SPAMCOMILLA); {return new Symbol(sym.COMILLA,yyline+1, yycolumn+1,yytext());}
            }
            // fall through
          case 149: break;
          case 24:
            { yybegin(SPAMTEXTO); {return new Symbol(sym.MAYOR_QUE,yyline+1, yycolumn+1,yytext());}
            }
            // fall through
          case 150: break;
          case 25:
            { yybegin(SPAMSTATE); {return new Symbol(sym.COMILLA,yyline+1, yycolumn+1,yytext());}
            }
            // fall through
          case 151: break;
          case 26:
            { yybegin(CPCOMILLA); {return new Symbol(sym.COMILLA,yyline+1, yycolumn+1,yytext());}
            }
            // fall through
          case 152: break;
          case 27:
            { yybegin(CPTEXTO); {return new Symbol(sym.MAYOR_QUE,yyline+1, yycolumn+1,yytext());}
            }
            // fall through
          case 153: break;
          case 28:
            { yybegin(CPSTATE); {return new Symbol(sym.COMILLA,yyline+1, yycolumn+1,yytext());}
            }
            // fall through
          case 154: break;
          case 29:
            { yybegin(INPUTCOMILLA); {return new Symbol(sym.COMILLA,yyline+1, yycolumn+1,yytext());}
            }
            // fall through
          case 155: break;
          case 30:
            { yybegin(INPUTTEXTO); {return new Symbol(sym.MAYOR_QUE,yyline+1, yycolumn+1,yytext());}
            }
            // fall through
          case 156: break;
          case 31:
            { yybegin(INPUTSTATE); {return new Symbol(sym.COMILLA,yyline+1, yycolumn+1,yytext());}
            }
            // fall through
          case 157: break;
          case 32:
            { yybegin(TEXT_AREA_COMILLA); {return new Symbol(sym.COMILLA,yyline+1, yycolumn+1,yytext());}
            }
            // fall through
          case 158: break;
          case 33:
            { yybegin(TEXT_AREA_TEXTO); {return new Symbol(sym.MAYOR_QUE,yyline+1, yycolumn+1,yytext());}
            }
            // fall through
          case 159: break;
          case 34:
            { yybegin(TEXT_AREA_STATE); {return new Symbol(sym.COMILLA,yyline+1, yycolumn+1,yytext());}
            }
            // fall through
          case 160: break;
          case 35:
            { return new Symbol(sym.NUMERO,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 161: break;
          case 36:
            { yybegin(COMENTARIO);
            }
            // fall through
          case 162: break;
          case 37:
            { return new Symbol(sym.DIFERENCIACION,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 163: break;
          case 38:
            { return new Symbol(sym.AND,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 164: break;
          case 39:
            { return new Symbol(sym.CIERRA_INIT,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 165: break;
          case 40:
            { return new Symbol(sym.MENOR_IGUAL,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 166: break;
          case 41:
            { return new Symbol(sym.IGUALDAD,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 167: break;
          case 42:
            { return new Symbol(sym.MAYOR_IGUAL,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 168: break;
          case 43:
            { return new Symbol(sym.IF,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 169: break;
          case 44:
            { return new Symbol(sym.ID,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 170: break;
          case 45:
            { return new Symbol(sym.ABRE_INIT,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 171: break;
          case 46:
            { return new Symbol(sym.OR,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 172: break;
          case 47:
            { return new Symbol(sym.TEXTO_ID,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 173: break;
          case 48:
            { return new Symbol(sym.ASC,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 174: break;
          case 49:
            { return new Symbol(sym.END,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 175: break;
          case 50:
            { return new Symbol(sym.ALT,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 176: break;
          case 51:
            { return new Symbol(sym.ROW,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 177: break;
          case 52:
            { return new Symbol(sym.SRC,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 178: break;
          case 53:
            { return new Symbol(sym.SIZE,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 179: break;
          case 54:
            { return new Symbol(sym.CTE_COLOR,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 180: break;
          case 55:
            { yybegin(YYINITIAL); /*SOLO IGNORA EL COMENTARIO_BLOQUE*/
            }
            // fall through
          case 181: break;
          case 56:
            { yybegin(COMENTARIO_BLOQUE);
            }
            // fall through
          case 182: break;
          case 57:
            { yybegin(CPSTATE); {return new Symbol(sym.ABRE_C_P,yyline+1, yycolumn+1,yytext());}
            }
            // fall through
          case 183: break;
          case 58:
            { return new Symbol(sym.C_BR,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 184: break;
          case 59:
            { return new Symbol(sym.C_H1,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 185: break;
          case 60:
            { return new Symbol(sym.DESC,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 186: break;
          case 61:
            { return new Symbol(sym.ELSE,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 187: break;
          case 62:
            { return new Symbol(sym.EXIT,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 188: break;
          case 63:
            { return new Symbol(sym.INIT,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 189: break;
          case 64:
            { return new Symbol(sym.THEN,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 190: break;
          case 65:
            { return new Symbol(sym.CHAR,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 191: break;
          case 66:
            { return new Symbol(sym.COLS,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 192: break;
          case 67:
            { return new Symbol(sym.HREF,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 193: break;
          case 68:
            { return new Symbol(sym.NAME,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 194: break;
          case 69:
            { return new Symbol(sym.ROWS,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 195: break;
          case 70:
            { return new Symbol(sym.TRUE,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 196: break;
          case 71:
            { return new Symbol(sym.ALINEACION,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 197: break;
          case 72:
            { return new Symbol(sym.TYPE,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 198: break;
          case 73:
            { return new Symbol(sym.TIPOS_DE_INPUT,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 199: break;
          case 74:
            { yybegin(H1STATE); {return new Symbol(sym.ABRE_C_H1,yyline+1, yycolumn+1,yytext());}
            }
            // fall through
          case 200: break;
          case 75:
            { return new Symbol(sym.C_DIV,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 201: break;
          case 76:
            { return new Symbol(sym.C_IMG,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 202: break;
          case 77:
            { return new Symbol(sym.WHILE,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 203: break;
          case 78:
            { return new Symbol(sym.CLASS,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 204: break;
          case 79:
            { return new Symbol(sym.COLOR,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 205: break;
          case 80:
            { return new Symbol(sym.FALSE,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 206: break;
          case 81:
            { return new Symbol(sym.WIDTH,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 207: break;
          case 82:
            { return new Symbol(sym.TIPOS_LETRA,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 208: break;
          case 83:
            { return new Symbol(sym.C_BODY,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 209: break;
          case 84:
            { return new Symbol(sym.C_GCIC,yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 210: break;
          case 85:
            { return new Symbol(sym.C_HEAD,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 211: break;
          case 86:
            { return new Symbol(sym.C_LINK,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 212: break;
          case 87:
            { return new Symbol(sym.HUNTIL,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 213: break;
          case 88:
            { return new Symbol(sym.INSERT,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 214: break;
          case 89:
            { return new Symbol(sym.REPEAT,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 215: break;
          case 90:
            { return new Symbol(sym.COLUMN,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 216: break;
          case 91:
            { return new Symbol(sym.HEIGHT,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 217: break;
          case 92:
            { return new Symbol(sym.STRING,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 218: break;
          case 93:
            { yybegin(YYINITIAL); return new Symbol(sym.CIERRA_C_P,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 219: break;
          case 94:
            { yybegin(SPAMSTATE); {return new Symbol(sym.ABRE_C_SPAM,yyline+1, yycolumn+1,yytext());}
            }
            // fall through
          case 220: break;
          case 95:
            { return new Symbol(sym.MODO,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 221: break;
          case 96:
            { return new Symbol(sym.ON_LOAD,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 222: break;
          case 97:
            { return new Symbol(sym.REVERSE,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 223: break;
          case 98:
            { return new Symbol(sym.BOOLEAN,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 224: break;
          case 99:
            { return new Symbol(sym.DECIMAL,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 225: break;
          case 100:
            { return new Symbol(sym.INTEGER,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 226: break;
          case 101:
            { return new Symbol(sym.ONCLICK,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 227: break;
          case 102:
            { return new Symbol(sym.RGB_COLOR,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 228: break;
          case 103:
            { yybegin(YYINITIAL); return new Symbol(sym.CIERRA_C_H1,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 229: break;
          case 104:
            { yybegin(INPUTSTATE); {return new Symbol(sym.ABRE_INPUT,yyline+1, yycolumn+1,yytext());}
            }
            // fall through
          case 230: break;
          case 105:
            { return new Symbol(sym.C_BUTTON,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 231: break;
          case 106:
            { return new Symbol(sym.C_OPTION,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 232: break;
          case 107:
            { return new Symbol(sym.C_SELECT,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 233: break;
          case 108:
            { return new Symbol(sym.PROCESS_,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 234: break;
          case 109:
            { yybegin(TODO); {return new Symbol(sym.TI,yyline+1, yycolumn+1,yytext());}
            }
            // fall through
          case 235: break;
          case 110:
            { return new Symbol(sym.THENWHILE,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 236: break;
          case 111:
            { return new Symbol(sym.FONT_SIZE,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 237: break;
          case 112:
            { yybegin(YYINITIAL); return new Symbol(sym.CIERRA_C_SPAM,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 238: break;
          case 113:
            { return new Symbol(sym.ALERT_INFO,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 239: break;
          case 114:
            { return new Symbol(sym.LETPAR_NUM,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 240: break;
          case 115:
            { return new Symbol(sym.BACKGROUND,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 241: break;
          case 116:
            { return new Symbol(sym.TEXT_ALIGN,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 242: break;
          case 117:
            { yybegin(YYINITIAL); return new Symbol(sym.TD,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 243: break;
          case 118:
            { yybegin(YYINITIAL); return new Symbol(sym.CIERRA_INPUT,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 244: break;
          case 119:
            { yybegin(TEXT_AREA_STATE); {return new Symbol(sym.ABRE_TEXT_AREA,yyline+1, yycolumn+1,yytext());}
            }
            // fall through
          case 245: break;
          case 120:
            { return new Symbol(sym.C_SCRIPTING,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 246: break;
          case 121:
            { return new Symbol(sym.FONT_FAMILY,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 247: break;
          case 122:
            { return new Symbol(sym.LETIMPAR_NUM,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 248: break;
          case 123:
            { return new Symbol(sym.NUM_ALEATORIO,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 249: break;
          case 124:
            { return new Symbol(sym.GETELEMENBYID,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 250: break;
          case 125:
            { yybegin(YYINITIAL); return new Symbol(sym.CIERRA_TEXT_AREA,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 251: break;
          case 126:
            { return new Symbol(sym.CARACTER_ALEATORIO,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 252: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
