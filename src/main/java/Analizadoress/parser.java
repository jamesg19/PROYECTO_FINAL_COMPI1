
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadoress;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\234\000\002\002\004\000\002\070\003\000\002\002" +
    "\014\000\002\002\013\000\002\003\010\000\002\003\010" +
    "\000\002\003\005\000\002\003\005\000\002\015\007\000" +
    "\002\016\007\000\002\011\012\000\002\011\012\000\002" +
    "\011\011\000\002\004\004\000\002\004\004\000\002\004" +
    "\003\000\002\005\003\000\002\006\003\000\002\012\014" +
    "\000\002\012\013\000\002\010\005\000\002\010\004\000" +
    "\002\013\007\000\002\017\015\000\002\017\014\000\002" +
    "\020\007\000\002\020\007\000\002\021\004\000\002\021" +
    "\003\000\002\021\004\000\002\021\003\000\002\021\004" +
    "\000\002\021\003\000\002\021\004\000\002\021\003\000" +
    "\002\021\004\000\002\021\003\000\002\021\004\000\002" +
    "\021\003\000\002\024\007\000\002\024\006\000\002\024" +
    "\006\000\002\024\005\000\002\023\006\000\002\023\006" +
    "\000\002\023\006\000\002\023\006\000\002\023\006\000" +
    "\002\023\005\000\002\023\005\000\002\023\005\000\002" +
    "\023\005\000\002\023\005\000\002\027\007\000\002\030" +
    "\007\000\002\031\007\000\002\025\007\000\002\026\007" +
    "\000\002\026\007\000\002\022\005\000\002\033\007\000" +
    "\002\033\006\000\002\033\006\000\002\033\005\000\002" +
    "\032\006\000\002\032\006\000\002\032\006\000\002\032" +
    "\006\000\002\032\006\000\002\032\005\000\002\032\005" +
    "\000\002\032\005\000\002\032\005\000\002\032\005\000" +
    "\002\036\007\000\002\037\007\000\002\040\007\000\002" +
    "\034\007\000\002\035\007\000\002\035\007\000\002\042" +
    "\007\000\002\042\006\000\002\042\006\000\002\042\005" +
    "\000\002\041\006\000\002\041\006\000\002\041\006\000" +
    "\002\041\006\000\002\041\006\000\002\041\005\000\002" +
    "\041\005\000\002\041\005\000\002\041\005\000\002\041" +
    "\005\000\002\045\007\000\002\046\007\000\002\047\007" +
    "\000\002\043\007\000\002\044\007\000\002\044\007\000" +
    "\002\062\007\000\002\062\006\000\002\062\006\000\002" +
    "\062\005\000\002\061\006\000\002\061\006\000\002\061" +
    "\006\000\002\061\006\000\002\061\006\000\002\061\006" +
    "\000\002\061\005\000\002\061\005\000\002\061\005\000" +
    "\002\061\005\000\002\061\005\000\002\061\005\000\002" +
    "\065\007\000\002\066\007\000\002\067\007\000\002\063" +
    "\007\000\002\064\007\000\002\064\007\000\002\060\007" +
    "\000\002\051\007\000\002\051\006\000\002\051\006\000" +
    "\002\051\005\000\002\050\006\000\002\050\006\000\002" +
    "\050\006\000\002\050\006\000\002\050\006\000\002\050" +
    "\006\000\002\050\005\000\002\050\005\000\002\050\005" +
    "\000\002\050\005\000\002\050\005\000\002\050\005\000" +
    "\002\053\007\000\002\054\007\000\002\055\007\000\002" +
    "\052\007\000\002\057\007\000\002\056\007\000\002\077" +
    "\004\000\002\077\003\000\002\073\004\000\002\073\005" +
    "\000\002\073\006\000\002\076\006\000\002\075\004\000" +
    "\002\074\010\000\002\074\011\000\002\071\006\000\002" +
    "\072\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0198\000\004\074\005\001\002\000\004\002\u019a\001" +
    "\002\000\004\004\007\001\002\000\004\002\000\001\002" +
    "\000\006\076\011\135\012\001\002\000\004\076\u0193\001" +
    "\002\000\004\074\037\001\002\000\006\041\013\042\015" +
    "\001\002\000\004\072\033\001\002\000\004\136\027\001" +
    "\002\000\004\072\023\001\002\000\004\136\017\001\002" +
    "\000\006\076\ufffa\135\020\001\002\000\004\042\015\001" +
    "\002\000\004\136\022\001\002\000\004\076\ufffd\001\002" +
    "\000\004\137\024\001\002\000\004\026\025\001\002\000" +
    "\004\137\026\001\002\000\004\136\ufff8\001\002\000\006" +
    "\076\ufffb\135\030\001\002\000\004\041\013\001\002\000" +
    "\004\136\032\001\002\000\004\076\ufffc\001\002\000\004" +
    "\137\034\001\002\000\004\027\035\001\002\000\004\137" +
    "\036\001\002\000\004\136\ufff9\001\002\000\004\005\u0165" +
    "\001\002\000\004\074\042\001\002\000\004\074\u0161\001" +
    "\002\000\004\010\043\001\002\000\004\135\044\001\002" +
    "\000\006\024\046\136\047\001\002\000\004\136\u015a\001" +
    "\002\000\004\072\u0154\001\002\000\004\076\050\001\002" +
    "\000\016\074\057\152\060\154\063\156\061\160\056\162" +
    "\065\001\002\000\016\074\uffe1\152\uffe1\154\uffe1\156\uffe1" +
    "\160\uffe1\162\uffe1\001\002\000\016\074\uffdd\152\uffdd\154" +
    "\uffdd\156\uffdd\160\uffdd\162\uffdd\001\002\000\016\074\uffdf" +
    "\152\uffdf\154\uffdf\156\uffdf\160\uffdf\162\uffdf\001\002\000" +
    "\016\074\uffdb\152\uffdb\154\uffdb\156\uffdb\160\uffdb\162\uffdb" +
    "\001\002\000\016\074\uffe5\152\uffe5\154\uffe5\156\uffe5\160" +
    "\uffe5\162\uffe5\001\002\000\006\076\u0119\135\u011a\001\002" +
    "\000\004\020\254\001\002\000\006\076\344\135\345\001" +
    "\002\000\006\076\261\135\262\001\002\000\016\074\251" +
    "\152\060\154\063\156\061\160\056\162\065\001\002\000" +
    "\006\076\161\135\162\001\002\000\016\074\uffe3\152\uffe3" +
    "\154\uffe3\156\uffe3\160\uffe3\162\uffe3\001\002\000\006\076" +
    "\067\135\070\001\002\000\004\076\154\001\002\000\006" +
    "\026\151\163\152\001\002\000\016\025\102\032\074\041" +
    "\101\043\100\044\103\147\072\001\002\000\004\136\147" +
    "\001\002\000\004\072\143\001\002\000\004\136\141\001" +
    "\002\000\004\072\135\001\002\000\004\136\133\001\002" +
    "\000\004\136\131\001\002\000\004\136\127\001\002\000" +
    "\004\072\123\001\002\000\004\072\117\001\002\000\004" +
    "\072\113\001\002\000\004\072\107\001\002\000\004\136" +
    "\105\001\002\000\006\076\uff77\135\070\001\002\000\004" +
    "\076\uff7d\001\002\000\004\137\110\001\002\000\004\146" +
    "\111\001\002\000\004\137\112\001\002\000\004\136\uff71" +
    "\001\002\000\004\137\114\001\002\000\004\151\115\001" +
    "\002\000\004\137\116\001\002\000\004\136\uff76\001\002" +
    "\000\004\137\120\001\002\000\004\027\121\001\002\000" +
    "\004\137\122\001\002\000\004\136\uff73\001\002\000\004" +
    "\137\124\001\002\000\004\146\125\001\002\000\004\137" +
    "\126\001\002\000\004\136\uff72\001\002\000\006\076\uff7b" +
    "\135\070\001\002\000\004\076\uff81\001\002\000\006\076" +
    "\uff78\135\070\001\002\000\004\076\uff7e\001\002\000\006" +
    "\076\uff7a\135\070\001\002\000\004\076\uff80\001\002\000" +
    "\004\137\136\001\002\000\004\150\137\001\002\000\004" +
    "\137\140\001\002\000\004\136\uff74\001\002\000\006\076" +
    "\uff79\135\070\001\002\000\004\076\uff7f\001\002\000\004" +
    "\137\144\001\002\000\004\031\145\001\002\000\004\137" +
    "\146\001\002\000\004\136\uff75\001\002\000\006\076\uff7c" +
    "\135\070\001\002\000\004\076\uff82\001\002\000\004\163" +
    "\153\001\002\000\016\074\uff83\152\uff83\154\uff83\156\uff83" +
    "\160\uff83\162\uff83\001\002\000\016\074\uff84\152\uff84\154" +
    "\uff84\156\uff84\160\uff84\162\uff84\001\002\000\006\026\155" +
    "\163\156\001\002\000\004\163\157\001\002\000\016\074" +
    "\uff85\152\uff85\154\uff85\156\uff85\160\uff85\162\uff85\001\002" +
    "\000\016\074\uff86\152\uff86\154\uff86\156\uff86\160\uff86\162" +
    "\uff86\001\002\000\004\076\240\001\002\000\006\026\235" +
    "\155\236\001\002\000\014\022\163\025\174\032\172\041" +
    "\173\147\171\001\002\000\004\072\227\001\002\000\004" +
    "\136\225\001\002\000\004\136\223\001\002\000\004\136" +
    "\221\001\002\000\004\136\217\001\002\000\004\136\215" +
    "\001\002\000\004\072\211\001\002\000\004\072\205\001" +
    "\002\000\004\072\201\001\002\000\004\072\175\001\002" +
    "\000\004\137\176\001\002\000\004\151\177\001\002\000" +
    "\004\137\200\001\002\000\004\136\uffb7\001\002\000\004" +
    "\137\202\001\002\000\004\027\203\001\002\000\004\137" +
    "\204\001\002\000\004\136\uffb4\001\002\000\004\137\206" +
    "\001\002\000\004\150\207\001\002\000\004\137\210\001" +
    "\002\000\004\136\uffb5\001\002\000\004\137\212\001\002" +
    "\000\004\031\213\001\002\000\004\137\214\001\002\000" +
    "\004\136\uffb6\001\002\000\006\076\uffba\135\162\001\002" +
    "\000\004\076\uffbf\001\002\000\006\076\uffb9\135\162\001" +
    "\002\000\004\076\uffbe\001\002\000\006\076\uffb8\135\162" +
    "\001\002\000\004\076\uffbd\001\002\000\006\076\uffbc\135" +
    "\162\001\002\000\004\076\uffc1\001\002\000\006\076\uffbb" +
    "\135\162\001\002\000\004\076\uffc0\001\002\000\004\137" +
    "\230\001\002\000\006\060\231\061\232\001\002\000\004" +
    "\137\234\001\002\000\004\137\233\001\002\000\004\136" +
    "\uffb3\001\002\000\004\136\uffb2\001\002\000\004\155\237" +
    "\001\002\000\016\074\uffc2\152\uffc2\154\uffc2\156\uffc2\160" +
    "\uffc2\162\uffc2\001\002\000\016\074\uffc3\152\uffc3\154\uffc3" +
    "\156\uffc3\160\uffc3\162\uffc3\001\002\000\006\026\241\155" +
    "\242\001\002\000\004\155\243\001\002\000\016\074\uffc4" +
    "\152\uffc4\154\uffc4\156\uffc4\160\uffc4\162\uffc4\001\002\000" +
    "\016\074\uffc5\152\uffc5\154\uffc5\156\uffc5\160\uffc5\162\uffc5" +
    "\001\002\000\016\074\uffe2\152\uffe2\154\uffe2\156\uffe2\160" +
    "\uffe2\162\uffe2\001\002\000\016\074\uffde\152\uffde\154\uffde" +
    "\156\uffde\160\uffde\162\uffde\001\002\000\016\074\uffdc\152" +
    "\uffdc\154\uffdc\156\uffdc\160\uffdc\162\uffdc\001\002\000\016" +
    "\074\uffe6\152\uffe6\154\uffe6\156\uffe6\160\uffe6\162\uffe6\001" +
    "\002\000\016\074\uffe0\152\uffe0\154\uffe0\156\uffe0\160\uffe0" +
    "\162\uffe0\001\002\000\006\020\254\145\253\001\002\000" +
    "\016\074\uffe4\152\uffe4\154\uffe4\156\uffe4\160\uffe4\162\uffe4" +
    "\001\002\000\004\010\256\001\002\000\004\076\255\001" +
    "\002\000\016\074\uffc6\152\uffc6\154\uffc6\156\uffc6\160\uffc6" +
    "\162\uffc6\001\002\000\004\076\257\001\002\000\004\074" +
    "\uffe9\001\002\000\004\076\340\001\002\000\006\026\335" +
    "\157\336\001\002\000\014\022\263\025\274\032\271\041" +
    "\273\147\267\001\002\000\004\072\327\001\002\000\004" +
    "\136\325\001\002\000\004\136\323\001\002\000\004\136" +
    "\321\001\002\000\004\072\315\001\002\000\004\136\313" +
    "\001\002\000\004\072\307\001\002\000\004\136\305\001" +
    "\002\000\004\072\301\001\002\000\004\072\275\001\002" +
    "\000\004\137\276\001\002\000\004\151\277\001\002\000" +
    "\004\137\300\001\002\000\004\136\uffa3\001\002\000\004" +
    "\137\302\001\002\000\004\027\303\001\002\000\004\137" +
    "\304\001\002\000\004\136\uffa0\001\002\000\006\076\uffa6" +
    "\135\262\001\002\000\004\076\uffab\001\002\000\004\137" +
    "\310\001\002\000\004\150\311\001\002\000\004\137\312" +
    "\001\002\000\004\136\uffa1\001\002\000\006\076\uffa7\135" +
    "\262\001\002\000\004\076\uffac\001\002\000\004\137\316" +
    "\001\002\000\004\031\317\001\002\000\004\137\320\001" +
    "\002\000\004\136\uffa2\001\002\000\006\076\uffa5\135\262" +
    "\001\002\000\004\076\uffaa\001\002\000\006\076\uffa4\135" +
    "\262\001\002\000\004\076\uffa9\001\002\000\006\076\uffa8" +
    "\135\262\001\002\000\004\076\uffad\001\002\000\004\137" +
    "\330\001\002\000\006\060\331\061\332\001\002\000\004" +
    "\137\334\001\002\000\004\137\333\001\002\000\004\136" +
    "\uff9f\001\002\000\004\136\uff9e\001\002\000\004\157\337" +
    "\001\002\000\016\074\uffae\152\uffae\154\uffae\156\uffae\160" +
    "\uffae\162\uffae\001\002\000\016\074\uffaf\152\uffaf\154\uffaf" +
    "\156\uffaf\160\uffaf\162\uffaf\001\002\000\006\026\341\157" +
    "\342\001\002\000\004\157\343\001\002\000\016\074\uffb0" +
    "\152\uffb0\154\uffb0\156\uffb0\160\uffb0\162\uffb0\001\002\000" +
    "\016\074\uffb1\152\uffb1\154\uffb1\156\uffb1\160\uffb1\162\uffb1" +
    "\001\002\000\006\026\u0115\153\u0116\001\002\000\014\022" +
    "\353\025\364\032\361\041\363\147\360\001\002\000\004" +
    "\076\347\001\002\000\006\026\350\153\351\001\002\000" +
    "\004\153\352\001\002\000\016\074\uffd9\152\uffd9\154\uffd9" +
    "\156\uffd9\160\uffd9\162\uffd9\001\002\000\016\074\uffda\152" +
    "\uffda\154\uffda\156\uffda\160\uffda\162\uffda\001\002\000\004" +
    "\072\u010f\001\002\000\004\136\u010d\001\002\000\004\136" +
    "\u010b\001\002\000\004\136\u0109\001\002\000\004\136\u0107" +
    "\001\002\000\004\072\u0103\001\002\000\004\072\377\001" +
    "\002\000\004\136\375\001\002\000\004\072\371\001\002" +
    "\000\004\072\365\001\002\000\004\137\366\001\002\000" +
    "\004\151\367\001\002\000\004\137\370\001\002\000\004" +
    "\136\uffcc\001\002\000\004\137\372\001\002\000\004\027" +
    "\373\001\002\000\004\137\374\001\002\000\004\136\uffc9" +
    "\001\002\000\006\076\uffcf\135\345\001\002\000\004\076" +
    "\uffd4\001\002\000\004\137\u0100\001\002\000\004\150\u0101" +
    "\001\002\000\004\137\u0102\001\002\000\004\136\uffca\001" +
    "\002\000\004\137\u0104\001\002\000\004\031\u0105\001\002" +
    "\000\004\137\u0106\001\002\000\004\136\uffcb\001\002\000" +
    "\006\076\uffd0\135\345\001\002\000\004\076\uffd5\001\002" +
    "\000\006\076\uffce\135\345\001\002\000\004\076\uffd3\001" +
    "\002\000\006\076\uffcd\135\345\001\002\000\004\076\uffd2" +
    "\001\002\000\006\076\uffd1\135\345\001\002\000\004\076" +
    "\uffd6\001\002\000\004\137\u0110\001\002\000\006\060\u0111" +
    "\061\u0112\001\002\000\004\137\u0114\001\002\000\004\137" +
    "\u0113\001\002\000\004\136\uffc8\001\002\000\004\136\uffc7" +
    "\001\002\000\004\153\u0117\001\002\000\016\074\uffd7\152" +
    "\uffd7\154\uffd7\156\uffd7\160\uffd7\162\uffd7\001\002\000\016" +
    "\074\uffd8\152\uffd8\154\uffd8\156\uffd8\160\uffd8\162\uffd8\001" +
    "\002\000\004\076\u0150\001\002\000\006\026\u014d\161\u014e" +
    "\001\002\000\016\022\u011b\025\u0126\032\u0122\037\u0124\041" +
    "\u0125\147\u0120\001\002\000\004\072\u0147\001\002\000\004" +
    "\136\u0145\001\002\000\004\136\u0143\001\002\000\004\136" +
    "\u0141\001\002\000\004\136\u013f\001\002\000\004\072\u013b" +
    "\001\002\000\004\136\u0139\001\002\000\004\072\u0135\001" +
    "\002\000\004\136\u0133\001\002\000\004\072\u012f\001\002" +
    "\000\004\072\u012b\001\002\000\004\072\u0127\001\002\000" +
    "\004\137\u0128\001\002\000\004\151\u0129\001\002\000\004" +
    "\137\u012a\001\002\000\004\136\uff8d\001\002\000\004\137" +
    "\u012c\001\002\000\004\027\u012d\001\002\000\004\137\u012e" +
    "\001\002\000\004\136\uff8a\001\002\000\004\137\u0130\001" +
    "\002\000\004\040\u0131\001\002\000\004\137\u0132\001\002" +
    "\000\004\136\uff87\001\002\000\006\076\uff91\135\u011a\001" +
    "\002\000\004\076\uff97\001\002\000\004\137\u0136\001\002" +
    "\000\004\150\u0137\001\002\000\004\137\u0138\001\002\000" +
    "\004\136\uff8b\001\002\000\006\076\uff8e\135\u011a\001\002" +
    "\000\004\076\uff94\001\002\000\004\137\u013c\001\002\000" +
    "\004\031\u013d\001\002\000\004\137\u013e\001\002\000\004" +
    "\136\uff8c\001\002\000\006\076\uff8f\135\u011a\001\002\000" +
    "\004\076\uff95\001\002\000\006\076\uff90\135\u011a\001\002" +
    "\000\004\076\uff96\001\002\000\006\076\uff93\135\u011a\001" +
    "\002\000\004\076\uff99\001\002\000\006\076\uff92\135\u011a" +
    "\001\002\000\004\076\uff98\001\002\000\004\137\u0148\001" +
    "\002\000\006\060\u0149\061\u014a\001\002\000\004\137\u014c" +
    "\001\002\000\004\137\u014b\001\002\000\004\136\uff89\001" +
    "\002\000\004\136\uff88\001\002\000\004\161\u014f\001\002" +
    "\000\016\074\uff9a\152\uff9a\154\uff9a\156\uff9a\160\uff9a\162" +
    "\uff9a\001\002\000\016\074\uff9b\152\uff9b\154\uff9b\156\uff9b" +
    "\160\uff9b\162\uff9b\001\002\000\006\026\u0151\161\u0152\001" +
    "\002\000\004\161\u0153\001\002\000\016\074\uff9c\152\uff9c" +
    "\154\uff9c\156\uff9c\160\uff9c\162\uff9c\001\002\000\016\074" +
    "\uff9d\152\uff9d\154\uff9d\156\uff9d\160\uff9d\162\uff9d\001\002" +
    "\000\004\137\u0155\001\002\000\006\060\u0156\061\u0157\001" +
    "\002\000\004\137\u0159\001\002\000\004\137\u0158\001\002" +
    "\000\004\136\uffe7\001\002\000\004\136\uffe8\001\002\000" +
    "\004\076\u015b\001\002\000\016\074\057\152\060\154\063" +
    "\156\061\160\056\162\065\001\002\000\016\074\u015d\152" +
    "\060\154\063\156\061\160\056\162\065\001\002\000\006" +
    "\020\254\145\u015e\001\002\000\004\010\u015f\001\002\000" +
    "\004\076\u0160\001\002\000\004\074\uffea\001\002\000\004" +
    "\145\u0162\001\002\000\004\004\u0163\001\002\000\004\076" +
    "\u0164\001\002\000\004\002\ufffe\001\002\000\004\076\u0166" +
    "\001\002\000\006\074\u0169\140\u016c\001\002\000\004\074" +
    "\u018f\001\002\000\004\074\u0189\001\002\000\006\007\u0173" +
    "\145\u0172\001\002\000\004\074\ufff2\001\002\000\006\074" +
    "\ufff1\140\u016c\001\002\000\006\026\u016d\141\u016e\001\002" +
    "\000\004\141\u016f\001\002\000\004\074\uffec\001\002\000" +
    "\004\074\uffed\001\002\000\004\074\ufff0\001\002\000\004" +
    "\074\ufff4\001\002\000\004\005\u0187\001\002\000\004\135" +
    "\u0174\001\002\000\006\023\u0176\136\u0177\001\002\000\004" +
    "\136\u0181\001\002\000\004\072\u017d\001\002\000\004\076" +
    "\u0178\001\002\000\004\074\u0179\001\002\000\004\145\u017a" +
    "\001\002\000\004\007\u017b\001\002\000\004\076\u017c\001" +
    "\002\000\006\074\uffee\140\uffee\001\002\000\004\137\u017e" +
    "\001\002\000\004\026\u017f\001\002\000\004\137\u0180\001" +
    "\002\000\004\136\uffeb\001\002\000\004\076\u0182\001\002" +
    "\000\004\074\u0183\001\002\000\004\145\u0184\001\002\000" +
    "\004\007\u0185\001\002\000\004\076\u0186\001\002\000\006" +
    "\074\uffef\140\uffef\001\002\000\004\076\u0188\001\002\000" +
    "\004\074\ufff5\001\002\000\006\007\u0173\145\u018c\001\002" +
    "\000\004\074\ufff3\001\002\000\004\074\ufff1\001\002\000" +
    "\004\005\u018d\001\002\000\004\076\u018e\001\002\000\004" +
    "\074\ufff6\001\002\000\004\145\u0190\001\002\000\004\005" +
    "\u0191\001\002\000\004\076\u0192\001\002\000\004\074\ufff7" +
    "\001\002\000\004\074\037\001\002\000\004\074\042\001" +
    "\002\000\004\074\u0196\001\002\000\004\145\u0197\001\002" +
    "\000\004\004\u0198\001\002\000\004\076\u0199\001\002\000" +
    "\004\002\uffff\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0198\000\006\002\005\070\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\007" +
    "\001\001\000\002\001\001\000\004\011\037\001\001\000" +
    "\006\015\015\016\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\020\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\030" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\021\061\022\063\024\054\033\050\042\052" +
    "\051\053\062\051\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\061\u0117\001\001\000\002\001\001\000\004\023" +
    "\345\001\001\000\004\041\257\001\001\000\016\022\251" +
    "\024\246\033\243\042\247\051\245\062\244\001\001\000" +
    "\004\032\157\001\001\000\002\001\001\000\004\050\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\052" +
    "\070\053\076\054\074\055\072\056\103\057\075\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\050\105" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\050\127\001\001\000\002" +
    "\001\001\000\004\050\131\001\001\000\002\001\001\000" +
    "\004\050\133\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\050\141\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\050\147\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\034\164\035\163\036" +
    "\167\037\166\040\165\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\032\215\001\001" +
    "\000\002\001\001\000\004\032\217\001\001\000\002\001" +
    "\001\000\004\032\221\001\001\000\002\001\001\000\004" +
    "\032\223\001\001\000\002\001\001\000\004\032\225\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\043\263" +
    "\044\267\045\271\046\265\047\264\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\041\305\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\041\313\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\041\321\001\001\000\002\001" +
    "\001\000\004\041\323\001\001\000\002\001\001\000\004" +
    "\041\325\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\025\353\026\356\027\361\030\355\031\354\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\375\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\u0107\001\001\000\002\001" +
    "\001\000\004\023\u0109\001\001\000\002\001\001\000\004" +
    "\023\u010b\001\001\000\002\001\001\000\004\023\u010d\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\060" +
    "\u0120\063\u011c\064\u011b\065\u0122\066\u011d\067\u011e\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\061\u0133\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\061\u0139\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\061\u013f\001\001\000\002" +
    "\001\001\000\004\061\u0141\001\001\000\002\001\001\000" +
    "\004\061\u0143\001\001\000\002\001\001\000\004\061\u0145" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\021\u015b\022" +
    "\063\024\054\033\050\042\052\051\053\062\051\001\001" +
    "\000\016\022\251\024\246\033\243\042\247\051\245\062" +
    "\244\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\004\u0166\005\u0169\010\u0167\012\u016a\001\001\000" +
    "\002\001\001\000\006\005\u0189\012\u018a\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\006\u0170\010\u016f\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\u0174\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\u0193\001\001\000\004\017\u0194" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	//constructor
	private Symbol sym;
	public parser( LexerCup lex){
	 super(lex);
	}
	public void report_error(String message, Object info){
		System.out.println("\nREPORT ERROR");
	}
	public void report_fatal_error(String message, Object info){
		System.out.println("\nREPORT FATAL");
	}
	public void syntax_error(Symbol curl_token){
		System.out.println("\nSE ESPERABA: "+symbl_name_from_id(expected_token_ids().get(0)));
        System.out.println("syntaxerr: " + symbl_name_from_id(cur_token.sym) +" Columna: "+cur_token.right+" Linea: "+cur_token.left+" Valor:"+cur_token.value);
	}
	public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        	System.out.println("Error síntactico  " +  (s.left)+ " columna "+(s.right)+". palabra " + s.value ); 
    	}
		protected int error_sync_size() {
        return 1;
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= estado_inicial EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // estado_inicial ::= etiqueta_gcic 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estado_inicial",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // etiqueta_gcic ::= MENOR_QUE C_GCIC parametro_c_gcic MAYOR_QUE head body MENOR_QUE DIVISION C_GCIC MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiqueta_gcic",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // etiqueta_gcic ::= MENOR_QUE C_GCIC MAYOR_QUE head body MENOR_QUE DIVISION C_GCIC MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiqueta_gcic",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // parametro_c_gcic ::= CORCHETE_ABRE id CORCHETE_CIERRA CORCHETE_ABRE name CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_c_gcic",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // parametro_c_gcic ::= CORCHETE_ABRE name CORCHETE_CIERRA CORCHETE_ABRE id CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_c_gcic",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // parametro_c_gcic ::= CORCHETE_ABRE name CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_c_gcic",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // parametro_c_gcic ::= CORCHETE_ABRE id CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_c_gcic",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // id ::= ID IGUAL COMILLA TEXTO_ID COMILLA 
            {
              Object RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ts = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" ID "+ts.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // name ::= NAME IGUAL COMILLA TEXTO COMILLA 
            {
              Object RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object es = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" NAME "+es.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("name",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // head ::= MENOR_QUE C_HEAD MAYOR_QUE parametros_head MENOR_QUE DIVISION C_HEAD MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("head",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // head ::= MENOR_QUE C_HEAD MAYOR_QUE titulo MENOR_QUE DIVISION C_HEAD MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("head",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // head ::= MENOR_QUE C_HEAD MAYOR_QUE MENOR_QUE DIVISION C_HEAD MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("head",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // parametros_head ::= link parametros_head2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_head",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // parametros_head ::= titulo parametros_head1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_head",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // parametros_head ::= parametros_head1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_head",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // parametros_head1 ::= link 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_head1",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // parametros_head2 ::= titulo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_head2",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // link ::= MENOR_QUE C_LINK CORCHETE_ABRE href CORCHETE_CIERRA MAYOR_QUE MENOR_QUE DIVISION C_LINK MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("link",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // link ::= MENOR_QUE C_LINK CORCHETE_ABRE CORCHETE_CIERRA MAYOR_QUE MENOR_QUE DIVISION C_LINK MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("link",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // titulo ::= TI TEXTO TD 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.out.println(" Titulo: "+a.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("titulo",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // titulo ::= TI TD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("titulo",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // href ::= HREF IGUAL COMILLA TEXTO COMILLA 
            {
              Object RESULT =null;
		int linkkleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int linkkright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object linkk = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.out.println(" LINK "+linkk.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("href",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // body ::= MENOR_QUE C_BODY CORCHETE_ABRE background CORCHETE_CIERRA MAYOR_QUE parametros_body MENOR_QUE DIVISION C_BODY MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("body",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // body ::= MENOR_QUE C_BODY CORCHETE_ABRE CORCHETE_CIERRA MAYOR_QUE parametros_body MENOR_QUE DIVISION C_BODY MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("body",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // background ::= BACKGROUND IGUAL COMILLA RGB_COLOR COMILLA 
            {
              Object RESULT =null;
		int backleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int backright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object back = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" BACKGROUND RGB "+back.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("background",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // background ::= BACKGROUND IGUAL COMILLA CTE_COLOR COMILLA 
            {
              Object RESULT =null;
		int baleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int baright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ba = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" BACKGROUND constante de color: "+ba.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("background",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // parametros_body ::= parametros_body etiquetas_h1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_body",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // parametros_body ::= etiquetas_h1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_body",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // parametros_body ::= parametros_body br 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_body",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // parametros_body ::= br 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_body",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // parametros_body ::= parametros_body etiquetas_spam 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_body",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // parametros_body ::= etiquetas_spam 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_body",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // parametros_body ::= parametros_body etiquetas_cp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_body",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // parametros_body ::= etiquetas_cp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_body",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // parametros_body ::= parametros_body etiquetas_input 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_body",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // parametros_body ::= etiquetas_input 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_body",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // parametros_body ::= parametros_body etiquetas_area 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_body",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // parametros_body ::= etiquetas_area 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_body",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // etiquetas_h1 ::= ABRE_C_H1 parametros_h1 MAYOR_QUE TEXTO CIERRA_C_H1 
            {
              Object RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object txt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" TEXTO EN H1:  "+txt.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_h1",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // etiquetas_h1 ::= ABRE_C_H1 parametros_h1 MAYOR_QUE CIERRA_C_H1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_h1",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // etiquetas_h1 ::= ABRE_C_H1 MAYOR_QUE TEXTO CIERRA_C_H1 
            {
              Object RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object txt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" TEXTO EN H1:  "+txt.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_h1",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // etiquetas_h1 ::= ABRE_C_H1 MAYOR_QUE CIERRA_C_H1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_h1",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // parametros_h1 ::= CORCHETE_ABRE id_h1 CORCHETE_CIERRA parametros_h1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_h1",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // parametros_h1 ::= CORCHETE_ABRE color_h1 CORCHETE_CIERRA parametros_h1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_h1",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // parametros_h1 ::= CORCHETE_ABRE font_size_h1 CORCHETE_CIERRA parametros_h1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_h1",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // parametros_h1 ::= CORCHETE_ABRE font_family_h1 CORCHETE_CIERRA parametros_h1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_h1",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // parametros_h1 ::= CORCHETE_ABRE text_align_h1 CORCHETE_CIERRA parametros_h1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_h1",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // parametros_h1 ::= CORCHETE_ABRE id_h1 CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_h1",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // parametros_h1 ::= CORCHETE_ABRE color_h1 CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_h1",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // parametros_h1 ::= CORCHETE_ABRE font_size_h1 CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_h1",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // parametros_h1 ::= CORCHETE_ABRE font_family_h1 CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_h1",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // parametros_h1 ::= CORCHETE_ABRE text_align_h1 CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_h1",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // font_size_h1 ::= FONT_SIZE IGUAL COMILLA SIZE COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" FONT SIZE H1 "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("font_size_h1",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // font_family_h1 ::= FONT_FAMILY IGUAL COMILLA TIPOS_LETRA COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" FONT FAMILY H1 "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("font_family_h1",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // text_align_h1 ::= TEXT_ALIGN IGUAL COMILLA ALINEACION COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" TEXT ALIGN H1 "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("text_align_h1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // id_h1 ::= ID IGUAL COMILLA TEXTO_ID COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" ID H1 "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id_h1",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // color_h1 ::= COLOR IGUAL COMILLA CTE_COLOR COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" CTE Color H1 "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("color_h1",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // color_h1 ::= COLOR IGUAL COMILLA RGB_COLOR COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" RGB H1 "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("color_h1",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // br ::= MENOR_QUE C_BR MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("br",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // etiquetas_spam ::= ABRE_C_SPAM parametros_spam MAYOR_QUE TEXTO CIERRA_C_SPAM 
            {
              Object RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object txt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" TEXTO EN SPAM:  "+txt.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_spam",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // etiquetas_spam ::= ABRE_C_SPAM parametros_spam MAYOR_QUE CIERRA_C_SPAM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_spam",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // etiquetas_spam ::= ABRE_C_SPAM MAYOR_QUE TEXTO CIERRA_C_SPAM 
            {
              Object RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object txt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" TEXTO EN SPAM:  "+txt.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_spam",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // etiquetas_spam ::= ABRE_C_SPAM MAYOR_QUE CIERRA_C_SPAM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_spam",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // parametros_spam ::= CORCHETE_ABRE id_spam CORCHETE_CIERRA parametros_spam 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_spam",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // parametros_spam ::= CORCHETE_ABRE color_spam CORCHETE_CIERRA parametros_spam 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_spam",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // parametros_spam ::= CORCHETE_ABRE font_size_spam CORCHETE_CIERRA parametros_spam 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_spam",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // parametros_spam ::= CORCHETE_ABRE font_family_spam CORCHETE_CIERRA parametros_spam 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_spam",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // parametros_spam ::= CORCHETE_ABRE text_align_spam CORCHETE_CIERRA parametros_spam 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_spam",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // parametros_spam ::= CORCHETE_ABRE id_spam CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_spam",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // parametros_spam ::= CORCHETE_ABRE color_spam CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_spam",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // parametros_spam ::= CORCHETE_ABRE font_size_spam CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_spam",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // parametros_spam ::= CORCHETE_ABRE font_family_spam CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_spam",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // parametros_spam ::= CORCHETE_ABRE text_align_spam CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_spam",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // font_size_spam ::= FONT_SIZE IGUAL COMILLA SIZE COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" FONT SIZE SPAM "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("font_size_spam",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // font_family_spam ::= FONT_FAMILY IGUAL COMILLA TIPOS_LETRA COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" FONT FAMILY SPAM "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("font_family_spam",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // text_align_spam ::= TEXT_ALIGN IGUAL COMILLA ALINEACION COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" TEXT ALIGN SPAM "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("text_align_spam",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // id_spam ::= ID IGUAL COMILLA TEXTO_ID COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" ID SPAM "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id_spam",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // color_spam ::= COLOR IGUAL COMILLA CTE_COLOR COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" CTE Color SPAM "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("color_spam",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // color_spam ::= COLOR IGUAL COMILLA RGB_COLOR COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" RGB SPAM "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("color_spam",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // etiquetas_cp ::= ABRE_C_P parametros_cp MAYOR_QUE TEXTO CIERRA_C_P 
            {
              Object RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object txt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" TEXTO EN CP:  "+txt.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_cp",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // etiquetas_cp ::= ABRE_C_P parametros_cp MAYOR_QUE CIERRA_C_P 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_cp",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // etiquetas_cp ::= ABRE_C_P MAYOR_QUE TEXTO CIERRA_C_P 
            {
              Object RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object txt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" TEXTO EN CP:  "+txt.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_cp",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // etiquetas_cp ::= ABRE_C_P MAYOR_QUE CIERRA_C_P 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_cp",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // parametros_cp ::= CORCHETE_ABRE id_cp CORCHETE_CIERRA parametros_cp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_cp",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // parametros_cp ::= CORCHETE_ABRE color_cp CORCHETE_CIERRA parametros_cp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_cp",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // parametros_cp ::= CORCHETE_ABRE font_size_cp CORCHETE_CIERRA parametros_cp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_cp",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // parametros_cp ::= CORCHETE_ABRE font_family_cp CORCHETE_CIERRA parametros_cp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_cp",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // parametros_cp ::= CORCHETE_ABRE text_align_cp CORCHETE_CIERRA parametros_cp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_cp",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // parametros_cp ::= CORCHETE_ABRE id_cp CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_cp",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // parametros_cp ::= CORCHETE_ABRE color_cp CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_cp",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // parametros_cp ::= CORCHETE_ABRE font_size_cp CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_cp",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // parametros_cp ::= CORCHETE_ABRE font_family_cp CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_cp",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // parametros_cp ::= CORCHETE_ABRE text_align_cp CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_cp",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // font_size_cp ::= FONT_SIZE IGUAL COMILLA SIZE COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" FONT SIZE CP "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("font_size_cp",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // font_family_cp ::= FONT_FAMILY IGUAL COMILLA TIPOS_LETRA COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" FONT FAMILY CP "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("font_family_cp",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // text_align_cp ::= TEXT_ALIGN IGUAL COMILLA ALINEACION COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" TEXT ALIGN CP "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("text_align_cp",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // id_cp ::= ID IGUAL COMILLA TEXTO_ID COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" ID CP "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id_cp",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // color_cp ::= COLOR IGUAL COMILLA CTE_COLOR COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" CTE Color CP "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("color_cp",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // color_cp ::= COLOR IGUAL COMILLA RGB_COLOR COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" RGB CP "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("color_cp",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // etiquetas_input ::= ABRE_INPUT parametros_input MAYOR_QUE TEXTO CIERRA_INPUT 
            {
              Object RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object txt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" TEXTO EN INPUT:  "+txt.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_input",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // etiquetas_input ::= ABRE_INPUT parametros_input MAYOR_QUE CIERRA_INPUT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_input",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // etiquetas_input ::= ABRE_INPUT MAYOR_QUE TEXTO CIERRA_INPUT 
            {
              Object RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object txt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" TEXTO EN INPUT:  "+txt.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_input",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // etiquetas_input ::= ABRE_INPUT MAYOR_QUE CIERRA_INPUT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_input",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // parametros_input ::= CORCHETE_ABRE id_input CORCHETE_CIERRA parametros_input 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_input",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // parametros_input ::= CORCHETE_ABRE color_input CORCHETE_CIERRA parametros_input 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_input",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // parametros_input ::= CORCHETE_ABRE font_size_input CORCHETE_CIERRA parametros_input 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_input",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // parametros_input ::= CORCHETE_ABRE font_family_input CORCHETE_CIERRA parametros_input 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_input",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // parametros_input ::= CORCHETE_ABRE text_align_input CORCHETE_CIERRA parametros_input 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_input",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // parametros_input ::= CORCHETE_ABRE tipos_input CORCHETE_CIERRA parametros_input 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_input",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // parametros_input ::= CORCHETE_ABRE id_input CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_input",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // parametros_input ::= CORCHETE_ABRE color_input CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_input",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // parametros_input ::= CORCHETE_ABRE font_size_input CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_input",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // parametros_input ::= CORCHETE_ABRE font_family_input CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_input",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // parametros_input ::= CORCHETE_ABRE text_align_input CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_input",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // parametros_input ::= CORCHETE_ABRE tipos_input CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_input",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // font_size_input ::= FONT_SIZE IGUAL COMILLA SIZE COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" FONT SIZE INPUT "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("font_size_input",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // font_family_input ::= FONT_FAMILY IGUAL COMILLA TIPOS_LETRA COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" FONT FAMILY INPUT "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("font_family_input",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // text_align_input ::= TEXT_ALIGN IGUAL COMILLA ALINEACION COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" TEXT ALIGN INPUT "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("text_align_input",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // id_input ::= ID IGUAL COMILLA TEXTO_ID COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" ID INPUT "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id_input",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // color_input ::= COLOR IGUAL COMILLA CTE_COLOR COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" CTE Color INPUT "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("color_input",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // color_input ::= COLOR IGUAL COMILLA RGB_COLOR COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" RGB INPUT "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("color_input",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // tipos_input ::= TYPE IGUAL COMILLA TIPOS_DE_INPUT COMILLA 
            {
              Object RESULT =null;
		int inputleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int inputright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object input = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" TIPOS DE INPUT "+input.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_input",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // etiquetas_area ::= ABRE_TEXT_AREA parametros_area MAYOR_QUE TEXTO CIERRA_TEXT_AREA 
            {
              Object RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object txt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" TEXTO EN TEXT AREA:  "+txt.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_area",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // etiquetas_area ::= ABRE_TEXT_AREA parametros_area MAYOR_QUE CIERRA_TEXT_AREA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_area",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // etiquetas_area ::= ABRE_TEXT_AREA MAYOR_QUE TEXTO CIERRA_TEXT_AREA 
            {
              Object RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object txt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" TEXTO EN TEXT AREA:  "+txt.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_area",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // etiquetas_area ::= ABRE_TEXT_AREA MAYOR_QUE CIERRA_TEXT_AREA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_area",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // parametros_area ::= CORCHETE_ABRE id_area CORCHETE_CIERRA parametros_area 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_area",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // parametros_area ::= CORCHETE_ABRE font_size_area CORCHETE_CIERRA parametros_area 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_area",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // parametros_area ::= CORCHETE_ABRE font_family_area CORCHETE_CIERRA parametros_area 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_area",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // parametros_area ::= CORCHETE_ABRE text_align_area CORCHETE_CIERRA parametros_area 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_area",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // parametros_area ::= CORCHETE_ABRE cols_area CORCHETE_CIERRA parametros_area 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_area",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // parametros_area ::= CORCHETE_ABRE rows_area CORCHETE_CIERRA parametros_area 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_area",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // parametros_area ::= CORCHETE_ABRE id_area CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_area",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // parametros_area ::= CORCHETE_ABRE font_size_area CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_area",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // parametros_area ::= CORCHETE_ABRE font_family_area CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_area",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // parametros_area ::= CORCHETE_ABRE text_align_area CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_area",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // parametros_area ::= CORCHETE_ABRE cols_area CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_area",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // parametros_area ::= CORCHETE_ABRE rows_area CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_area",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // font_size_area ::= FONT_SIZE IGUAL COMILLA SIZE COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" FONT SIZE TEXT  AREA: "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("font_size_area",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // font_family_area ::= FONT_FAMILY IGUAL COMILLA TIPOS_LETRA COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" FONT FAMILY TEXT AREA: "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("font_family_area",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // text_align_area ::= TEXT_ALIGN IGUAL COMILLA ALINEACION COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" TEXT ALIGN TEXT AREA: "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("text_align_area",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // id_area ::= ID IGUAL COMILLA TEXTO_ID COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" ID TEXT AREA: "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id_area",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // cols_area ::= COLS IGUAL COMILLA NUMERO COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" NUMERO COLS TEXT AREA "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cols_area",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // rows_area ::= ROWS IGUAL COMILLA NUMERO COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" NUMERO ROWS TEXT AREA "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rows_area",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // sentencias ::= sentencias_control sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // sentencias ::= sentencias_control 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // sentencias_control ::= if bloque_INIT_END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_control",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // sentencias_control ::= if bloque_INIT_END pametro_els 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_control",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // sentencias_control ::= if bloque_INIT_END pametros_elseif pametro_els 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_control",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // if ::= IF PARENTESIS_ABRE PARENTESIS_CIERRA THEN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // pametro_els ::= ELSE bloque_INIT_END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pametro_els",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // pametros_elseif ::= ELSE IF PARENTESIS_ABRE PARENTESIS_CIERRA THEN bloque_INIT_END 
            {
              Object RESULT =null;
		System.out.println("aqui 1");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pametros_elseif",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // pametros_elseif ::= pametros_elseif ELSE IF PARENTESIS_ABRE PARENTESIS_CIERRA THEN bloque_INIT_END 
            {
              Object RESULT =null;
		System.out.println("aqui 2");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pametros_elseif",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // bloque_INIT_END ::= INIT ABRE_INIT CIERRA_INIT END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_INIT_END",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // instrucciones ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
