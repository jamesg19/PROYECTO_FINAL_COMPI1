
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadoress;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;
import java.util.ArrayList;
import HTML.*;
import Script.*;
import Variables.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u01b3\000\002\002\004\000\002\142\003\000\002\002" +
    "\014\000\002\002\013\000\002\003\010\000\002\003\010" +
    "\000\002\003\005\000\002\003\005\000\002\003\003\000" +
    "\002\003\004\000\002\013\007\000\002\014\007\000\002" +
    "\010\012\000\002\010\012\000\002\010\011\000\002\010" +
    "\003\000\002\004\004\000\002\004\004\000\002\004\003" +
    "\000\002\005\003\000\002\006\003\000\002\011\014\000" +
    "\002\011\013\000\002\011\003\000\002\007\005\000\002" +
    "\007\004\000\002\012\007\000\002\015\015\000\002\015" +
    "\014\000\002\016\007\000\002\016\007\000\002\017\004" +
    "\000\002\017\003\000\002\017\004\000\002\017\003\000" +
    "\002\017\004\000\002\017\003\000\002\017\004\000\002" +
    "\017\003\000\002\017\004\000\002\017\003\000\002\017" +
    "\004\000\002\017\003\000\002\017\004\000\002\017\003" +
    "\000\002\017\004\000\002\017\003\000\002\017\004\000" +
    "\002\017\003\000\002\017\004\000\002\017\003\000\002" +
    "\017\004\000\002\017\003\000\002\022\007\000\002\022" +
    "\006\000\002\022\006\000\002\022\005\000\002\021\006" +
    "\000\002\021\006\000\002\021\006\000\002\021\006\000" +
    "\002\021\006\000\002\021\005\000\002\021\005\000\002" +
    "\021\005\000\002\021\005\000\002\021\005\000\002\025" +
    "\007\000\002\026\007\000\002\027\007\000\002\023\007" +
    "\000\002\024\007\000\002\024\007\000\002\020\005\000" +
    "\002\031\007\000\002\031\006\000\002\031\006\000\002" +
    "\031\005\000\002\030\006\000\002\030\006\000\002\030" +
    "\006\000\002\030\006\000\002\030\006\000\002\030\005" +
    "\000\002\030\005\000\002\030\005\000\002\030\005\000" +
    "\002\030\005\000\002\034\007\000\002\035\007\000\002" +
    "\036\007\000\002\032\007\000\002\033\007\000\002\033" +
    "\007\000\002\040\007\000\002\040\006\000\002\040\006" +
    "\000\002\040\005\000\002\037\006\000\002\037\006\000" +
    "\002\037\006\000\002\037\006\000\002\037\006\000\002" +
    "\037\005\000\002\037\005\000\002\037\005\000\002\037" +
    "\005\000\002\037\005\000\002\043\007\000\002\044\007" +
    "\000\002\045\007\000\002\041\007\000\002\042\007\000" +
    "\002\042\007\000\002\100\007\000\002\100\006\000\002" +
    "\100\006\000\002\100\005\000\002\077\006\000\002\077" +
    "\006\000\002\077\006\000\002\077\006\000\002\077\006" +
    "\000\002\077\006\000\002\077\005\000\002\077\005\000" +
    "\002\077\005\000\002\077\005\000\002\077\005\000\002" +
    "\077\005\000\002\103\007\000\002\104\007\000\002\105" +
    "\007\000\002\101\007\000\002\102\007\000\002\102\007" +
    "\000\002\076\007\000\002\047\007\000\002\047\006\000" +
    "\002\047\006\000\002\047\005\000\002\046\006\000\002" +
    "\046\006\000\002\046\006\000\002\046\006\000\002\046" +
    "\006\000\002\046\006\000\002\046\005\000\002\046\005" +
    "\000\002\046\005\000\002\046\005\000\002\046\005\000" +
    "\002\046\005\000\002\051\007\000\002\052\007\000\002" +
    "\053\007\000\002\050\007\000\002\055\007\000\002\054" +
    "\007\000\002\066\007\000\002\066\006\000\002\066\006" +
    "\000\002\066\005\000\002\065\006\000\002\065\006\000" +
    "\002\065\006\000\002\065\006\000\002\065\006\000\002" +
    "\065\006\000\002\065\006\000\002\065\005\000\002\065" +
    "\005\000\002\065\005\000\002\065\005\000\002\065\005" +
    "\000\002\065\005\000\002\065\005\000\002\070\007\000" +
    "\002\071\007\000\002\072\007\000\002\067\007\000\002" +
    "\073\007\000\002\073\007\000\002\074\007\000\002\074" +
    "\007\000\002\075\007\000\002\057\007\000\002\057\006" +
    "\000\002\057\006\000\002\057\005\000\002\056\006\000" +
    "\002\056\006\000\002\056\006\000\002\056\006\000\002" +
    "\056\006\000\002\056\005\000\002\056\005\000\002\056" +
    "\005\000\002\056\005\000\002\056\005\000\002\061\007" +
    "\000\002\062\007\000\002\063\007\000\002\060\007\000" +
    "\002\064\007\000\002\107\007\000\002\107\006\000\002" +
    "\107\005\000\002\106\006\000\002\106\006\000\002\106" +
    "\006\000\002\106\006\000\002\106\006\000\002\106\005" +
    "\000\002\106\005\000\002\106\005\000\002\106\005\000" +
    "\002\106\005\000\002\112\007\000\002\113\007\000\002" +
    "\114\007\000\002\110\007\000\002\111\007\000\002\111" +
    "\007\000\002\115\006\000\002\115\005\000\002\117\007" +
    "\000\002\117\006\000\002\117\006\000\002\117\005\000" +
    "\002\127\003\000\002\131\003\000\002\130\003\000\002" +
    "\116\006\000\002\116\006\000\002\116\006\000\002\116" +
    "\006\000\002\116\006\000\002\116\006\000\002\116\006" +
    "\000\002\116\005\000\002\116\005\000\002\116\005\000" +
    "\002\116\005\000\002\116\005\000\002\116\005\000\002" +
    "\116\005\000\002\123\007\000\002\124\007\000\002\125" +
    "\007\000\002\120\007\000\002\122\007\000\002\122\007" +
    "\000\002\121\007\000\002\121\007\000\002\126\007\000" +
    "\002\132\006\000\002\132\006\000\002\133\003\000\002" +
    "\134\003\000\002\136\004\000\002\136\003\000\002\135" +
    "\004\000\002\135\003\000\002\137\006\000\002\137\005" +
    "\000\002\141\010\000\002\141\007\000\002\140\003\000" +
    "\002\162\004\000\002\162\003\000\002\162\004\000\002" +
    "\162\003\000\002\162\004\000\002\162\003\000\002\162" +
    "\004\000\002\162\003\000\002\162\004\000\002\162\003" +
    "\000\002\162\004\000\002\162\003\000\002\162\004\000" +
    "\002\162\003\000\002\162\004\000\002\162\003\000\002" +
    "\162\004\000\002\162\003\000\002\162\004\000\002\162" +
    "\003\000\002\162\004\000\002\162\003\000\002\146\003" +
    "\000\002\146\003\000\002\146\003\000\002\146\003\000" +
    "\002\146\003\000\002\146\003\000\002\146\003\000\002" +
    "\167\006\000\002\167\006\000\002\170\005\000\002\170" +
    "\005\000\002\170\005\000\002\170\005\000\002\170\005" +
    "\000\002\170\004\000\002\170\005\000\002\170\003\000" +
    "\002\170\003\000\002\170\003\000\002\170\005\000\002" +
    "\170\005\000\002\170\003\000\002\172\010\000\002\163" +
    "\006\000\002\163\010\000\002\163\005\000\002\163\007" +
    "\000\002\164\005\000\002\164\003\000\002\165\005\000" +
    "\002\165\005\000\002\165\005\000\002\165\005\000\002" +
    "\165\004\000\002\165\005\000\002\165\003\000\002\165" +
    "\003\000\002\171\010\000\002\171\007\000\002\171\006" +
    "\000\002\171\010\000\002\171\005\000\002\171\007\000" +
    "\002\171\007\000\002\171\010\000\002\173\007\000\002" +
    "\173\005\000\002\173\005\000\002\173\003\000\002\175" +
    "\006\000\002\175\010\000\002\175\005\000\002\175\007" +
    "\000\002\176\007\000\002\176\005\000\002\176\005\000" +
    "\002\176\003\000\002\174\006\000\002\174\010\000\002" +
    "\174\005\000\002\174\007\000\002\166\005\000\002\166" +
    "\005\000\002\166\005\000\002\166\005\000\002\166\004" +
    "\000\002\166\005\000\002\166\003\000\002\166\003\000" +
    "\002\166\003\000\002\177\006\000\002\177\010\000\002" +
    "\177\005\000\002\177\007\000\002\200\005\000\002\200" +
    "\005\000\002\200\003\000\002\200\003\000\002\201\004" +
    "\000\002\201\004\000\002\201\003\000\002\147\004\000" +
    "\002\147\004\000\002\147\005\000\002\147\005\000\002" +
    "\147\006\000\002\147\006\000\002\152\011\000\002\152" +
    "\007\000\002\151\004\000\002\151\004\000\002\150\013" +
    "\000\002\150\011\000\002\150\013\000\002\150\011\000" +
    "\002\150\014\000\002\150\014\000\002\145\007\000\002" +
    "\145\006\000\002\153\011\000\002\153\011\000\002\154" +
    "\007\000\002\154\007\000\002\155\006\000\002\155\007" +
    "\000\002\155\007\000\002\156\007\000\002\156\005\000" +
    "\002\143\006\000\002\143\006\000\002\143\006\000\002" +
    "\143\006\000\002\143\006\000\002\143\005\000\002\143" +
    "\005\000\002\144\007\000\002\144\006\000\002\144\006" +
    "\000\002\157\005\000\002\157\005\000\002\157\005\000" +
    "\002\157\005\000\002\157\004\000\002\157\005\000\002" +
    "\157\003\000\002\157\003\000\002\157\003\000\002\161" +
    "\005\000\002\161\005\000\002\161\005\000\002\161\003" +
    "\000\002\161\003\000\002\161\003\000\002\161\005\000" +
    "\002\161\005\000\002\160\003\000\002\160\003\000\002" +
    "\160\003\000\002\160\003\000\002\160\003\000\002\160" +
    "\003\000\002\160\003\000\002\160\003\000\002\160\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u040d\000\004\075\005\001\002\000\004\002\u040f\001" +
    "\002\000\004\004\007\001\002\000\004\002\000\001\002" +
    "\000\010\003\012\077\011\137\013\001\002\000\004\077" +
    "\u0408\001\002\000\006\003\041\075\042\001\002\000\010" +
    "\003\012\077\ufff9\137\013\001\002\000\006\036\014\037" +
    "\016\001\002\000\004\073\034\001\002\000\004\140\030" +
    "\001\002\000\004\073\024\001\002\000\004\140\020\001" +
    "\002\000\006\077\ufffa\137\021\001\002\000\004\037\016" +
    "\001\002\000\004\140\023\001\002\000\004\077\ufffd\001" +
    "\002\000\004\141\025\001\002\000\004\030\026\001\002" +
    "\000\004\141\027\001\002\000\004\140\ufff6\001\002\000" +
    "\006\077\ufffb\137\031\001\002\000\004\036\014\001\002" +
    "\000\004\140\033\001\002\000\004\077\ufffc\001\002\000" +
    "\004\141\035\001\002\000\004\031\036\001\002\000\004" +
    "\141\037\001\002\000\004\140\ufff7\001\002\000\004\077" +
    "\ufff8\001\002\000\004\075\ufff2\001\002\000\004\005\u03d9" +
    "\001\002\000\004\075\045\001\002\000\004\075\u03d5\001" +
    "\002\000\004\010\046\001\002\000\004\137\047\001\002" +
    "\000\006\026\051\140\052\001\002\000\004\140\u03ce\001" +
    "\002\000\004\073\u03c8\001\002\000\004\077\053\001\002" +
    "\000\030\075\067\162\061\164\100\166\054\170\104\172" +
    "\072\174\075\176\064\200\066\204\055\206\071\001\002" +
    "\000\006\077\u0395\137\u0396\001\002\000\006\077\uff1b\137" +
    "\uff1b\001\002\000\006\077\u034c\137\u034e\001\002\000\030" +
    "\075\u0340\162\061\164\100\166\054\170\104\172\072\174" +
    "\075\176\064\200\066\204\055\206\071\001\002\000\032" +
    "\075\uffd9\162\uffd9\164\uffd9\166\uffd9\170\uffd9\172\uffd9\174" +
    "\uffd9\176\uffd9\200\uffd9\204\uffd9\205\uffd9\206\uffd9\001\002" +
    "\000\006\077\u0309\137\u030a\001\002\000\004\077\u019f\001" +
    "\002\000\032\075\uffd3\162\uffd3\164\uffd3\166\uffd3\170\uffd3" +
    "\172\uffd3\174\uffd3\176\uffd3\200\uffd3\204\uffd3\205\uffd3\206" +
    "\uffd3\001\002\000\006\077\u016d\137\u016e\001\002\000\032" +
    "\075\uffd1\162\uffd1\164\uffd1\166\uffd1\170\uffd1\172\uffd1\174" +
    "\uffd1\176\uffd1\200\uffd1\204\uffd1\205\uffd1\206\uffd1\001\002" +
    "\000\006\077\u0137\137\u0138\001\002\000\004\020\u0135\001" +
    "\002\000\032\075\uffdd\162\uffdd\164\uffdd\166\uffdd\170\uffdd" +
    "\172\uffdd\174\uffdd\176\uffdd\200\uffdd\204\uffdd\205\uffdd\206" +
    "\uffdd\001\002\000\004\077\ufeff\001\002\000\006\077\374" +
    "\137\375\001\002\000\032\075\uffd7\162\uffd7\164\uffd7\166" +
    "\uffd7\170\uffd7\172\uffd7\174\uffd7\176\uffd7\200\uffd7\204\uffd7" +
    "\205\uffd7\206\uffd7\001\002\000\032\075\uffcd\162\uffcd\164" +
    "\uffcd\166\uffcd\170\uffcd\172\uffcd\174\uffcd\176\uffcd\200\uffcd" +
    "\204\uffcd\205\uffcd\206\uffcd\001\002\000\006\077\265\137" +
    "\266\001\002\000\032\075\uffd5\162\uffd5\164\uffd5\166\uffd5" +
    "\170\uffd5\172\uffd5\174\uffd5\176\uffd5\200\uffd5\204\uffd5\205" +
    "\uffd5\206\uffd5\001\002\000\032\075\uffdb\162\uffdb\164\uffdb" +
    "\166\uffdb\170\uffdb\172\uffdb\174\uffdb\176\uffdb\200\uffdb\204" +
    "\uffdb\205\uffdb\206\uffdb\001\002\000\006\077\202\137\203" +
    "\001\002\000\032\075\uffdf\162\uffdf\164\uffdf\166\uffdf\170" +
    "\uffdf\172\uffdf\174\uffdf\176\uffdf\200\uffdf\204\uffdf\205\uffdf" +
    "\206\uffdf\001\002\000\032\075\uffe1\162\uffe1\164\uffe1\166" +
    "\uffe1\170\uffe1\172\uffe1\174\uffe1\176\uffe1\200\uffe1\204\uffe1" +
    "\205\uffe1\206\uffe1\001\002\000\032\075\uffcf\162\uffcf\164" +
    "\uffcf\166\uffcf\170\uffcf\172\uffcf\174\uffcf\176\uffcf\200\uffcf" +
    "\204\uffcf\205\uffcf\206\uffcf\001\002\000\006\077\106\137" +
    "\107\001\002\000\004\077\175\001\002\000\006\030\172" +
    "\171\173\001\002\000\016\022\110\027\123\033\117\034" +
    "\121\036\122\157\115\001\002\000\004\073\164\001\002" +
    "\000\004\140\162\001\002\000\004\140\160\001\002\000" +
    "\004\140\156\001\002\000\004\140\154\001\002\000\004" +
    "\073\150\001\002\000\004\140\146\001\002\000\004\073" +
    "\142\001\002\000\004\140\140\001\002\000\004\073\134" +
    "\001\002\000\004\073\130\001\002\000\004\073\124\001" +
    "\002\000\004\141\125\001\002\000\004\161\126\001\002" +
    "\000\004\141\127\001\002\000\004\140\uff7f\001\002\000" +
    "\004\141\131\001\002\000\004\031\132\001\002\000\004" +
    "\141\133\001\002\000\004\140\uff7c\001\002\000\004\141" +
    "\135\001\002\000\004\035\136\001\002\000\004\141\137" +
    "\001\002\000\004\140\uff79\001\002\000\006\077\uff83\137" +
    "\107\001\002\000\004\077\uff89\001\002\000\004\141\143" +
    "\001\002\000\004\160\144\001\002\000\004\141\145\001" +
    "\002\000\004\140\uff7d\001\002\000\006\077\uff80\137\107" +
    "\001\002\000\004\077\uff86\001\002\000\004\141\151\001" +
    "\002\000\004\032\152\001\002\000\004\141\153\001\002" +
    "\000\004\140\uff7e\001\002\000\006\077\uff81\137\107\001" +
    "\002\000\004\077\uff87\001\002\000\006\077\uff82\137\107" +
    "\001\002\000\004\077\uff88\001\002\000\006\077\uff84\137" +
    "\107\001\002\000\004\077\uff8a\001\002\000\006\077\uff85" +
    "\137\107\001\002\000\004\077\uff8b\001\002\000\004\141" +
    "\165\001\002\000\006\057\166\060\167\001\002\000\004" +
    "\141\171\001\002\000\004\141\170\001\002\000\004\140" +
    "\uff7b\001\002\000\004\140\uff7a\001\002\000\004\171\174" +
    "\001\002\000\032\075\uff8c\162\uff8c\164\uff8c\166\uff8c\170" +
    "\uff8c\172\uff8c\174\uff8c\176\uff8c\200\uff8c\204\uff8c\205\uff8c" +
    "\206\uff8c\001\002\000\032\075\uff8d\162\uff8d\164\uff8d\166" +
    "\uff8d\170\uff8d\172\uff8d\174\uff8d\176\uff8d\200\uff8d\204\uff8d" +
    "\205\uff8d\206\uff8d\001\002\000\006\030\176\171\177\001" +
    "\002\000\004\171\200\001\002\000\032\075\uff8e\162\uff8e" +
    "\164\uff8e\166\uff8e\170\uff8e\172\uff8e\174\uff8e\176\uff8e\200" +
    "\uff8e\204\uff8e\205\uff8e\206\uff8e\001\002\000\032\075\uff8f" +
    "\162\uff8f\164\uff8f\166\uff8f\170\uff8f\172\uff8f\174\uff8f\176" +
    "\uff8f\200\uff8f\204\uff8f\205\uff8f\206\uff8f\001\002\000\004" +
    "\077\261\001\002\000\006\030\256\165\257\001\002\000" +
    "\014\022\204\027\215\033\213\036\214\157\212\001\002" +
    "\000\004\073\250\001\002\000\004\140\246\001\002\000" +
    "\004\140\244\001\002\000\004\140\242\001\002\000\004" +
    "\140\240\001\002\000\004\140\236\001\002\000\004\073" +
    "\232\001\002\000\004\073\226\001\002\000\004\073\222" +
    "\001\002\000\004\073\216\001\002\000\004\141\217\001" +
    "\002\000\004\161\220\001\002\000\004\141\221\001\002" +
    "\000\004\140\uffa9\001\002\000\004\141\223\001\002\000" +
    "\004\031\224\001\002\000\004\141\225\001\002\000\004" +
    "\140\uffa6\001\002\000\004\141\227\001\002\000\004\160" +
    "\230\001\002\000\004\141\231\001\002\000\004\140\uffa7" +
    "\001\002\000\004\141\233\001\002\000\004\032\234\001" +
    "\002\000\004\141\235\001\002\000\004\140\uffa8\001\002" +
    "\000\006\077\uffac\137\203\001\002\000\004\077\uffb1\001" +
    "\002\000\006\077\uffab\137\203\001\002\000\004\077\uffb0" +
    "\001\002\000\006\077\uffaa\137\203\001\002\000\004\077" +
    "\uffaf\001\002\000\006\077\uffae\137\203\001\002\000\004" +
    "\077\uffb3\001\002\000\006\077\uffad\137\203\001\002\000" +
    "\004\077\uffb2\001\002\000\004\141\251\001\002\000\006" +
    "\057\252\060\253\001\002\000\004\141\255\001\002\000" +
    "\004\141\254\001\002\000\004\140\uffa5\001\002\000\004" +
    "\140\uffa4\001\002\000\004\165\260\001\002\000\032\075" +
    "\uffb4\162\uffb4\164\uffb4\166\uffb4\170\uffb4\172\uffb4\174\uffb4" +
    "\176\uffb4\200\uffb4\204\uffb4\205\uffb4\206\uffb4\001\002\000" +
    "\032\075\uffb5\162\uffb5\164\uffb5\166\uffb5\170\uffb5\172\uffb5" +
    "\174\uffb5\176\uffb5\200\uffb5\204\uffb5\205\uffb5\206\uffb5\001" +
    "\002\000\006\030\262\165\263\001\002\000\004\165\264" +
    "\001\002\000\032\075\uffb6\162\uffb6\164\uffb6\166\uffb6\170" +
    "\uffb6\172\uffb6\174\uffb6\176\uffb6\200\uffb6\204\uffb6\205\uffb6" +
    "\206\uffb6\001\002\000\032\075\uffb7\162\uffb7\164\uffb7\166" +
    "\uffb7\170\uffb7\172\uffb7\174\uffb7\176\uffb7\200\uffb7\204\uffb7" +
    "\205\uffb7\206\uffb7\001\002\000\006\030\370\175\371\001" +
    "\002\000\020\022\274\026\277\027\307\033\304\036\305" +
    "\052\300\157\302\001\002\000\004\077\270\001\002\000" +
    "\006\030\271\175\272\001\002\000\004\175\273\001\002" +
    "\000\032\075\uff61\162\uff61\164\uff61\166\uff61\170\uff61\172" +
    "\uff61\174\uff61\176\uff61\200\uff61\204\uff61\205\uff61\206\uff61" +
    "\001\002\000\032\075\uff62\162\uff62\164\uff62\166\uff62\170" +
    "\uff62\172\uff62\174\uff62\176\uff62\200\uff62\204\uff62\205\uff62" +
    "\206\uff62\001\002\000\004\073\362\001\002\000\004\140" +
    "\360\001\002\000\004\140\356\001\002\000\004\073\350" +
    "\001\002\000\004\073\344\001\002\000\004\140\342\001" +
    "\002\000\004\073\336\001\002\000\004\140\334\001\002" +
    "\000\004\073\330\001\002\000\004\073\324\001\002\000" +
    "\004\140\322\001\002\000\004\073\316\001\002\000\004" +
    "\140\314\001\002\000\004\140\312\001\002\000\006\077" +
    "\uff56\137\266\001\002\000\004\077\uff5d\001\002\000\006" +
    "\077\uff55\137\266\001\002\000\004\077\uff5c\001\002\000" +
    "\004\141\317\001\002\000\004\161\320\001\002\000\004" +
    "\141\321\001\002\000\004\140\uff50\001\002\000\006\077" +
    "\uff51\137\266\001\002\000\004\077\uff58\001\002\000\004" +
    "\141\325\001\002\000\004\031\326\001\002\000\004\141" +
    "\327\001\002\000\004\140\uff4d\001\002\000\004\141\331" +
    "\001\002\000\004\160\332\001\002\000\004\141\333\001" +
    "\002\000\004\140\uff4e\001\002\000\006\077\uff57\137\266" +
    "\001\002\000\004\077\uff5e\001\002\000\004\141\337\001" +
    "\002\000\004\032\340\001\002\000\004\141\341\001\002" +
    "\000\004\140\uff4f\001\002\000\006\077\uff53\137\266\001" +
    "\002\000\004\077\uff5a\001\002\000\004\141\345\001\002" +
    "\000\004\053\346\001\002\000\004\141\347\001\002\000" +
    "\004\140\uff48\001\002\000\004\141\351\001\002\000\006" +
    "\057\352\060\353\001\002\000\004\141\355\001\002\000" +
    "\004\141\354\001\002\000\004\140\uff49\001\002\000\004" +
    "\140\uff4a\001\002\000\006\077\uff52\137\266\001\002\000" +
    "\004\077\uff59\001\002\000\006\077\uff54\137\266\001\002" +
    "\000\004\077\uff5b\001\002\000\004\141\363\001\002\000" +
    "\006\057\364\060\365\001\002\000\004\141\367\001\002" +
    "\000\004\141\366\001\002\000\004\140\uff4c\001\002\000" +
    "\004\140\uff4b\001\002\000\004\175\372\001\002\000\032" +
    "\075\uff5f\162\uff5f\164\uff5f\166\uff5f\170\uff5f\172\uff5f\174" +
    "\uff5f\176\uff5f\200\uff5f\204\uff5f\205\uff5f\206\uff5f\001\002" +
    "\000\032\075\uff60\162\uff60\164\uff60\166\uff60\170\uff60\172" +
    "\uff60\174\uff60\176\uff60\200\uff60\204\uff60\205\uff60\206\uff60" +
    "\001\002\000\004\077\u0131\001\002\000\006\030\u012e\173" +
    "\u012f\001\002\000\016\027\u0107\033\u0101\036\u0106\040\u0105" +
    "\041\u0108\157\377\001\002\000\004\140\u012c\001\002\000" +
    "\004\073\u0128\001\002\000\004\140\u0126\001\002\000\004" +
    "\073\u0122\001\002\000\004\140\u0120\001\002\000\004\140" +
    "\u011e\001\002\000\004\140\u011c\001\002\000\004\073\u0118" +
    "\001\002\000\004\073\u0114\001\002\000\004\073\u0110\001" +
    "\002\000\004\073\u010c\001\002\000\004\140\u010a\001\002" +
    "\000\006\077\uff69\137\375\001\002\000\004\077\uff6f\001" +
    "\002\000\004\141\u010d\001\002\000\004\153\u010e\001\002" +
    "\000\004\141\u010f\001\002\000\004\140\uff63\001\002\000" +
    "\004\141\u0111\001\002\000\004\161\u0112\001\002\000\004" +
    "\141\u0113\001\002\000\004\140\uff68\001\002\000\004\141" +
    "\u0115\001\002\000\004\031\u0116\001\002\000\004\141\u0117" +
    "\001\002\000\004\140\uff65\001\002\000\004\141\u0119\001" +
    "\002\000\004\153\u011a\001\002\000\004\141\u011b\001\002" +
    "\000\004\140\uff64\001\002\000\006\077\uff6d\137\375\001" +
    "\002\000\004\077\uff73\001\002\000\006\077\uff6a\137\375" +
    "\001\002\000\004\077\uff70\001\002\000\006\077\uff6c\137" +
    "\375\001\002\000\004\077\uff72\001\002\000\004\141\u0123" +
    "\001\002\000\004\160\u0124\001\002\000\004\141\u0125\001" +
    "\002\000\004\140\uff66\001\002\000\006\077\uff6b\137\375" +
    "\001\002\000\004\077\uff71\001\002\000\004\141\u0129\001" +
    "\002\000\004\032\u012a\001\002\000\004\141\u012b\001\002" +
    "\000\004\140\uff67\001\002\000\006\077\uff6e\137\375\001" +
    "\002\000\004\077\uff74\001\002\000\004\173\u0130\001\002" +
    "\000\032\075\uff75\162\uff75\164\uff75\166\uff75\170\uff75\172" +
    "\uff75\174\uff75\176\uff75\200\uff75\204\uff75\205\uff75\206\uff75" +
    "\001\002\000\032\075\uff76\162\uff76\164\uff76\166\uff76\170" +
    "\uff76\172\uff76\174\uff76\176\uff76\200\uff76\204\uff76\205\uff76" +
    "\206\uff76\001\002\000\006\030\u0132\173\u0133\001\002\000" +
    "\004\173\u0134\001\002\000\032\075\uff77\162\uff77\164\uff77" +
    "\166\uff77\170\uff77\172\uff77\174\uff77\176\uff77\200\uff77\204" +
    "\uff77\205\uff77\206\uff77\001\002\000\032\075\uff78\162\uff78" +
    "\164\uff78\166\uff78\170\uff78\172\uff78\174\uff78\176\uff78\200" +
    "\uff78\204\uff78\205\uff78\206\uff78\001\002\000\004\077\u0136" +
    "\001\002\000\032\075\uffb8\162\uffb8\164\uffb8\166\uffb8\170" +
    "\uffb8\172\uffb8\174\uffb8\176\uffb8\200\uffb8\204\uffb8\205\uffb8" +
    "\206\uffb8\001\002\000\004\201\u016c\001\002\000\014\022" +
    "\u0142\027\u014a\033\u0147\036\u0148\157\u0146\001\002\000\004" +
    "\077\u013a\001\002\000\006\201\u013c\202\u013d\001\002\000" +
    "\004\201\u0141\001\002\000\032\075\uff33\162\uff33\164\uff33" +
    "\166\uff33\170\uff33\172\uff33\174\uff33\176\uff33\200\uff33\204" +
    "\uff33\205\uff33\206\uff33\001\002\000\004\030\u013e\001\002" +
    "\000\004\203\u013f\001\002\000\006\201\uff20\202\u013d\001" +
    "\002\000\004\201\uff21\001\002\000\032\075\uff34\162\uff34" +
    "\164\uff34\166\uff34\170\uff34\172\uff34\174\uff34\176\uff34\200" +
    "\uff34\204\uff34\205\uff34\206\uff34\001\002\000\004\073\u0166" +
    "\001\002\000\004\140\u0164\001\002\000\004\140\u0162\001" +
    "\002\000\004\140\u0160\001\002\000\004\073\u015c\001\002" +
    "\000\004\073\u0158\001\002\000\004\073\u0154\001\002\000" +
    "\004\140\u0152\001\002\000\004\073\u014e\001\002\000\004" +
    "\140\u014c\001\002\000\006\077\uff2b\137\u0138\001\002\000" +
    "\004\077\uff30\001\002\000\004\141\u014f\001\002\000\004" +
    "\161\u0150\001\002\000\004\141\u0151\001\002\000\004\140" +
    "\uff27\001\002\000\006\077\uff2c\137\u0138\001\002\000\004" +
    "\077\uff31\001\002\000\004\141\u0155\001\002\000\004\031" +
    "\u0156\001\002\000\004\141\u0157\001\002\000\004\140\uff24" +
    "\001\002\000\004\141\u0159\001\002\000\004\160\u015a\001" +
    "\002\000\004\141\u015b\001\002\000\004\140\uff25\001\002" +
    "\000\004\141\u015d\001\002\000\004\032\u015e\001\002\000" +
    "\004\141\u015f\001\002\000\004\140\uff26\001\002\000\006" +
    "\077\uff28\137\u0138\001\002\000\004\077\uff2d\001\002\000" +
    "\006\077\uff2a\137\u0138\001\002\000\004\077\uff2f\001\002" +
    "\000\006\077\uff29\137\u0138\001\002\000\004\077\uff2e\001" +
    "\002\000\004\141\u0167\001\002\000\006\057\u0168\060\u0169" +
    "\001\002\000\004\141\u016b\001\002\000\004\141\u016a\001" +
    "\002\000\004\140\uff23\001\002\000\004\140\uff22\001\002" +
    "\000\032\075\uff32\162\uff32\164\uff32\166\uff32\170\uff32\172" +
    "\uff32\174\uff32\176\uff32\200\uff32\204\uff32\205\uff32\206\uff32" +
    "\001\002\000\006\030\u019c\177\u019d\001\002\000\014\036" +
    "\u017a\046\u0179\047\u017b\050\u0178\051\u0174\001\002\000\004" +
    "\077\u0170\001\002\000\006\030\u0171\177\u0172\001\002\000" +
    "\004\177\u0173\001\002\000\032\075\uff46\162\uff46\164\uff46" +
    "\166\uff46\170\uff46\172\uff46\174\uff46\176\uff46\200\uff46\204" +
    "\uff46\205\uff46\206\uff46\001\002\000\032\075\uff47\162\uff47" +
    "\164\uff47\166\uff47\170\uff47\172\uff47\174\uff47\176\uff47\200" +
    "\uff47\204\uff47\205\uff47\206\uff47\001\002\000\004\073\u0198" +
    "\001\002\000\004\140\u0196\001\002\000\004\140\u0194\001" +
    "\002\000\004\140\u0192\001\002\000\004\073\u018e\001\002" +
    "\000\004\073\u018a\001\002\000\004\073\u0186\001\002\000" +
    "\004\073\u0182\001\002\000\004\140\u0180\001\002\000\004" +
    "\140\u017e\001\002\000\006\077\uff3c\137\u016e\001\002\000" +
    "\004\077\uff41\001\002\000\006\077\uff3b\137\u016e\001\002" +
    "\000\004\077\uff40\001\002\000\004\141\u0183\001\002\000" +
    "\004\161\u0184\001\002\000\004\141\u0185\001\002\000\004" +
    "\140\uff38\001\002\000\004\141\u0187\001\002\000\004\031" +
    "\u0188\001\002\000\004\141\u0189\001\002\000\004\140\uff36" +
    "\001\002\000\004\141\u018b\001\002\000\004\030\u018c\001" +
    "\002\000\004\141\u018d\001\002\000\004\140\uff39\001\002" +
    "\000\004\141\u018f\001\002\000\004\161\u0190\001\002\000" +
    "\004\141\u0191\001\002\000\004\140\uff37\001\002\000\006" +
    "\077\uff3d\137\u016e\001\002\000\004\077\uff42\001\002\000" +
    "\006\077\uff3a\137\u016e\001\002\000\004\077\uff3f\001\002" +
    "\000\006\077\uff3e\137\u016e\001\002\000\004\077\uff43\001" +
    "\002\000\004\141\u0199\001\002\000\004\030\u019a\001\002" +
    "\000\004\141\u019b\001\002\000\004\140\uff35\001\002\000" +
    "\004\177\u019e\001\002\000\032\075\uff44\162\uff44\164\uff44" +
    "\166\uff44\170\uff44\172\uff44\174\uff44\176\uff44\200\uff44\204" +
    "\uff44\205\uff44\206\uff44\001\002\000\032\075\uff45\162\uff45" +
    "\164\uff45\166\uff45\170\uff45\172\uff45\174\uff45\176\uff45\200" +
    "\uff45\204\uff45\205\uff45\206\uff45\001\002\000\006\053\u01a2" +
    "\056\u01a0\001\002\000\004\135\u0303\001\002\000\004\207" +
    "\u0300\001\002\000\004\137\ufef5\001\002\000\004\207\u0300" +
    "\001\002\000\006\053\u01a2\207\ufefa\001\002\000\006\053" +
    "\u01a2\207\ufefc\001\002\000\004\137\u01a7\001\002\000\036" +
    "\061\u01ab\063\u01bf\064\u01b0\065\u01b6\070\u01af\071\u01b7\114" +
    "\u01bd\115\u01a8\116\u01b9\123\u01b4\126\u01c2\130\u01b8\131\u01ae" +
    "\140\u01ac\001\002\000\004\135\u02fb\001\002\000\040\061" +
    "\u01ab\063\u01bf\064\u01b0\065\u01b6\070\u01af\071\u01b7\114\u01bd" +
    "\115\u01a8\116\u01b9\123\u01b4\126\u01c2\130\u01b8\131\u01ae\134" +
    "\ufef1\140\ufef1\001\002\000\040\061\u01ab\063\u01bf\064\u01b0" +
    "\065\u01b6\070\u01af\071\u01b7\114\u01bd\115\u01a8\116\u01b9\123" +
    "\u01b4\126\u01c2\130\u01b8\131\u01ae\134\ufedf\140\ufedf\001\002" +
    "\000\004\073\u02db\001\002\000\006\053\ufef8\207\ufef8\001" +
    "\002\000\040\061\u01ab\063\u01bf\064\u01b0\065\u01b6\070\u01af" +
    "\071\u01b7\114\u01bd\115\u01a8\116\u01b9\123\u01b4\126\u01c2\130" +
    "\u01b8\131\u01ae\134\ufeef\140\ufeef\001\002\000\004\135\u02d5" +
    "\001\002\000\006\061\u01f6\062\u02c1\001\002\000\006\061" +
    "\u01f6\062\u02a6\001\002\000\040\061\u01ab\063\u01bf\064\u01b0" +
    "\065\u01b6\070\u01af\071\u01b7\114\u01bd\115\u01a8\116\u01b9\123" +
    "\u01b4\126\u01c2\130\u01b8\131\u01ae\134\ufee7\140\ufee7\001\002" +
    "\000\004\140\u02a4\001\002\000\040\061\u01ab\063\u01bf\064" +
    "\u01b0\065\u01b6\070\u01af\071\u01b7\114\u01bd\115\u01a8\116\u01b9" +
    "\123\u01b4\126\u01c2\130\u01b8\131\u01ae\134\ufee5\140\ufee5\001" +
    "\002\000\004\135\u029b\001\002\000\040\061\u01ab\063\u01bf" +
    "\064\u01b0\065\u01b6\070\u01af\071\u01b7\114\u01bd\115\u01a8\116" +
    "\u01b9\123\u01b4\126\u01c2\130\u01b8\131\u01ae\134\ufee3\140\ufee3" +
    "\001\002\000\006\061\u01f6\062\u0286\001\002\000\006\061" +
    "\u01f6\062\u0264\001\002\000\004\135\u0256\001\002\000\004" +
    "\135\u0253\001\002\000\036\061\u01ab\063\u01bf\064\u01b0\065" +
    "\u01b6\070\u01af\071\u01b7\105\u01d4\106\u01cb\107\u01cf\110\u01c8" +
    "\111\u01d8\112\u01d6\113\u01d2\121\u01ca\001\002\000\040\061" +
    "\u01ab\063\u01bf\064\u01b0\065\u01b6\070\u01af\071\u01b7\114\u01bd" +
    "\115\u01a8\116\u01b9\123\u01b4\126\u01c2\130\u01b8\131\u01ae\134" +
    "\ufee1\140\ufee1\001\002\000\040\061\u01ab\063\u01bf\064\u01b0" +
    "\065\u01b6\070\u01af\071\u01b7\114\u01bd\115\u01a8\116\u01b9\123" +
    "\u01b4\126\u01c2\130\u01b8\131\u01ae\134\ufeeb\140\ufeeb\001\002" +
    "\000\004\135\u0212\001\002\000\040\061\u01ab\063\u01bf\064" +
    "\u01b0\065\u01b6\070\u01af\071\u01b7\114\u01bd\115\u01a8\116\u01b9" +
    "\123\u01b4\126\u01c2\130\u01b8\131\u01ae\134\ufef3\140\ufef3\001" +
    "\002\000\006\061\u01f6\062\u01f4\001\002\000\040\061\u01ab" +
    "\063\u01bf\064\u01b0\065\u01b6\070\u01af\071\u01b7\114\u01bd\115" +
    "\u01a8\116\u01b9\123\u01b4\126\u01c2\130\u01b8\131\u01ae\134\ufeed" +
    "\140\ufeed\001\002\000\040\061\u01ab\063\u01bf\064\u01b0\065" +
    "\u01b6\070\u01af\071\u01b7\114\u01bd\115\u01a8\116\u01b9\123\u01b4" +
    "\126\u01c2\130\u01b8\131\u01ae\134\ufee9\140\ufee9\001\002\000" +
    "\004\135\u01c3\001\002\000\004\136\u01c4\001\002\000\004" +
    "\127\u01c5\001\002\000\004\135\u01c6\001\002\000\004\136" +
    "\u01c7\001\002\000\036\061\u01ab\063\u01bf\064\u01b0\065\u01b6" +
    "\070\u01af\071\u01b7\105\u01d4\106\u01cb\107\u01cf\110\u01c8\111" +
    "\u01d8\112\u01d6\113\u01d2\121\u01ca\001\002\000\004\135\u01ef" +
    "\001\002\000\042\061\ufedd\063\ufedd\064\ufedd\065\ufedd\070" +
    "\ufedd\071\ufedd\114\ufedd\115\ufedd\116\ufedd\123\ufedd\124\ufedd" +
    "\126\ufedd\130\ufedd\131\ufedd\134\ufedd\140\ufedd\001\002\000" +
    "\004\133\u01e9\001\002\000\004\135\u01e6\001\002\000\042" +
    "\061\ufedc\063\ufedc\064\ufedc\065\ufedc\070\ufedc\071\ufedc\114" +
    "\ufedc\115\ufedc\116\ufedc\123\ufedc\124\ufedc\126\ufedc\130\ufedc" +
    "\131\ufedc\134\ufedc\140\ufedc\001\002\000\040\061\ufe7b\063" +
    "\ufe7b\064\ufe7b\065\ufe7b\070\ufe7b\071\ufe7b\114\ufe7b\115\ufe7b" +
    "\116\ufe7b\123\ufe7b\126\ufe7b\130\ufe7b\131\ufe7b\134\ufe7b\140" +
    "\ufe7b\001\002\000\040\061\ufe7a\063\ufe7a\064\ufe7a\065\ufe7a" +
    "\070\ufe7a\071\ufe7a\114\ufe7a\115\ufe7a\116\ufe7a\123\ufe7a\126" +
    "\ufe7a\130\ufe7a\131\ufe7a\134\ufe7a\140\ufe7a\001\002\000\004" +
    "\135\u01e3\001\002\000\042\061\ufeda\063\ufeda\064\ufeda\065" +
    "\ufeda\070\ufeda\071\ufeda\114\ufeda\115\ufeda\116\ufeda\123\ufeda" +
    "\124\ufeda\126\ufeda\130\ufeda\131\ufeda\134\ufeda\140\ufeda\001" +
    "\002\000\042\061\ufed8\063\ufed8\064\ufed8\065\ufed8\070\ufed8" +
    "\071\ufed8\114\ufed8\115\ufed8\116\ufed8\123\ufed8\124\ufed8\126" +
    "\ufed8\130\ufed8\131\ufed8\134\ufed8\140\ufed8\001\002\000\004" +
    "\135\u01e1\001\002\000\042\061\ufede\063\ufede\064\ufede\065" +
    "\ufede\070\ufede\071\ufede\114\ufede\115\ufede\116\ufede\123\ufede" +
    "\124\ufede\126\ufede\130\ufede\131\ufede\134\ufede\140\ufede\001" +
    "\002\000\004\135\u01de\001\002\000\042\061\ufedb\063\ufedb" +
    "\064\ufedb\065\ufedb\070\ufedb\071\ufedb\114\ufedb\115\ufedb\116" +
    "\ufedb\123\ufedb\124\ufedb\126\ufedb\130\ufedb\131\ufedb\134\ufedb" +
    "\140\ufedb\001\002\000\004\135\u01dc\001\002\000\042\061" +
    "\ufed9\063\ufed9\064\ufed9\065\ufed9\070\ufed9\071\ufed9\114\ufed9" +
    "\115\ufed9\116\ufed9\123\ufed9\124\ufed9\126\ufed9\130\ufed9\131" +
    "\ufed9\134\ufed9\140\ufed9\001\002\000\004\135\u01d9\001\002" +
    "\000\004\061\u01da\001\002\000\004\136\u01db\001\002\000" +
    "\044\061\ufe6e\063\ufe6e\064\ufe6e\065\ufe6e\070\ufe6e\071\ufe6e" +
    "\114\ufe6e\115\ufe6e\116\ufe6e\123\ufe6e\124\ufe6e\126\ufe6e\130" +
    "\ufe6e\131\ufe6e\134\ufe6e\140\ufe6e\145\ufe6e\001\002\000\004" +
    "\136\u01dd\001\002\000\044\061\ufe6d\063\ufe6d\064\ufe6d\065" +
    "\ufe6d\070\ufe6d\071\ufe6d\114\ufe6d\115\ufe6d\116\ufe6d\123\ufe6d" +
    "\124\ufe6d\126\ufe6d\130\ufe6d\131\ufe6d\134\ufe6d\140\ufe6d\145" +
    "\ufe6d\001\002\000\004\061\u01df\001\002\000\004\136\u01e0" +
    "\001\002\000\044\061\ufe72\063\ufe72\064\ufe72\065\ufe72\070" +
    "\ufe72\071\ufe72\114\ufe72\115\ufe72\116\ufe72\123\ufe72\124\ufe72" +
    "\126\ufe72\130\ufe72\131\ufe72\134\ufe72\140\ufe72\145\ufe72\001" +
    "\002\000\004\136\u01e2\001\002\000\044\061\ufe6c\063\ufe6c" +
    "\064\ufe6c\065\ufe6c\070\ufe6c\071\ufe6c\114\ufe6c\115\ufe6c\116" +
    "\ufe6c\123\ufe6c\124\ufe6c\126\ufe6c\130\ufe6c\131\ufe6c\134\ufe6c" +
    "\140\ufe6c\145\ufe6c\001\002\000\004\061\u01e4\001\002\000" +
    "\004\136\u01e5\001\002\000\044\061\ufe70\063\ufe70\064\ufe70" +
    "\065\ufe70\070\ufe70\071\ufe70\114\ufe70\115\ufe70\116\ufe70\123" +
    "\ufe70\124\ufe70\126\ufe70\130\ufe70\131\ufe70\134\ufe70\140\ufe70" +
    "\145\ufe70\001\002\000\004\061\u01e7\001\002\000\004\136" +
    "\u01e8\001\002\000\044\061\ufe71\063\ufe71\064\ufe71\065\ufe71" +
    "\070\ufe71\071\ufe71\114\ufe71\115\ufe71\116\ufe71\123\ufe71\124" +
    "\ufe71\126\ufe71\130\ufe71\131\ufe71\134\ufe71\140\ufe71\145\ufe71" +
    "\001\002\000\036\061\u01ab\063\u01bf\064\u01b0\065\u01b6\070" +
    "\u01af\071\u01b7\114\u01bd\115\u01a8\116\u01b9\123\u01b4\126\u01c2" +
    "\130\u01b8\131\u01ae\134\u01eb\001\002\000\004\134\u01ed\001" +
    "\002\000\004\122\u01ec\001\002\000\042\061\ufe7c\063\ufe7c" +
    "\064\ufe7c\065\ufe7c\070\ufe7c\071\ufe7c\114\ufe7c\115\ufe7c\116" +
    "\ufe7c\123\ufe7c\124\ufe7c\126\ufe7c\130\ufe7c\131\ufe7c\134\ufe7c" +
    "\140\ufe7c\001\002\000\004\122\u01ee\001\002\000\042\061" +
    "\ufe7d\063\ufe7d\064\ufe7d\065\ufe7d\070\ufe7d\071\ufe7d\114\ufe7d" +
    "\115\ufe7d\116\ufe7d\123\ufe7d\124\ufe7d\126\ufe7d\130\ufe7d\131" +
    "\ufe7d\134\ufe7d\140\ufe7d\001\002\000\004\061\u01f0\001\002" +
    "\000\004\136\u01f1\001\002\000\044\061\ufe6f\063\ufe6f\064" +
    "\ufe6f\065\ufe6f\070\ufe6f\071\ufe6f\114\ufe6f\115\ufe6f\116\ufe6f" +
    "\123\ufe6f\124\ufe6f\126\ufe6f\130\ufe6f\131\ufe6f\134\ufe6f\140" +
    "\ufe6f\145\ufe6f\001\002\000\006\134\ufeea\140\ufeea\001\002" +
    "\000\006\134\ufeee\140\ufeee\001\002\000\004\061\u01f6\001" +
    "\002\000\010\073\u01f9\145\u01f8\146\u01f7\001\002\000\012" +
    "\073\ufec2\136\ufec2\145\ufec2\146\ufec2\001\002\000\004\061" +
    "\u020b\001\002\000\042\061\ufec5\063\ufec5\064\ufec5\065\ufec5" +
    "\070\ufec5\071\ufec5\114\ufec5\115\ufec5\116\ufec5\123\ufec5\124" +
    "\ufec5\126\ufec5\130\ufec5\131\ufec5\134\ufec5\140\ufec5\001\002" +
    "\000\012\061\u01fe\135\u01fd\150\u01fa\153\u01fc\001\002\000" +
    "\012\061\u01fe\135\u01fd\150\u01fa\153\u01fc\001\002\000\014" +
    "\145\u0209\147\u0203\150\u0201\151\u0200\152\u0204\001\002\000" +
    "\016\136\ufebb\145\ufebb\147\ufebb\150\ufebb\151\ufebb\152\ufebb" +
    "\001\002\000\012\061\u01fe\135\u01fd\150\u01fa\153\u01fc\001" +
    "\002\000\016\136\ufeba\145\ufeba\147\ufeba\150\ufeba\151\ufeba" +
    "\152\ufeba\001\002\000\014\136\u0202\147\u0203\150\u0201\151" +
    "\u0200\152\u0204\001\002\000\012\061\u01fe\135\u01fd\150\u01fa" +
    "\153\u01fc\001\002\000\012\061\u01fe\135\u01fd\150\u01fa\153" +
    "\u01fc\001\002\000\016\136\ufebc\145\ufebc\147\ufebc\150\ufebc" +
    "\151\ufebc\152\ufebc\001\002\000\012\061\u01fe\135\u01fd\150" +
    "\u01fa\153\u01fc\001\002\000\012\061\u01fe\135\u01fd\150\u01fa" +
    "\153\u01fc\001\002\000\016\136\ufebe\145\ufebe\147\ufebe\150" +
    "\ufebe\151\ufebe\152\ufebe\001\002\000\016\136\ufec1\145\ufec1" +
    "\147\ufec1\150\ufec1\151\u0200\152\u0204\001\002\000\016\136" +
    "\ufec0\145\ufec0\147\ufec0\150\ufec0\151\u0200\152\u0204\001\002" +
    "\000\016\136\ufebf\145\ufebf\147\ufebf\150\ufebf\151\ufebf\152" +
    "\ufebf\001\002\000\042\061\ufec4\063\ufec4\064\ufec4\065\ufec4" +
    "\070\ufec4\071\ufec4\114\ufec4\115\ufec4\116\ufec4\123\ufec4\124" +
    "\ufec4\126\ufec4\130\ufec4\131\ufec4\134\ufec4\140\ufec4\001\002" +
    "\000\016\136\ufebd\145\ufebd\147\ufebd\150\ufebd\151\ufebd\152" +
    "\ufebd\001\002\000\012\073\ufec3\136\ufec3\145\ufec3\146\ufec3" +
    "\001\002\000\010\073\u020e\145\u020d\146\u01f7\001\002\000" +
    "\042\061\ufec7\063\ufec7\064\ufec7\065\ufec7\070\ufec7\071\ufec7" +
    "\114\ufec7\115\ufec7\116\ufec7\123\ufec7\124\ufec7\126\ufec7\130" +
    "\ufec7\131\ufec7\134\ufec7\140\ufec7\001\002\000\012\061\u01fe" +
    "\135\u01fd\150\u01fa\153\u01fc\001\002\000\014\145\u0210\147" +
    "\u0203\150\u0201\151\u0200\152\u0204\001\002\000\042\061\ufec6" +
    "\063\ufec6\064\ufec6\065\ufec6\070\ufec6\071\ufec6\114\ufec6\115" +
    "\ufec6\116\ufec6\123\ufec6\124\ufec6\126\ufec6\130\ufec6\131\ufec6" +
    "\134\ufec6\140\ufec6\001\002\000\006\134\ufef4\140\ufef4\001" +
    "\002\000\004\061\u0213\001\002\000\004\136\u0214\001\002" +
    "\000\004\145\u0215\001\002\000\040\061\ufe6b\063\ufe6b\064" +
    "\ufe6b\065\ufe6b\070\ufe6b\071\ufe6b\114\ufe6b\115\ufe6b\116\ufe6b" +
    "\123\ufe6b\126\ufe6b\130\ufe6b\131\ufe6b\134\ufe6b\140\ufe6b\001" +
    "\002\000\006\134\ufeec\140\ufeec\001\002\000\006\134\ufee2" +
    "\140\ufee2\001\002\000\042\061\ufe8d\063\ufe8d\064\ufe8d\065" +
    "\ufe8d\070\ufe8d\071\ufe8d\114\ufe8d\115\ufe8d\116\ufe8d\123\ufe8d" +
    "\124\u021a\126\ufe8d\130\ufe8d\131\ufe8d\134\ufe8d\140\ufe8d\001" +
    "\002\000\042\061\ufe8c\063\ufe8c\064\ufe8c\065\ufe8c\070\ufe8c" +
    "\071\ufe8c\114\ufe8c\115\ufe8c\116\ufe8c\123\ufe8c\124\u021a\126" +
    "\ufe8c\130\ufe8c\131\ufe8c\134\ufe8c\140\ufe8c\001\002\000\040" +
    "\061\u01ab\063\u01bf\064\u01b0\065\u01b6\070\u01af\071\u01b7\105" +
    "\u01d4\106\u01cb\107\u01cf\110\u01c8\111\u01d8\112\u01d6\113\u01d2" +
    "\121\u01ca\123\u0243\001\002\000\004\124\u021d\001\002\000" +
    "\040\061\ufe8a\063\ufe8a\064\ufe8a\065\ufe8a\070\ufe8a\071\ufe8a" +
    "\114\ufe8a\115\ufe8a\116\ufe8a\123\ufe8a\126\ufe8a\130\ufe8a\131" +
    "\ufe8a\134\ufe8a\140\ufe8a\001\002\000\040\061\u01ab\063\u01bf" +
    "\064\u01b0\065\u01b6\070\u01af\071\u01b7\105\u01d4\106\u01cb\107" +
    "\u01cf\110\u01c8\111\u01d8\112\u01d6\113\u01d2\121\u01ca\123\u0220" +
    "\001\002\000\040\061\ufe88\063\ufe88\064\ufe88\065\ufe88\070" +
    "\ufe88\071\ufe88\114\ufe88\115\ufe88\116\ufe88\123\ufe88\126\ufe88" +
    "\130\ufe88\131\ufe88\134\ufe88\140\ufe88\001\002\000\040\061" +
    "\ufe85\063\ufe85\064\ufe85\065\ufe85\070\ufe85\071\ufe85\114\ufe85" +
    "\115\ufe85\116\ufe85\123\ufe85\126\ufe85\130\ufe85\131\ufe85\134" +
    "\ufe85\140\ufe85\001\002\000\004\135\u0222\001\002\000\040" +
    "\061\ufe84\063\ufe84\064\ufe84\065\ufe84\070\ufe84\071\ufe84\114" +
    "\ufe84\115\ufe84\116\ufe84\123\ufe84\126\ufe84\130\ufe84\131\ufe84" +
    "\134\ufe84\140\ufe84\001\002\000\014\061\u0228\135\u0227\150" +
    "\u0223\153\u0226\154\u0225\001\002\000\014\061\u0228\135\u0227" +
    "\150\u0223\153\u0226\154\u0225\001\002\000\034\072\u0235\074" +
    "\u0239\075\u0238\076\u023b\077\u0236\101\u0237\102\u023c\103\u0233" +
    "\104\u023a\147\u022d\150\u022a\151\u022b\152\u022e\001\002\000" +
    "\036\072\ufe61\074\ufe61\075\ufe61\076\ufe61\077\ufe61\101\ufe61" +
    "\102\ufe61\103\ufe61\104\ufe61\136\ufe61\147\ufe61\150\ufe61\151" +
    "\ufe61\152\ufe61\001\002\000\036\072\ufe62\074\ufe62\075\ufe62" +
    "\076\ufe62\077\ufe62\101\ufe62\102\ufe62\103\ufe62\104\ufe62\136" +
    "\ufe62\147\ufe62\150\ufe62\151\ufe62\152\ufe62\001\002\000\014" +
    "\061\u0228\135\u0227\150\u0223\153\u0226\154\u0225\001\002\000" +
    "\036\072\ufe60\074\ufe60\075\ufe60\076\ufe60\077\ufe60\101\ufe60" +
    "\102\ufe60\103\ufe60\104\ufe60\136\ufe60\147\ufe60\150\ufe60\151" +
    "\ufe60\152\ufe60\001\002\000\014\136\u022c\147\u022d\150\u022a" +
    "\151\u022b\152\u022e\001\002\000\014\061\u0228\135\u0227\150" +
    "\u0223\153\u0226\154\u0225\001\002\000\014\061\u0228\135\u0227" +
    "\150\u0223\153\u0226\154\u0225\001\002\000\036\072\ufe63\074" +
    "\ufe63\075\ufe63\076\ufe63\077\ufe63\101\ufe63\102\ufe63\103\ufe63" +
    "\104\ufe63\136\ufe63\147\ufe63\150\ufe63\151\ufe63\152\ufe63\001" +
    "\002\000\014\061\u0228\135\u0227\150\u0223\153\u0226\154\u0225" +
    "\001\002\000\014\061\u0228\135\u0227\150\u0223\153\u0226\154" +
    "\u0225\001\002\000\036\072\ufe65\074\ufe65\075\ufe65\076\ufe65" +
    "\077\ufe65\101\ufe65\102\ufe65\103\ufe65\104\ufe65\136\ufe65\147" +
    "\ufe65\150\ufe65\151\ufe65\152\ufe65\001\002\000\036\072\ufe68" +
    "\074\ufe68\075\ufe68\076\ufe68\077\ufe68\101\ufe68\102\ufe68\103" +
    "\ufe68\104\ufe68\136\ufe68\147\ufe68\150\ufe68\151\u022b\152\u022e" +
    "\001\002\000\036\072\ufe66\074\ufe66\075\ufe66\076\ufe66\077" +
    "\ufe66\101\ufe66\102\ufe66\103\ufe66\104\ufe66\136\ufe66\147\ufe66" +
    "\150\ufe66\151\ufe66\152\ufe66\001\002\000\036\072\ufe67\074" +
    "\ufe67\075\ufe67\076\ufe67\077\ufe67\101\ufe67\102\ufe67\103\ufe67" +
    "\104\ufe67\136\ufe67\147\ufe67\150\ufe67\151\u022b\152\u022e\001" +
    "\002\000\014\061\ufe50\135\ufe50\150\ufe50\153\ufe50\154\ufe50" +
    "\001\002\000\014\061\u0228\135\u0227\150\u0223\153\u0226\154" +
    "\u0225\001\002\000\014\061\ufe57\135\ufe57\150\ufe57\153\ufe57" +
    "\154\ufe57\001\002\000\014\061\ufe53\135\ufe53\150\ufe53\153" +
    "\ufe53\154\ufe53\001\002\000\014\061\ufe52\135\ufe52\150\ufe52" +
    "\153\ufe52\154\ufe52\001\002\000\014\061\ufe55\135\ufe55\150" +
    "\ufe55\153\ufe55\154\ufe55\001\002\000\014\061\ufe56\135\ufe56" +
    "\150\ufe56\153\ufe56\154\ufe56\001\002\000\014\061\ufe4f\135" +
    "\ufe4f\150\ufe4f\153\ufe4f\154\ufe4f\001\002\000\014\061\ufe54" +
    "\135\ufe54\150\ufe54\153\ufe54\154\ufe54\001\002\000\014\061" +
    "\ufe51\135\ufe51\150\ufe51\153\ufe51\154\ufe51\001\002\000\014" +
    "\136\u023e\147\u022d\150\u022a\151\u022b\152\u022e\001\002\000" +
    "\004\125\u023f\001\002\000\036\061\u01ab\063\u01bf\064\u01b0" +
    "\065\u01b6\070\u01af\071\u01b7\105\u01d4\106\u01cb\107\u01cf\110" +
    "\u01c8\111\u01d8\112\u01d6\113\u01d2\121\u01ca\001\002\000\004" +
    "\124\ufe7f\001\002\000\004\124\ufe7e\001\002\000\036\072" +
    "\ufe64\074\ufe64\075\ufe64\076\ufe64\077\ufe64\101\ufe64\102\ufe64" +
    "\103\ufe64\104\ufe64\136\ufe64\147\ufe64\150\ufe64\151\ufe64\152" +
    "\ufe64\001\002\000\004\135\u0244\001\002\000\014\061\u0228" +
    "\135\u0227\150\u0223\153\u0226\154\u0225\001\002\000\036\072" +
    "\u0235\074\u0239\075\u0238\076\u023b\077\u0236\101\u0237\102\u023c" +
    "\103\u0233\104\u023a\136\u0247\147\u022d\150\u022a\151\u022b\152" +
    "\u022e\001\002\000\014\061\u0228\135\u0227\150\u0223\153\u0226" +
    "\154\u0225\001\002\000\004\125\u0248\001\002\000\036\061" +
    "\u01ab\063\u01bf\064\u01b0\065\u01b6\070\u01af\071\u01b7\105\u01d4" +
    "\106\u01cb\107\u01cf\110\u01c8\111\u01d8\112\u01d6\113\u01d2\121" +
    "\u01ca\001\002\000\004\124\ufe82\001\002\000\004\124\ufe80" +
    "\001\002\000\014\136\u024c\147\u022d\150\u022a\151\u022b\152" +
    "\u022e\001\002\000\004\125\u024d\001\002\000\036\061\u01ab" +
    "\063\u01bf\064\u01b0\065\u01b6\070\u01af\071\u01b7\105\u01d4\106" +
    "\u01cb\107\u01cf\110\u01c8\111\u01d8\112\u01d6\113\u01d2\121\u01ca" +
    "\001\002\000\004\124\ufe83\001\002\000\004\124\ufe81\001" +
    "\002\000\004\124\u021d\001\002\000\040\061\ufe8b\063\ufe8b" +
    "\064\ufe8b\065\ufe8b\070\ufe8b\071\ufe8b\114\ufe8b\115\ufe8b\116" +
    "\ufe8b\123\ufe8b\126\ufe8b\130\ufe8b\131\ufe8b\134\ufe8b\140\ufe8b" +
    "\001\002\000\040\061\ufe89\063\ufe89\064\ufe89\065\ufe89\070" +
    "\ufe89\071\ufe89\114\ufe89\115\ufe89\116\ufe89\123\ufe89\126\ufe89" +
    "\130\ufe89\131\ufe89\134\ufe89\140\ufe89\001\002\000\004\136" +
    "\u0254\001\002\000\004\145\u0255\001\002\000\040\061\ufe69" +
    "\063\ufe69\064\ufe69\065\ufe69\070\ufe69\071\ufe69\114\ufe69\115" +
    "\ufe69\116\ufe69\123\ufe69\126\ufe69\130\ufe69\131\ufe69\134\ufe69" +
    "\140\ufe69\001\002\000\010\061\u01f6\136\u0258\142\u0259\001" +
    "\002\000\004\136\u0262\001\002\000\004\145\u0261\001\002" +
    "\000\004\030\u025d\001\002\000\006\136\u025b\146\u01f7\001" +
    "\002\000\004\145\u025c\001\002\000\040\061\ufe76\063\ufe76" +
    "\064\ufe76\065\ufe76\070\ufe76\071\ufe76\114\ufe76\115\ufe76\116" +
    "\ufe76\123\ufe76\126\ufe76\130\ufe76\131\ufe76\134\ufe76\140\ufe76" +
    "\001\002\000\004\142\u025e\001\002\000\006\136\ufe73\146" +
    "\u025f\001\002\000\004\061\u0260\001\002\000\004\136\ufe74" +
    "\001\002\000\040\061\ufe77\063\ufe77\064\ufe77\065\ufe77\070" +
    "\ufe77\071\ufe77\114\ufe77\115\ufe77\116\ufe77\123\ufe77\126\ufe77" +
    "\130\ufe77\131\ufe77\134\ufe77\140\ufe77\001\002\000\004\145" +
    "\u0263\001\002\000\040\061\ufe75\063\ufe75\064\ufe75\065\ufe75" +
    "\070\ufe75\071\ufe75\114\ufe75\115\ufe75\116\ufe75\123\ufe75\126" +
    "\ufe75\130\ufe75\131\ufe75\134\ufe75\140\ufe75\001\002\000\004" +
    "\061\u01f6\001\002\000\010\073\u0266\145\u0267\146\u01f7\001" +
    "\002\000\026\061\u026b\105\u01d4\106\u01cb\107\u01cf\110\u01c8" +
    "\111\u01d8\112\u01d6\113\u01d2\120\u0269\141\u026d\001\002\000" +
    "\042\061\ufeb5\063\ufeb5\064\ufeb5\065\ufeb5\070\ufeb5\071\ufeb5" +
    "\114\ufeb5\115\ufeb5\116\ufeb5\123\ufeb5\124\ufeb5\126\ufeb5\130" +
    "\ufeb5\131\ufeb5\134\ufeb5\140\ufeb5\001\002\000\004\145\u027c" +
    "\001\002\000\004\135\u0277\001\002\000\004\145\u0276\001" +
    "\002\000\006\145\ufeae\147\ufeae\001\002\000\006\145\u0270" +
    "\147\u0271\001\002\000\004\030\u026e\001\002\000\004\141" +
    "\u026f\001\002\000\006\145\ufeaf\147\ufeaf\001\002\000\042" +
    "\061\ufeb4\063\ufeb4\064\ufeb4\065\ufeb4\070\ufeb4\071\ufeb4\114" +
    "\ufeb4\115\ufeb4\116\ufeb4\123\ufeb4\124\ufeb4\126\ufeb4\130\ufeb4" +
    "\131\ufeb4\134\ufeb4\140\ufeb4\001\002\000\006\061\u0273\141" +
    "\u0272\001\002\000\004\030\u0274\001\002\000\006\145\ufeb0" +
    "\147\ufeb0\001\002\000\004\141\u0275\001\002\000\006\145" +
    "\ufeb1\147\ufeb1\001\002\000\042\061\ufeb3\063\ufeb3\064\ufeb3" +
    "\065\ufeb3\070\ufeb3\071\ufeb3\114\ufeb3\115\ufeb3\116\ufeb3\123" +
    "\ufeb3\124\ufeb3\126\ufeb3\130\ufeb3\131\ufeb3\134\ufeb3\140\ufeb3" +
    "\001\002\000\004\142\u0278\001\002\000\004\031\u0279\001" +
    "\002\000\004\142\u027a\001\002\000\004\136\u027b\001\002" +
    "\000\004\145\ufec8\001\002\000\042\061\ufeb8\063\ufeb8\064" +
    "\ufeb8\065\ufeb8\070\ufeb8\071\ufeb8\114\ufeb8\115\ufeb8\116\ufeb8" +
    "\123\ufeb8\124\ufeb8\126\ufeb8\130\ufeb8\131\ufeb8\134\ufeb8\140" +
    "\ufeb8\001\002\000\010\073\u027f\145\u027e\146\u01f7\001\002" +
    "\000\042\061\ufeb7\063\ufeb7\064\ufeb7\065\ufeb7\070\ufeb7\071" +
    "\ufeb7\114\ufeb7\115\ufeb7\116\ufeb7\123\ufeb7\124\ufeb7\126\ufeb7" +
    "\130\ufeb7\131\ufeb7\134\ufeb7\140\ufeb7\001\002\000\026\061" +
    "\u026b\105\u01d4\106\u01cb\107\u01cf\110\u01c8\111\u01d8\112\u01d6" +
    "\113\u01d2\120\u0269\141\u026d\001\002\000\004\145\u0285\001" +
    "\002\000\004\145\u0284\001\002\000\006\145\u0283\147\u0271" +
    "\001\002\000\042\061\ufeb6\063\ufeb6\064\ufeb6\065\ufeb6\070" +
    "\ufeb6\071\ufeb6\114\ufeb6\115\ufeb6\116\ufeb6\123\ufeb6\124\ufeb6" +
    "\126\ufeb6\130\ufeb6\131\ufeb6\134\ufeb6\140\ufeb6\001\002\000" +
    "\042\061\ufeb2\063\ufeb2\064\ufeb2\065\ufeb2\070\ufeb2\071\ufeb2" +
    "\114\ufeb2\115\ufeb2\116\ufeb2\123\ufeb2\124\ufeb2\126\ufeb2\130" +
    "\ufeb2\131\ufeb2\134\ufeb2\140\ufeb2\001\002\000\042\061\ufeb9" +
    "\063\ufeb9\064\ufeb9\065\ufeb9\070\ufeb9\071\ufeb9\114\ufeb9\115" +
    "\ufeb9\116\ufeb9\123\ufeb9\124\ufeb9\126\ufeb9\130\ufeb9\131\ufeb9" +
    "\134\ufeb9\140\ufeb9\001\002\000\004\061\u01f6\001\002\000" +
    "\010\073\u0289\145\u0288\146\u01f7\001\002\000\042\061\ufe96" +
    "\063\ufe96\064\ufe96\065\ufe96\070\ufe96\071\ufe96\114\ufe96\115" +
    "\ufe96\116\ufe96\123\ufe96\124\ufe96\126\ufe96\130\ufe96\131\ufe96" +
    "\134\ufe96\140\ufe96\001\002\000\010\061\u028e\066\u028d\104" +
    "\u028b\001\002\000\006\067\ufe92\145\ufe92\001\002\000\006" +
    "\061\u0294\066\u0293\001\002\000\006\067\u0290\145\u028f\001" +
    "\002\000\020\067\ufe8e\136\ufe8e\145\ufe8e\147\ufe8e\150\ufe8e" +
    "\151\ufe8e\152\ufe8e\001\002\000\006\067\ufe91\145\ufe91\001" +
    "\002\000\042\061\ufe95\063\ufe95\064\ufe95\065\ufe95\070\ufe95" +
    "\071\ufe95\114\ufe95\115\ufe95\116\ufe95\123\ufe95\124\ufe95\126" +
    "\ufe95\130\ufe95\131\ufe95\134\ufe95\140\ufe95\001\002\000\010" +
    "\061\u0292\066\u028d\104\u028b\001\002\000\006\067\ufe94\145" +
    "\ufe94\001\002\000\006\067\ufe93\145\ufe93\001\002\000\020" +
    "\067\ufe90\136\ufe90\145\ufe90\147\ufe90\150\ufe90\151\ufe90\152" +
    "\ufe90\001\002\000\020\067\ufe8f\136\ufe8f\145\ufe8f\147\ufe8f" +
    "\150\ufe8f\151\ufe8f\152\ufe8f\001\002\000\010\073\u0297\145" +
    "\u0296\146\u01f7\001\002\000\042\061\ufe98\063\ufe98\064\ufe98" +
    "\065\ufe98\070\ufe98\071\ufe98\114\ufe98\115\ufe98\116\ufe98\123" +
    "\ufe98\124\ufe98\126\ufe98\130\ufe98\131\ufe98\134\ufe98\140\ufe98" +
    "\001\002\000\010\061\u028e\066\u028d\104\u028b\001\002\000" +
    "\006\067\u0290\145\u0299\001\002\000\042\061\ufe97\063\ufe97" +
    "\064\ufe97\065\ufe97\070\ufe97\071\ufe97\114\ufe97\115\ufe97\116" +
    "\ufe97\123\ufe97\124\ufe97\126\ufe97\130\ufe97\131\ufe97\134\ufe97" +
    "\140\ufe97\001\002\000\006\134\ufee4\140\ufee4\001\002\000" +
    "\014\061\u0228\135\u0227\150\u0223\153\u0226\154\u0225\001\002" +
    "\000\036\072\u0235\074\u0239\075\u0238\076\u023b\077\u0236\101" +
    "\u0237\102\u023c\103\u0233\104\u023a\136\u029e\147\u022d\150\u022a" +
    "\151\u022b\152\u022e\001\002\000\014\061\u0228\135\u0227\150" +
    "\u0223\153\u0226\154\u0225\001\002\000\004\125\u029f\001\002" +
    "\000\036\061\ufe86\063\ufe86\064\ufe86\065\ufe86\070\ufe86\071" +
    "\ufe86\105\ufe86\106\ufe86\107\ufe86\110\ufe86\111\ufe86\112\ufe86" +
    "\113\ufe86\121\ufe86\001\002\000\014\136\u02a1\147\u022d\150" +
    "\u022a\151\u022b\152\u022e\001\002\000\004\125\u02a2\001\002" +
    "\000\036\061\ufe87\063\ufe87\064\ufe87\065\ufe87\070\ufe87\071" +
    "\ufe87\105\ufe87\106\ufe87\107\ufe87\110\ufe87\111\ufe87\112\ufe87" +
    "\113\ufe87\121\ufe87\001\002\000\006\134\ufee6\140\ufee6\001" +
    "\002\000\006\053\ufef9\207\ufef9\001\002\000\006\134\ufee8" +
    "\140\ufee8\001\002\000\004\061\u01f6\001\002\000\010\073" +
    "\u02a9\145\u02a8\146\u01f7\001\002\000\042\061\ufea3\063\ufea3" +
    "\064\ufea3\065\ufea3\070\ufea3\071\ufea3\114\ufea3\115\ufea3\116" +
    "\ufea3\123\ufea3\124\ufea3\126\ufea3\130\ufea3\131\ufea3\134\ufea3" +
    "\140\ufea3\001\002\000\014\061\u02af\135\u02ae\150\u02aa\153" +
    "\u02ad\154\u02ab\001\002\000\014\061\u02af\135\u02ae\150\u02aa" +
    "\153\u02ad\154\u02ab\001\002\000\016\136\ufe9a\145\ufe9a\147" +
    "\ufe9a\150\ufe9a\151\ufe9a\152\ufe9a\001\002\000\014\145\u02ba" +
    "\147\u02b4\150\u02b1\151\u02b2\152\u02b5\001\002\000\016\136" +
    "\ufe9b\145\ufe9b\147\ufe9b\150\ufe9b\151\ufe9b\152\ufe9b\001\002" +
    "\000\014\061\u02af\135\u02ae\150\u02aa\153\u02ad\154\u02ab\001" +
    "\002\000\016\136\ufe99\145\ufe99\147\ufe99\150\ufe99\151\ufe99" +
    "\152\ufe99\001\002\000\014\136\u02b3\147\u02b4\150\u02b1\151" +
    "\u02b2\152\u02b5\001\002\000\014\061\u02af\135\u02ae\150\u02aa" +
    "\153\u02ad\154\u02ab\001\002\000\014\061\u02af\135\u02ae\150" +
    "\u02aa\153\u02ad\154\u02ab\001\002\000\016\136\ufe9c\145\ufe9c" +
    "\147\ufe9c\150\ufe9c\151\ufe9c\152\ufe9c\001\002\000\014\061" +
    "\u02af\135\u02ae\150\u02aa\153\u02ad\154\u02ab\001\002\000\014" +
    "\061\u02af\135\u02ae\150\u02aa\153\u02ad\154\u02ab\001\002\000" +
    "\016\136\ufe9e\145\ufe9e\147\ufe9e\150\ufe9e\151\ufe9e\152\ufe9e" +
    "\001\002\000\016\136\ufea1\145\ufea1\147\ufea1\150\ufea1\151" +
    "\u02b2\152\u02b5\001\002\000\016\136\ufe9f\145\ufe9f\147\ufe9f" +
    "\150\ufe9f\151\ufe9f\152\ufe9f\001\002\000\016\136\ufea0\145" +
    "\ufea0\147\ufea0\150\ufea0\151\u02b2\152\u02b5\001\002\000\042" +
    "\061\ufea2\063\ufea2\064\ufea2\065\ufea2\070\ufea2\071\ufea2\114" +
    "\ufea2\115\ufea2\116\ufea2\123\ufea2\124\ufea2\126\ufea2\130\ufea2" +
    "\131\ufea2\134\ufea2\140\ufea2\001\002\000\016\136\ufe9d\145" +
    "\ufe9d\147\ufe9d\150\ufe9d\151\ufe9d\152\ufe9d\001\002\000\010" +
    "\073\u02bd\145\u02be\146\u01f7\001\002\000\014\061\u02af\135" +
    "\u02ae\150\u02aa\153\u02ad\154\u02ab\001\002\000\042\061\ufea5" +
    "\063\ufea5\064\ufea5\065\ufea5\070\ufea5\071\ufea5\114\ufea5\115" +
    "\ufea5\116\ufea5\123\ufea5\124\ufea5\126\ufea5\130\ufea5\131\ufea5" +
    "\134\ufea5\140\ufea5\001\002\000\014\145\u02c0\147\u02b4\150" +
    "\u02b1\151\u02b2\152\u02b5\001\002\000\042\061\ufea4\063\ufea4" +
    "\064\ufea4\065\ufea4\070\ufea4\071\ufea4\114\ufea4\115\ufea4\116" +
    "\ufea4\123\ufea4\124\ufea4\126\ufea4\130\ufea4\131\ufea4\134\ufea4" +
    "\140\ufea4\001\002\000\004\061\u01f6\001\002\000\010\073" +
    "\u02c4\145\u02c3\146\u01f7\001\002\000\042\061\ufeab\063\ufeab" +
    "\064\ufeab\065\ufeab\070\ufeab\071\ufeab\114\ufeab\115\ufeab\116" +
    "\ufeab\123\ufeab\124\ufeab\126\ufeab\130\ufeab\131\ufeab\134\ufeab" +
    "\140\ufeab\001\002\000\006\061\u02c7\142\u02c5\001\002\000" +
    "\004\030\u02ce\001\002\000\006\145\u02c8\147\u02c9\001\002" +
    "\000\006\145\ufea6\147\ufea6\001\002\000\042\061\ufeaa\063" +
    "\ufeaa\064\ufeaa\065\ufeaa\070\ufeaa\071\ufeaa\114\ufeaa\115\ufeaa" +
    "\116\ufeaa\123\ufeaa\124\ufeaa\126\ufeaa\130\ufeaa\131\ufeaa\134" +
    "\ufeaa\140\ufeaa\001\002\000\006\061\u02cb\142\u02ca\001\002" +
    "\000\004\030\u02cc\001\002\000\006\145\ufea8\147\ufea8\001" +
    "\002\000\004\142\u02cd\001\002\000\006\145\ufea9\147\ufea9" +
    "\001\002\000\004\142\u02cf\001\002\000\006\145\ufea7\147" +
    "\ufea7\001\002\000\010\073\u02d1\145\u02d2\146\u01f7\001\002" +
    "\000\006\061\u02c7\142\u02c5\001\002\000\042\061\ufead\063" +
    "\ufead\064\ufead\065\ufead\070\ufead\071\ufead\114\ufead\115\ufead" +
    "\116\ufead\123\ufead\124\ufead\126\ufead\130\ufead\131\ufead\134" +
    "\ufead\140\ufead\001\002\000\006\145\u02d4\147\u02c9\001\002" +
    "\000\042\061\ufeac\063\ufeac\064\ufeac\065\ufeac\070\ufeac\071" +
    "\ufeac\114\ufeac\115\ufeac\116\ufeac\123\ufeac\124\ufeac\126\ufeac" +
    "\130\ufeac\131\ufeac\134\ufeac\140\ufeac\001\002\000\004\136" +
    "\u02d6\001\002\000\004\132\u02d7\001\002\000\036\061\u01ab" +
    "\063\u01bf\064\u01b0\065\u01b6\070\u01af\071\u01b7\105\u01d4\106" +
    "\u01cb\107\u01cf\110\u01c8\111\u01d8\112\u01d6\113\u01d2\121\u01ca" +
    "\001\002\000\040\061\ufe79\063\ufe79\064\ufe79\065\ufe79\070" +
    "\ufe79\071\ufe79\114\ufe79\115\ufe79\116\ufe79\123\ufe79\126\ufe79" +
    "\130\ufe79\131\ufe79\134\ufe79\140\ufe79\001\002\000\040\061" +
    "\ufe78\063\ufe78\064\ufe78\065\ufe78\070\ufe78\071\ufe78\114\ufe78" +
    "\115\ufe78\116\ufe78\123\ufe78\126\ufe78\130\ufe78\131\ufe78\134" +
    "\ufe78\140\ufe78\001\002\000\006\134\ufef0\140\ufef0\001\002" +
    "\000\042\061\u02de\066\u028d\104\u028b\105\u01d4\106\u01cb\107" +
    "\u01cf\110\u01c8\111\u01d8\112\u01d6\113\u01d2\135\u02df\141\u02e3" +
    "\142\u02dc\150\u02e5\153\u02e2\154\u02e1\001\002\000\004\030" +
    "\u02f7\001\002\000\016\067\u02e9\145\u02f6\147\u02ea\150\u02e7" +
    "\151\u02e8\152\u02eb\001\002\000\020\067\ufecc\136\ufecc\145" +
    "\ufecc\147\ufecc\150\ufecc\151\ufecc\152\ufecc\001\002\000\024" +
    "\061\u02de\066\u028d\104\u028b\135\u02df\141\u02e3\142\u02dc\150" +
    "\u02e5\153\u02e2\154\u02e1\001\002\000\020\067\ufec9\136\ufec9" +
    "\145\ufec9\147\ufec9\150\ufec9\151\ufec9\152\ufec9\001\002\000" +
    "\020\067\ufecd\136\ufecd\145\ufecd\147\ufecd\150\ufecd\151\ufecd" +
    "\152\ufecd\001\002\000\020\067\ufece\136\ufece\145\ufece\147" +
    "\ufece\150\ufece\151\ufece\152\ufece\001\002\000\004\030\u02f2" +
    "\001\002\000\004\145\u02f1\001\002\000\024\061\u02de\066" +
    "\u028d\104\u028b\135\u02df\141\u02e3\142\u02dc\150\u02e5\153\u02e2" +
    "\154\u02e1\001\002\000\020\067\ufed0\136\ufed0\145\ufed0\147" +
    "\ufed0\150\ufed0\151\ufed0\152\ufed0\001\002\000\024\061\u02de" +
    "\066\u028d\104\u028b\135\u02df\141\u02e3\142\u02dc\150\u02e5\153" +
    "\u02e2\154\u02e1\001\002\000\024\061\u02de\066\u028d\104\u028b" +
    "\135\u02df\141\u02e3\142\u02dc\150\u02e5\153\u02e2\154\u02e1\001" +
    "\002\000\024\061\u02de\066\u028d\104\u028b\135\u02df\141\u02e3" +
    "\142\u02dc\150\u02e5\153\u02e2\154\u02e1\001\002\000\024\061" +
    "\u02de\066\u028d\104\u028b\135\u02df\141\u02e3\142\u02dc\150\u02e5" +
    "\153\u02e2\154\u02e1\001\002\000\024\061\u02de\066\u028d\104" +
    "\u028b\135\u02df\141\u02e3\142\u02dc\150\u02e5\153\u02e2\154\u02e1" +
    "\001\002\000\020\067\u02e9\136\ufed2\145\ufed2\147\ufed2\150" +
    "\ufed2\151\ufed2\152\ufed2\001\002\000\020\067\u02e9\136\ufed5" +
    "\145\ufed5\147\ufed5\150\ufed5\151\u02e8\152\u02eb\001\002\000" +
    "\020\067\ufed1\136\ufed1\145\ufed1\147\ufed1\150\ufed1\151\ufed1" +
    "\152\ufed1\001\002\000\020\067\u02e9\136\ufed3\145\ufed3\147" +
    "\ufed3\150\ufed3\151\ufed3\152\ufed3\001\002\000\020\067\u02e9" +
    "\136\ufed4\145\ufed4\147\ufed4\150\ufed4\151\u02e8\152\u02eb\001" +
    "\002\000\042\061\ufed6\063\ufed6\064\ufed6\065\ufed6\070\ufed6" +
    "\071\ufed6\114\ufed6\115\ufed6\116\ufed6\123\ufed6\124\ufed6\126" +
    "\ufed6\130\ufed6\131\ufed6\134\ufed6\140\ufed6\001\002\000\004" +
    "\141\u02f3\001\002\000\020\067\ufecb\136\ufecb\145\ufecb\147" +
    "\ufecb\150\ufecb\151\ufecb\152\ufecb\001\002\000\016\067\u02e9" +
    "\136\u02f5\147\u02ea\150\u02e7\151\u02e8\152\u02eb\001\002\000" +
    "\020\067\ufecf\136\ufecf\145\ufecf\147\ufecf\150\ufecf\151\ufecf" +
    "\152\ufecf\001\002\000\042\061\ufed7\063\ufed7\064\ufed7\065" +
    "\ufed7\070\ufed7\071\ufed7\114\ufed7\115\ufed7\116\ufed7\123\ufed7" +
    "\124\ufed7\126\ufed7\130\ufed7\131\ufed7\134\ufed7\140\ufed7\001" +
    "\002\000\004\142\u02f8\001\002\000\020\067\ufeca\136\ufeca" +
    "\145\ufeca\147\ufeca\150\ufeca\151\ufeca\152\ufeca\001\002\000" +
    "\006\134\ufee0\140\ufee0\001\002\000\006\134\ufef2\140\ufef2" +
    "\001\002\000\004\136\u02fc\001\002\000\004\145\u02fd\001" +
    "\002\000\040\061\ufe6a\063\ufe6a\064\ufe6a\065\ufe6a\070\ufe6a" +
    "\071\ufe6a\114\ufe6a\115\ufe6a\116\ufe6a\123\ufe6a\126\ufe6a\130" +
    "\ufe6a\131\ufe6a\134\ufe6a\140\ufe6a\001\002\000\004\207\ufefd" +
    "\001\002\000\004\207\ufefb\001\002\000\032\075\ufefe\162" +
    "\ufefe\164\ufefe\166\ufefe\170\ufefe\172\ufefe\174\ufefe\176\ufefe" +
    "\200\ufefe\204\ufefe\205\ufefe\206\ufefe\001\002\000\032\075" +
    "\uff01\162\uff01\164\uff01\166\uff01\170\uff01\172\uff01\174\uff01" +
    "\176\uff01\200\uff01\204\uff01\205\uff01\206\uff01\001\002\000" +
    "\032\075\uff00\162\uff00\164\uff00\166\uff00\170\uff00\172\uff00" +
    "\174\uff00\176\uff00\200\uff00\204\uff00\205\uff00\206\uff00\001" +
    "\002\000\004\136\u0304\001\002\000\004\137\u0305\001\002" +
    "\000\036\061\u01ab\063\u01bf\064\u01b0\065\u01b6\070\u01af\071" +
    "\u01b7\114\u01bd\115\u01a8\116\u01b9\123\u01b4\126\u01c2\130\u01b8" +
    "\131\u01ae\140\u0306\001\002\000\006\053\ufef6\207\ufef6\001" +
    "\002\000\004\140\u0308\001\002\000\006\053\ufef7\207\ufef7" +
    "\001\002\000\006\030\u033a\163\u033b\001\002\000\014\022" +
    "\u0310\027\u0319\033\u0316\036\u0318\157\u0314\001\002\000\004" +
    "\077\u030c\001\002\000\006\030\u030d\163\u030e\001\002\000" +
    "\004\163\u030f\001\002\000\032\075\uffcb\162\uffcb\164\uffcb" +
    "\166\uffcb\170\uffcb\172\uffcb\174\uffcb\176\uffcb\200\uffcb\204" +
    "\uffcb\205\uffcb\206\uffcb\001\002\000\032\075\uffcc\162\uffcc" +
    "\164\uffcc\166\uffcc\170\uffcc\172\uffcc\174\uffcc\176\uffcc\200" +
    "\uffcc\204\uffcc\205\uffcc\206\uffcc\001\002\000\004\073\u0334" +
    "\001\002\000\004\140\u0332\001\002\000\004\140\u0330\001" +
    "\002\000\004\140\u032e\001\002\000\004\073\u032a\001\002" +
    "\000\004\140\u0328\001\002\000\004\073\u0324\001\002\000" +
    "\004\140\u0322\001\002\000\004\073\u031e\001\002\000\004" +
    "\073\u031a\001\002\000\004\141\u031b\001\002\000\004\161" +
    "\u031c\001\002\000\004\141\u031d\001\002\000\004\140\uffbe" +
    "\001\002\000\004\141\u031f\001\002\000\004\031\u0320\001" +
    "\002\000\004\141\u0321\001\002\000\004\140\uffbb\001\002" +
    "\000\006\077\uffc1\137\u030a\001\002\000\004\077\uffc6\001" +
    "\002\000\004\141\u0325\001\002\000\004\160\u0326\001\002" +
    "\000\004\141\u0327\001\002\000\004\140\uffbc\001\002\000" +
    "\006\077\uffc2\137\u030a\001\002\000\004\077\uffc7\001\002" +
    "\000\004\141\u032b\001\002\000\004\032\u032c\001\002\000" +
    "\004\141\u032d\001\002\000\004\140\uffbd\001\002\000\006" +
    "\077\uffc0\137\u030a\001\002\000\004\077\uffc5\001\002\000" +
    "\006\077\uffbf\137\u030a\001\002\000\004\077\uffc4\001\002" +
    "\000\006\077\uffc3\137\u030a\001\002\000\004\077\uffc8\001" +
    "\002\000\004\141\u0335\001\002\000\006\057\u0336\060\u0337" +
    "\001\002\000\004\141\u0339\001\002\000\004\141\u0338\001" +
    "\002\000\004\140\uffba\001\002\000\004\140\uffb9\001\002" +
    "\000\004\163\u033c\001\002\000\032\075\uffc9\162\uffc9\164" +
    "\uffc9\166\uffc9\170\uffc9\172\uffc9\174\uffc9\176\uffc9\200\uffc9" +
    "\204\uffc9\205\uffc9\206\uffc9\001\002\000\032\075\uffca\162" +
    "\uffca\164\uffca\166\uffca\170\uffca\172\uffca\174\uffca\176\uffca" +
    "\200\uffca\204\uffca\205\uffca\206\uffca\001\002\000\032\075" +
    "\uffda\162\uffda\164\uffda\166\uffda\170\uffda\172\uffda\174\uffda" +
    "\176\uffda\200\uffda\204\uffda\205\uffda\206\uffda\001\002\000" +
    "\032\075\uffd4\162\uffd4\164\uffd4\166\uffd4\170\uffd4\172\uffd4" +
    "\174\uffd4\176\uffd4\200\uffd4\204\uffd4\205\uffd4\206\uffd4\001" +
    "\002\000\032\075\uffd2\162\uffd2\164\uffd2\166\uffd2\170\uffd2" +
    "\172\uffd2\174\uffd2\176\uffd2\200\uffd2\204\uffd2\205\uffd2\206" +
    "\uffd2\001\002\000\006\020\u0135\152\u0349\001\002\000\032" +
    "\075\uffde\162\uffde\164\uffde\166\uffde\170\uffde\172\uffde\174" +
    "\uffde\176\uffde\200\uffde\204\uffde\205\uffde\206\uffde\001\002" +
    "\000\032\075\uffd8\162\uffd8\164\uffd8\166\uffd8\170\uffd8\172" +
    "\uffd8\174\uffd8\176\uffd8\200\uffd8\204\uffd8\205\uffd8\206\uffd8" +
    "\001\002\000\032\075\uffce\162\uffce\164\uffce\166\uffce\170" +
    "\uffce\172\uffce\174\uffce\176\uffce\200\uffce\204\uffce\205\uffce" +
    "\206\uffce\001\002\000\032\075\uffd6\162\uffd6\164\uffd6\166" +
    "\uffd6\170\uffd6\172\uffd6\174\uffd6\176\uffd6\200\uffd6\204\uffd6" +
    "\205\uffd6\206\uffd6\001\002\000\032\075\uffdc\162\uffdc\164" +
    "\uffdc\166\uffdc\170\uffdc\172\uffdc\174\uffdc\176\uffdc\200\uffdc" +
    "\204\uffdc\205\uffdc\206\uffdc\001\002\000\032\075\uffe2\162" +
    "\uffe2\164\uffe2\166\uffe2\170\uffe2\172\uffe2\174\uffe2\176\uffe2" +
    "\200\uffe2\204\uffe2\205\uffe2\206\uffe2\001\002\000\032\075" +
    "\uffe0\162\uffe0\164\uffe0\166\uffe0\170\uffe0\172\uffe0\174\uffe0" +
    "\176\uffe0\200\uffe0\204\uffe0\205\uffe0\206\uffe0\001\002\000" +
    "\032\075\uffd0\162\uffd0\164\uffd0\166\uffd0\170\uffd0\172\uffd0" +
    "\174\uffd0\176\uffd0\200\uffd0\204\uffd0\205\uffd0\206\uffd0\001" +
    "\002\000\004\010\u034a\001\002\000\004\077\u034b\001\002" +
    "\000\004\075\uffe5\001\002\000\032\075\uff1a\162\uff1a\164" +
    "\uff1a\166\uff1a\170\uff1a\172\uff1a\174\uff1a\176\uff1a\200\uff1a" +
    "\204\uff1a\205\uff1a\206\uff1a\001\002\000\004\077\u034c\001" +
    "\002\000\020\022\u0354\026\u0357\027\u035e\033\u0359\036\u035c" +
    "\042\u0361\157\u0358\001\002\000\032\075\067\162\061\164" +
    "\100\166\054\170\104\172\072\174\075\176\064\200\066" +
    "\204\055\205\u0352\206\071\001\002\000\032\075\067\162" +
    "\061\164\100\166\054\170\104\172\072\174\075\176\064" +
    "\200\066\204\055\205\u0352\206\071\001\002\000\032\075" +
    "\uff1c\162\uff1c\164\uff1c\166\uff1c\170\uff1c\172\uff1c\174\uff1c" +
    "\176\uff1c\200\uff1c\204\uff1c\205\uff1c\206\uff1c\001\002\000" +
    "\032\075\uff19\162\uff19\164\uff19\166\uff19\170\uff19\172\uff19" +
    "\174\uff19\176\uff19\200\uff19\204\uff19\205\uff19\206\uff19\001" +
    "\002\000\032\075\uff1d\162\uff1d\164\uff1d\166\uff1d\170\uff1d" +
    "\172\uff1d\174\uff1d\176\uff1d\200\uff1d\204\uff1d\205\uff1d\206" +
    "\uff1d\001\002\000\004\073\u038a\001\002\000\004\140\u0388" +
    "\001\002\000\004\140\u0386\001\002\000\004\073\u0380\001" +
    "\002\000\004\073\u037c\001\002\000\004\073\u0378\001\002" +
    "\000\004\140\u0376\001\002\000\004\140\u0374\001\002\000" +
    "\004\073\u0370\001\002\000\004\140\u036e\001\002\000\004" +
    "\073\u036a\001\002\000\004\140\u0368\001\002\000\004\140" +
    "\u0366\001\002\000\004\073\u0362\001\002\000\004\141\u0363" +
    "\001\002\000\004\043\u0364\001\002\000\004\141\u0365\001" +
    "\002\000\004\140\uff02\001\002\000\006\077\uff10\137\u034e" +
    "\001\002\000\004\077\uff17\001\002\000\006\077\uff11\137" +
    "\u034e\001\002\000\004\077\uff18\001\002\000\004\141\u036b" +
    "\001\002\000\004\161\u036c\001\002\000\004\141\u036d\001" +
    "\002\000\004\140\uff0a\001\002\000\006\077\uff0c\137\u034e" +
    "\001\002\000\004\077\uff13\001\002\000\004\141\u0371\001" +
    "\002\000\004\031\u0372\001\002\000\004\141\u0373\001\002" +
    "\000\004\140\uff07\001\002\000\006\077\uff0f\137\u034e\001" +
    "\002\000\004\077\uff16\001\002\000\006\077\uff0b\137\u034e" +
    "\001\002\000\004\077\uff12\001\002\000\004\141\u0379\001" +
    "\002\000\004\160\u037a\001\002\000\004\141\u037b\001\002" +
    "\000\004\140\uff08\001\002\000\004\141\u037d\001\002\000" +
    "\004\032\u037e\001\002\000\004\141\u037f\001\002\000\004" +
    "\140\uff09\001\002\000\004\141\u0381\001\002\000\006\057" +
    "\u0382\060\u0383\001\002\000\004\141\u0385\001\002\000\004" +
    "\141\u0384\001\002\000\004\140\uff05\001\002\000\004\140" +
    "\uff06\001\002\000\006\077\uff0e\137\u034e\001\002\000\004" +
    "\077\uff15\001\002\000\006\077\uff0d\137\u034e\001\002\000" +
    "\004\077\uff14\001\002\000\004\141\u038b\001\002\000\006" +
    "\057\u038c\060\u038d\001\002\000\004\141\u038f\001\002\000" +
    "\004\141\u038e\001\002\000\004\140\uff04\001\002\000\004" +
    "\140\uff03\001\002\000\032\075\067\162\061\164\100\166" +
    "\054\170\104\172\072\174\075\176\064\200\066\204\055" +
    "\205\u0352\206\071\001\002\000\032\075\067\162\061\164" +
    "\100\166\054\170\104\172\072\174\075\176\064\200\066" +
    "\204\055\205\u0352\206\071\001\002\000\032\075\uff1e\162" +
    "\uff1e\164\uff1e\166\uff1e\170\uff1e\172\uff1e\174\uff1e\176\uff1e" +
    "\200\uff1e\204\uff1e\205\uff1e\206\uff1e\001\002\000\032\075" +
    "\uff1f\162\uff1f\164\uff1f\166\uff1f\170\uff1f\172\uff1f\174\uff1f" +
    "\176\uff1f\200\uff1f\204\uff1f\205\uff1f\206\uff1f\001\002\000" +
    "\004\077\u03c4\001\002\000\006\030\u03c1\167\u03c2\001\002" +
    "\000\014\022\u0397\027\u03a0\033\u039d\036\u039f\157\u039c\001" +
    "\002\000\004\073\u03bb\001\002\000\004\140\u03b9\001\002" +
    "\000\004\140\u03b7\001\002\000\004\140\u03b5\001\002\000" +
    "\004\140\u03b3\001\002\000\004\073\u03af\001\002\000\004" +
    "\073\u03ab\001\002\000\004\140\u03a9\001\002\000\004\073" +
    "\u03a5\001\002\000\004\073\u03a1\001\002\000\004\141\u03a2" +
    "\001\002\000\004\161\u03a3\001\002\000\004\141\u03a4\001" +
    "\002\000\004\140\uff95\001\002\000\004\141\u03a6\001\002" +
    "\000\004\031\u03a7\001\002\000\004\141\u03a8\001\002\000" +
    "\004\140\uff92\001\002\000\006\077\uff98\137\u0396\001\002" +
    "\000\004\077\uff9d\001\002\000\004\141\u03ac\001\002\000" +
    "\004\160\u03ad\001\002\000\004\141\u03ae\001\002\000\004" +
    "\140\uff93\001\002\000\004\141\u03b0\001\002\000\004\032" +
    "\u03b1\001\002\000\004\141\u03b2\001\002\000\004\140\uff94" +
    "\001\002\000\006\077\uff99\137\u0396\001\002\000\004\077" +
    "\uff9e\001\002\000\006\077\uff97\137\u0396\001\002\000\004" +
    "\077\uff9c\001\002\000\006\077\uff96\137\u0396\001\002\000" +
    "\004\077\uff9b\001\002\000\006\077\uff9a\137\u0396\001\002" +
    "\000\004\077\uff9f\001\002\000\004\141\u03bc\001\002\000" +
    "\006\057\u03bd\060\u03be\001\002\000\004\141\u03c0\001\002" +
    "\000\004\141\u03bf\001\002\000\004\140\uff91\001\002\000" +
    "\004\140\uff90\001\002\000\004\167\u03c3\001\002\000\032" +
    "\075\uffa0\162\uffa0\164\uffa0\166\uffa0\170\uffa0\172\uffa0\174" +
    "\uffa0\176\uffa0\200\uffa0\204\uffa0\205\uffa0\206\uffa0\001\002" +
    "\000\032\075\uffa1\162\uffa1\164\uffa1\166\uffa1\170\uffa1\172" +
    "\uffa1\174\uffa1\176\uffa1\200\uffa1\204\uffa1\205\uffa1\206\uffa1" +
    "\001\002\000\006\030\u03c5\167\u03c6\001\002\000\004\167" +
    "\u03c7\001\002\000\032\075\uffa2\162\uffa2\164\uffa2\166\uffa2" +
    "\170\uffa2\172\uffa2\174\uffa2\176\uffa2\200\uffa2\204\uffa2\205" +
    "\uffa2\206\uffa2\001\002\000\032\075\uffa3\162\uffa3\164\uffa3" +
    "\166\uffa3\170\uffa3\172\uffa3\174\uffa3\176\uffa3\200\uffa3\204" +
    "\uffa3\205\uffa3\206\uffa3\001\002\000\004\141\u03c9\001\002" +
    "\000\006\057\u03ca\060\u03cb\001\002\000\004\141\u03cd\001" +
    "\002\000\004\141\u03cc\001\002\000\004\140\uffe3\001\002" +
    "\000\004\140\uffe4\001\002\000\004\077\u03cf\001\002\000" +
    "\030\075\067\162\061\164\100\166\054\170\104\172\072" +
    "\174\075\176\064\200\066\204\055\206\071\001\002\000" +
    "\030\075\u03d1\162\061\164\100\166\054\170\104\172\072" +
    "\174\075\176\064\200\066\204\055\206\071\001\002\000" +
    "\006\020\u0135\152\u03d2\001\002\000\004\010\u03d3\001\002" +
    "\000\004\077\u03d4\001\002\000\004\075\uffe6\001\002\000" +
    "\004\152\u03d6\001\002\000\004\004\u03d7\001\002\000\004" +
    "\077\u03d8\001\002\000\004\002\ufffe\001\002\000\004\077" +
    "\u03da\001\002\000\010\003\u03dd\075\u03de\143\u03e1\001\002" +
    "\000\004\075\u0404\001\002\000\006\003\u03dd\075\u03fe\001" +
    "\002\000\006\075\uffea\143\uffea\001\002\000\006\007\u03e8" +
    "\152\u03e7\001\002\000\004\075\uffef\001\002\000\006\075" +
    "\uffee\143\u03e1\001\002\000\006\030\u03e3\144\u03e2\001\002" +
    "\000\006\003\uffe8\075\uffe8\001\002\000\004\144\u03e4\001" +
    "\002\000\006\003\uffe9\075\uffe9\001\002\000\004\075\uffed" +
    "\001\002\000\004\075\ufff1\001\002\000\004\005\u03fc\001" +
    "\002\000\004\137\u03e9\001\002\000\006\024\u03eb\140\u03ec" +
    "\001\002\000\004\140\u03f6\001\002\000\004\073\u03f2\001" +
    "\002\000\004\077\u03ed\001\002\000\004\075\u03ee\001\002" +
    "\000\004\152\u03ef\001\002\000\004\007\u03f0\001\002\000" +
    "\004\077\u03f1\001\002\000\006\075\uffeb\143\uffeb\001\002" +
    "\000\004\141\u03f3\001\002\000\004\030\u03f4\001\002\000" +
    "\004\141\u03f5\001\002\000\004\140\uffe7\001\002\000\004" +
    "\077\u03f7\001\002\000\004\075\u03f8\001\002\000\004\152" +
    "\u03f9\001\002\000\004\007\u03fa\001\002\000\004\077\u03fb" +
    "\001\002\000\006\075\uffec\143\uffec\001\002\000\004\077" +
    "\u03fd\001\002\000\004\075\ufff3\001\002\000\006\007\u03e8" +
    "\152\u0401\001\002\000\004\075\ufff0\001\002\000\004\075" +
    "\uffee\001\002\000\004\005\u0402\001\002\000\004\077\u0403" +
    "\001\002\000\004\075\ufff4\001\002\000\004\152\u0405\001" +
    "\002\000\004\005\u0406\001\002\000\004\077\u0407\001\002" +
    "\000\004\075\ufff5\001\002\000\006\003\041\075\042\001" +
    "\002\000\004\075\045\001\002\000\004\075\u040b\001\002" +
    "\000\004\152\u040c\001\002\000\004\004\u040d\001\002\000" +
    "\004\077\u040e\001\002\000\004\002\uffff\001\002\000\004" +
    "\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u040d\000\006\002\005\142\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\007" +
    "\001\001\000\002\001\001\000\004\010\042\001\001\000" +
    "\004\003\037\001\001\000\006\013\016\014\014\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\017\056\020\100\022\101\031\067\040" +
    "\076\047\072\057\062\066\075\100\057\107\064\117\102" +
    "\127\055\132\073\133\061\001\001\000\004\037\u0393\001" +
    "\001\000\002\001\001\000\006\116\u034c\131\u034e\001\001" +
    "\000\034\020\u0346\022\u0345\031\u0340\040\u0344\047\u0341\057" +
    "\u033d\066\u0343\100\u033c\107\u033e\117\u0347\127\055\132\u0342" +
    "\133\061\001\001\000\002\001\001\000\004\021\u030a\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\056\u016e" +
    "\001\001\000\002\001\001\000\004\106\u0138\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\046\372\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\065\266\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\030\200\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\077\104\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\076\115\101\110\102" +
    "\111\103\117\104\112\105\113\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\077\140\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\077\146\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\077\154\001\001\000\002\001\001\000\004" +
    "\077\156\001\001\000\002\001\001\000\004\077\160\001" +
    "\001\000\002\001\001\000\004\077\162\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\032" +
    "\205\033\204\034\210\035\207\036\206\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\030\236\001\001\000\002\001\001\000\004\030\240\001" +
    "\001\000\002\001\001\000\004\030\242\001\001\000\002" +
    "\001\001\000\004\030\244\001\001\000\002\001\001\000" +
    "\004\030\246\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\067\302\070\310\071\307\072\274\073\300\074" +
    "\275\075\305\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\065\312\001\001\000\002\001\001" +
    "\000\004\065\314\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\065\322\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\065\334\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\065\342\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\065\356\001\001\000\002\001\001\000\004" +
    "\065\360\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\050\375\051\u0103\052\u0101\053\377\054\u0108\055" +
    "\u0102\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\046\u010a\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\046\u011c\001" +
    "\001\000\002\001\001\000\004\046\u011e\001\001\000\002" +
    "\001\001\000\004\046\u0120\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\046\u0126\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\046\u012c\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\110\u0148\111\u014a\112\u0143\113\u0142\114\u0144\001" +
    "\001\000\002\001\001\000\004\115\u013a\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\115\u013f\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\106\u014c\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\106\u0152\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\106\u0160" +
    "\001\001\000\002\001\001\000\004\106\u0162\001\001\000" +
    "\002\001\001\000\004\106\u0164\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\060\u0174\061\u0176\062" +
    "\u017c\063\u017b\064\u0175\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\056\u017e\001\001\000\002\001\001\000" +
    "\004\056\u0180\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\056\u0192\001" +
    "\001\000\002\001\001\000\004\056\u0194\001\001\000\002" +
    "\001\001\000\004\056\u0196\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\135\u01a0\136\u01a2\137\u01a3\140\u01a5\141\u01a4" +
    "\001\001\000\002\001\001\000\004\134\u0301\001\001\000" +
    "\002\001\001\000\004\134\u0300\001\001\000\010\135\u02fe" +
    "\137\u01a3\140\u01a5\001\001\000\010\135\u02fd\137\u01a3\140" +
    "\u01a5\001\001\000\002\001\001\000\034\144\u01b0\147\u01b2" +
    "\152\u01b9\153\u01b4\154\u01ba\155\u01a9\162\u01b1\163\u01bd\167" +
    "\u01bb\171\u01a8\174\u01ac\175\u01bf\177\u01c0\001\001\000\002" +
    "\001\001\000\034\144\u01b0\147\u01b2\152\u01b9\153\u01b4\154" +
    "\u01ba\155\u01a9\162\u02f9\163\u01bd\167\u01bb\171\u01a8\174\u01ac" +
    "\175\u01bf\177\u01c0\001\001\000\034\144\u01b0\147\u01b2\152" +
    "\u01b9\153\u01b4\154\u01ba\155\u01a9\162\u02f8\163\u01bd\167\u01bb" +
    "\171\u01a8\174\u01ac\175\u01bf\177\u01c0\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\144\u01b0\147\u01b2\152\u01b9" +
    "\153\u01b4\154\u01ba\155\u01a9\162\u02d9\163\u01bd\167\u01bb\171" +
    "\u01a8\174\u01ac\175\u01bf\177\u01c0\001\001\000\002\001\001" +
    "\000\004\164\u02c1\001\001\000\004\164\u02a6\001\001\000" +
    "\034\144\u01b0\147\u01b2\152\u01b9\153\u01b4\154\u01ba\155\u01a9" +
    "\162\u02a4\163\u01bd\167\u01bb\171\u01a8\174\u01ac\175\u01bf\177" +
    "\u01c0\001\001\000\002\001\001\000\034\144\u01b0\147\u01b2" +
    "\152\u01b9\153\u01b4\154\u01ba\155\u01a9\162\u02a2\163\u01bd\167" +
    "\u01bb\171\u01a8\174\u01ac\175\u01bf\177\u01c0\001\001\000\002" +
    "\001\001\000\034\144\u01b0\147\u01b2\152\u01b9\153\u01b4\154" +
    "\u01ba\155\u01a9\162\u0299\163\u01bd\167\u01bb\171\u01a8\174\u01ac" +
    "\175\u01bf\177\u01c0\001\001\000\004\164\u0286\001\001\000" +
    "\004\164\u0264\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\143\u01d0\145\u0218\146\u0217\163\u01d2\167\u01cf\171" +
    "\u01c8\174\u01cb\175\u01d4\177\u01d6\001\001\000\034\144\u01b0" +
    "\147\u01b2\152\u01b9\153\u01b4\154\u01ba\155\u01a9\162\u0216\163" +
    "\u01bd\167\u01bb\171\u01a8\174\u01ac\175\u01bf\177\u01c0\001\001" +
    "\000\034\144\u01b0\147\u01b2\152\u01b9\153\u01b4\154\u01ba\155" +
    "\u01a9\162\u0215\163\u01bd\167\u01bb\171\u01a8\174\u01ac\175\u01bf" +
    "\177\u01c0\001\001\000\002\001\001\000\034\144\u01b0\147" +
    "\u01b2\152\u01b9\153\u01b4\154\u01ba\155\u01a9\162\u0210\163\u01bd" +
    "\167\u01bb\171\u01a8\174\u01ac\175\u01bf\177\u01c0\001\001\000" +
    "\004\164\u01f4\001\001\000\034\144\u01b0\147\u01b2\152\u01b9" +
    "\153\u01b4\154\u01ba\155\u01a9\162\u01f2\163\u01bd\167\u01bb\171" +
    "\u01a8\174\u01ac\175\u01bf\177\u01c0\001\001\000\034\144\u01b0" +
    "\147\u01b2\152\u01b9\153\u01b4\154\u01ba\155\u01a9\162\u01f1\163" +
    "\u01bd\167\u01bb\171\u01a8\174\u01ac\175\u01bf\177\u01c0\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\143\u01d0\145\u01cd" +
    "\146\u01cc\163\u01d2\167\u01cf\171\u01c8\174\u01cb\175\u01d4\177" +
    "\u01d6\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\144\u01b0\147\u01b2\152\u01b9" +
    "\153\u01b4\154\u01ba\155\u01a9\162\u01e9\163\u01bd\167\u01bb\171" +
    "\u01a8\174\u01ac\175\u01bf\177\u01c0\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\164" +
    "\u020b\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\165\u01fa\001\001\000" +
    "\004\165\u0209\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\165\u01fe\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\165\u0207\001\001\000\004\165\u0206\001\001" +
    "\000\002\001\001\000\004\165\u0205\001\001\000\004\165" +
    "\u0204\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\165\u020e\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\150\u024f\151\u0250\001\001\000\006" +
    "\150\u021a\151\u021b\001\001\000\024\143\u01d0\145\u0220\146" +
    "\u021e\163\u01d2\167\u01cf\171\u01c8\174\u01cb\175\u01d4\177\u01d6" +
    "\001\001\000\004\151\u021d\001\001\000\002\001\001\000" +
    "\024\143\u01d0\145\u0220\146\u021e\163\u01d2\167\u01cf\171\u01c8" +
    "\174\u01cb\175\u01d4\177\u01d6\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\157\u0223\001\001\000\004\157\u0241\001\001\000\004\160" +
    "\u0233\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\157\u0228\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\157\u0231\001\001\000\004\157\u0230\001\001\000\002" +
    "\001\001\000\004\157\u022f\001\001\000\004\157\u022e\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\157\u023c\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\143\u01d0\145\u0240\146\u023f\163\u01d2\167" +
    "\u01cf\171\u01c8\174\u01cb\175\u01d4\177\u01d6\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\157\u0244\001\001\000\004\160\u0245\001\001" +
    "\000\004\157\u024a\001\001\000\002\001\001\000\024\143" +
    "\u01d0\145\u0249\146\u0248\163\u01d2\167\u01cf\171\u01c8\174\u01cb" +
    "\175\u01d4\177\u01d6\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\143\u01d0" +
    "\145\u024e\146\u024d\163\u01d2\167\u01cf\171\u01c8\174\u01cb\175" +
    "\u01d4\177\u01d6\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\151\u0251\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\156\u0256\164\u0259\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\164\u027c\001" +
    "\001\000\002\001\001\000\010\143\u0269\172\u0267\173\u026b" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\143\u0280\172\u027f" +
    "\173\u0281\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\164\u0294\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\200\u028b\201\u0289\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\201\u0290" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\200\u0297\201\u0289\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\157\u029b\001\001" +
    "\000\004\160\u029c\001\001\000\004\157\u029f\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\164\u02bb\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\166\u02ab\001\001\000" +
    "\004\166\u02ba\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\166\u02af\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\166\u02b8\001\001\000\004" +
    "\166\u02b7\001\001\000\002\001\001\000\004\166\u02b6\001" +
    "\001\000\004\166\u02b5\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\166\u02be" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\164\u02cf\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\176\u02c5\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\176\u02d2\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\143\u01d0\145\u02d8\146\u02d7\163" +
    "\u01d2\167\u01cf\171\u01c8\174\u01cb\175\u01d4\177\u01d6\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\143\u02e3\170\u02dc\201\u02df\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\170\u02f3\201" +
    "\u02df\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\170" +
    "\u02e5\201\u02df\001\001\000\002\001\001\000\006\170\u02ef" +
    "\201\u02df\001\001\000\006\170\u02ee\201\u02df\001\001\000" +
    "\006\170\u02ed\201\u02df\001\001\000\006\170\u02ec\201\u02df" +
    "\001\001\000\006\170\u02eb\201\u02df\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\144\u01b0\147\u01b2\152" +
    "\u01b9\153\u01b4\154\u01ba\155\u01a9\162\u0306\163\u01bd\167\u01bb" +
    "\171\u01a8\174\u01ac\175\u01bf\177\u01c0\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\023\u0310\024\u0314\025\u0316\026\u0312\027\u0311\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\u0322\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\u0328\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\u032e\001\001\000\002\001\001\000" +
    "\004\021\u0330\001\001\000\002\001\001\000\004\021\u0332" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\131\u038f\001\001\000\020\120\u035e\121" +
    "\u035f\122\u035c\123\u035a\124\u0355\125\u0354\126\u0359\001\001" +
    "\000\040\017\u034f\020\100\022\101\031\067\040\076\047" +
    "\072\057\062\066\075\100\057\107\064\117\102\127\055" +
    "\130\u0350\132\073\133\061\001\001\000\036\020\u0346\022" +
    "\u0345\031\u0340\040\u0344\047\u0341\057\u033d\066\u0343\100\u033c" +
    "\107\u033e\117\u0347\127\055\130\u0352\132\u0342\133\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\116\u0366\001\001" +
    "\000\002\001\001\000\004\116\u0368\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\116\u036e\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\116\u0374\001\001\000\002\001" +
    "\001\000\004\116\u0376\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\116\u0386\001\001\000\002\001\001\000" +
    "\004\116\u0388\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\017\u0390\020\100" +
    "\022\101\031\067\040\076\047\072\057\062\066\075\100" +
    "\057\107\064\117\102\127\055\130\u0391\132\073\133\061" +
    "\001\001\000\036\020\u0346\022\u0345\031\u0340\040\u0344\047" +
    "\u0341\057\u033d\066\u0343\100\u033c\107\u033e\117\u0347\127\055" +
    "\130\u0392\132\u0342\133\061\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\041\u0397\042\u039a\043\u039d\044\u0399\045\u0398\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\037\u03a9\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\037\u03b3" +
    "\001\001\000\002\001\001\000\004\037\u03b5\001\001\000" +
    "\002\001\001\000\004\037\u03b7\001\001\000\002\001\001" +
    "\000\004\037\u03b9\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\017\u03cf\020\100\022\101\031\067\040\076\047\072" +
    "\057\062\066\075\100\057\107\064\117\102\127\055\132" +
    "\073\133\061\001\001\000\034\020\u0346\022\u0345\031\u0340" +
    "\040\u0344\047\u0341\057\u033d\066\u0343\100\u033c\107\u033e\117" +
    "\u0347\127\055\132\u0342\133\061\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\004\u03da\005\u03de\007" +
    "\u03db\011\u03df\001\001\000\002\001\001\000\006\005\u03fe" +
    "\011\u03ff\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\006\u03e5\007\u03e4\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\u03e9\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\u0408\001\001\000\004\015\u0409\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	boolean banderaDiv=false;
	private Symbol sym;
	//lista errores sintacticos
	ArrayList<String> sintaxERROR = new ArrayList<String>();
	ArrayList<Metodo> lstMetodos = new ArrayList();

	ArrayList<Variable> lstVariable = new ArrayList();
	IntegerV integ= new IntegerV();
	StringV string = new StringV();
	BooleanV bool= new BooleanV();
	DecimalV decimal= new DecimalV();
	CharV cha= new CharV();


	ArrayList<String> Variables = new ArrayList<String>();

	ArrayList<Html> listHtml = new ArrayList<>();

	ArrayList<Body> listB = new ArrayList<>();
	ArrayList<Body> listC = new ArrayList<>();
	
	

	//OBJETOS HTML
	Html2 html=new Html2();
	Head head=new Head();
	Body body= new Body();
	Spam spam= new Spam();
	Input input = new Input();
	TextArea area=new TextArea();
	Select select= new Select();
	H1 h1= new H1();
	Div div= new Div();
	DivC divc= new DivC();
	Br br= new Br();
	P p= new P();
	Button button = new Button();
	Img img= new Img();
	Script script= new Script();
	Script2 script2= new Script2();
	Proceso proceso = new Proceso();
	Onload only= new Onload();
	CierraCorchete close= new CierraCorchete();

	IF iff= new IF();

	//METODOS ESPECIALES
	ASC asc= new ASC();
	DESC desc= new DESC();
	EXIT exit= new EXIT();
	LETIMPAR_NUM impar= new LETIMPAR_NUM();
	LETPAR_NUM par = new LETPAR_NUM();
	ALERT_INFO alert= new ALERT_INFO();
	CARACTER_ALEATORIO caracter= new CARACTER_ALEATORIO();
	NUM_ALEATORIO numero= new NUM_ALEATORIO();
	REVERSE reverse= new REVERSE();
	REDIRECT redirect= new REDIRECT();
	Asignacion asignacion= new Asignacion();



	//constructor
	public parser( LexerCup lex){
	 super(lex);
	}
	public void report_error(String message, Object info){
		System.out.println("\nREPORT ERROR");
	}
	public void report_fatal_error(String message, Object info){
		System.out.println("\nREPORT FATAL");
	}
	public void syntax_error(Symbol curl_token){
		sintaxERROR.add("\nSe esperaba: "+symbl_name_from_id(expected_token_ids().get(0)) +"\n"
		+" Columna: "+cur_token.right+" Linea: "+cur_token.left+" Valor:"+cur_token.value);

		System.out.println("\nSE ESPERABA: "+symbl_name_from_id(expected_token_ids().get(0)));
        System.out.println("syntaxerr: " + symbl_name_from_id(cur_token.sym) +" Columna: "+cur_token.right+" Linea: "+cur_token.left+" Valor:"+cur_token.value);
	}
	


	public void prueba(Symbol curl_token){
		System.out.println("----HEYYYY :"+cur_token.right);
	}
	public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        	System.out.println("Error síntactico  " +  (s.left)+ " columna "+(s.right)+". palabra " + s.value ); 
    	}
		protected int error_sync_size() {
        return 1;
    }
	public float obtenerValorNum(Object object){
		return Float.valueOf(String.valueOf(object));
	}
	public int obtenerValorNumInt(Object object){
		return Integer.valueOf(String.valueOf(object));
	}
	public void addNameVar(String var){
		Variables.add(var);
	}
	public ArrayList<Html> getLISTAHTML() {
        return listHtml;
    }
	public ArrayList<String> getSintaxError() {
        return sintaxERROR;
    }





/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= estado_inicial EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // estado_inicial ::= etiqueta_gcic 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estado_inicial",96, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // etiqueta_gcic ::= MENOR_QUE C_GCIC parametro_c_gcic MAYOR_QUE head body MENOR_QUE DIVISION C_GCIC MAYOR_QUE 
            {
              Object RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiqueta_gcic",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // etiqueta_gcic ::= MENOR_QUE C_GCIC MAYOR_QUE head body MENOR_QUE DIVISION C_GCIC MAYOR_QUE 
            {
              Object RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiqueta_gcic",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // parametro_c_gcic ::= CORCHETE_ABRE id CORCHETE_CIERRA CORCHETE_ABRE name CORCHETE_CIERRA 
            {
              Object RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object ts = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int naleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int naright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object na = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   html.setId(ts.toString()); html.setName(na.toString()); html= new Html2();  listHtml.add(html); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_c_gcic",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // parametro_c_gcic ::= CORCHETE_ABRE name CORCHETE_CIERRA CORCHETE_ABRE id CORCHETE_CIERRA 
            {
              Object RESULT =null;
		int naleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int naright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object na = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ts = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  html.setId(ts.toString()); html.setName(na.toString()); html= new Html2();  listHtml.add(html); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_c_gcic",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // parametro_c_gcic ::= CORCHETE_ABRE name CORCHETE_CIERRA 
            {
              Object RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ts = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  html.setName(ts.toString()); html= new Html2();  listHtml.add(html); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_c_gcic",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // parametro_c_gcic ::= CORCHETE_ABRE id CORCHETE_CIERRA 
            {
              Object RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ts = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  html.setId(ts.toString()); html= new Html2();  listHtml.add(html); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_c_gcic",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // parametro_c_gcic ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_c_gcic",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // parametro_c_gcic ::= error parametro_c_gcic 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_c_gcic",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // id ::= ID IGUAL COMILLA TEXTO_ID COMILLA 
            {
              Object RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ts = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=ts.toString(); System.out.println(" ID "+ts.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // name ::= NAME IGUAL COMILLA TEXTO COMILLA 
            {
              Object RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object es = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT=es.toString(); System.out.println(" NAME "+es.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("name",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // head ::= MENOR_QUE C_HEAD MAYOR_QUE parametros_head MENOR_QUE DIVISION C_HEAD MAYOR_QUE 
            {
              Object RESULT =null;
		 listHtml.add(head); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("head",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // head ::= MENOR_QUE C_HEAD MAYOR_QUE titulo MENOR_QUE DIVISION C_HEAD MAYOR_QUE 
            {
              Object RESULT =null;
		 listHtml.add(head); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("head",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // head ::= MENOR_QUE C_HEAD MAYOR_QUE MENOR_QUE DIVISION C_HEAD MAYOR_QUE 
            {
              Object RESULT =null;
		 listHtml.add(head); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("head",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // head ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("head",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // parametros_head ::= link parametros_head2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_head",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // parametros_head ::= titulo parametros_head1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_head",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // parametros_head ::= parametros_head1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_head",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // parametros_head1 ::= link 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_head1",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // parametros_head2 ::= titulo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_head2",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // link ::= MENOR_QUE C_LINK CORCHETE_ABRE href CORCHETE_CIERRA MAYOR_QUE MENOR_QUE DIVISION C_LINK MAYOR_QUE 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		 System.out.println(r.toString()); Link link= new Link(); link.setHref(r.toString()); head.getListHead().add(link); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("link",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // link ::= MENOR_QUE C_LINK CORCHETE_ABRE CORCHETE_CIERRA MAYOR_QUE MENOR_QUE DIVISION C_LINK MAYOR_QUE 
            {
              Object RESULT =null;
		 Link link= new Link(); head.getListHead().add(link); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("link",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // link ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("link",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // titulo ::= TI TEXTO TD 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 Title title= new Title(a.toString()); head.getListHead().add(title);         System.out.println(" Titulo: "+a.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("titulo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // titulo ::= TI TD 
            {
              Object RESULT =null;
		 Title title= new Title(); head.getListHead().add(title);         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("titulo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // href ::= HREF IGUAL COMILLA TEXTO COMILLA 
            {
              Object RESULT =null;
		int linkkleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int linkkright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object linkk = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=linkk.toString(); System.out.println(" LINK "+linkk.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("href",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // body ::= MENOR_QUE C_BODY CORCHETE_ABRE background CORCHETE_CIERRA MAYOR_QUE parametros_body MENOR_QUE DIVISION C_BODY MAYOR_QUE 
            {
              Object RESULT =null;
		 listHtml.add(body); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("body",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // body ::= MENOR_QUE C_BODY CORCHETE_ABRE CORCHETE_CIERRA MAYOR_QUE parametros_body MENOR_QUE DIVISION C_BODY MAYOR_QUE 
            {
              Object RESULT =null;
		 listHtml.add(body); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("body",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // background ::= BACKGROUND IGUAL COMILLA RGB_COLOR COMILLA 
            {
              Object RESULT =null;
		int backleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int backright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object back = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 body.setBackground(back.toString()); System.out.println(" BACKGROUND RGB "+back.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("background",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // background ::= BACKGROUND IGUAL COMILLA CTE_COLOR COMILLA 
            {
              Object RESULT =null;
		int baleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int baright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ba = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 body.setBackground(ba.toString()); System.out.println(" BACKGROUND CTE COLOR "+ba.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("background",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // parametros_body ::= parametros_body etiquetas_h1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_body",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // parametros_body ::= etiquetas_h1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_body",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // parametros_body ::= parametros_body br 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_body",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // parametros_body ::= br 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_body",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // parametros_body ::= parametros_body etiquetas_spam 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_body",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // parametros_body ::= etiquetas_spam 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_body",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // parametros_body ::= parametros_body etiquetas_cp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_body",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // parametros_body ::= etiquetas_cp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_body",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // parametros_body ::= parametros_body etiquetas_input 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_body",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // parametros_body ::= etiquetas_input 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_body",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // parametros_body ::= parametros_body etiquetas_area 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_body",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // parametros_body ::= etiquetas_area 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_body",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // parametros_body ::= parametros_body etiquetas_button 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_body",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // parametros_body ::= etiquetas_button 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_body",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // parametros_body ::= parametros_body etiquetas_img 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_body",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // parametros_body ::= etiquetas_img 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_body",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // parametros_body ::= parametros_body etiquetas_select 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_body",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // parametros_body ::= etiquetas_select 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_body",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // parametros_body ::= parametros_body etiquetas_div 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_body",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // parametros_body ::= etiquetas_div 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_body",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // parametros_body ::= parametros_body etiquetas_scripting 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_body",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // parametros_body ::= etiquetas_scripting 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_body",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // etiquetas_h1 ::= ABRE_C_H1 parametros_h1 MAYOR_QUE TEXTO CIERRA_C_H1 
            {
              Object RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object txt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 h1.setTexto(txt.toString()); if(banderaDiv==false){body.getListBody().add(h1);}else{div.getListDiv().add(h1);} h1= new H1(); System.out.println(" TEXTO EN H1:  "+txt.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_h1",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // etiquetas_h1 ::= ABRE_C_H1 parametros_h1 MAYOR_QUE CIERRA_C_H1 
            {
              Object RESULT =null;
		 if(banderaDiv==false){body.getListBody().add(h1);}else{div.getListDiv().add(h1);} h1= new H1();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_h1",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // etiquetas_h1 ::= ABRE_C_H1 MAYOR_QUE TEXTO CIERRA_C_H1 
            {
              Object RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object txt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		h1.setTexto(txt.toString()); if(banderaDiv==false){body.getListBody().add(h1);}else{div.getListDiv().add(h1);} h1= new H1(); System.out.println(" TEXTO EN H1:  "+txt.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_h1",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // etiquetas_h1 ::= ABRE_C_H1 MAYOR_QUE CIERRA_C_H1 
            {
              Object RESULT =null;
		 if(banderaDiv==false){body.getListBody().add(h1);}else{div.getListDiv().add(h1);} h1= new H1(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_h1",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // parametros_h1 ::= CORCHETE_ABRE id_h1 CORCHETE_CIERRA parametros_h1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_h1",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // parametros_h1 ::= CORCHETE_ABRE color_h1 CORCHETE_CIERRA parametros_h1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_h1",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // parametros_h1 ::= CORCHETE_ABRE font_size_h1 CORCHETE_CIERRA parametros_h1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_h1",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // parametros_h1 ::= CORCHETE_ABRE font_family_h1 CORCHETE_CIERRA parametros_h1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_h1",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // parametros_h1 ::= CORCHETE_ABRE text_align_h1 CORCHETE_CIERRA parametros_h1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_h1",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // parametros_h1 ::= CORCHETE_ABRE id_h1 CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_h1",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // parametros_h1 ::= CORCHETE_ABRE color_h1 CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_h1",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // parametros_h1 ::= CORCHETE_ABRE font_size_h1 CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_h1",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // parametros_h1 ::= CORCHETE_ABRE font_family_h1 CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_h1",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // parametros_h1 ::= CORCHETE_ABRE text_align_h1 CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_h1",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // font_size_h1 ::= FONT_SIZE IGUAL COMILLA SIZE COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 h1.setSize(s.toString()); System.out.println(" FONT SIZE H1 "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("font_size_h1",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // font_family_h1 ::= FONT_FAMILY IGUAL COMILLA TIPOS_LETRA COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 h1.setLetra(s.toString()); System.out.println(" FONT FAMILY H1 "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("font_family_h1",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // text_align_h1 ::= TEXT_ALIGN IGUAL COMILLA ALINEACION COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 h1.setAlign(s.toString()); System.out.println(" TEXT ALIGN H1 "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("text_align_h1",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // id_h1 ::= ID IGUAL COMILLA TEXTO_ID COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 h1.setId(s.toString()); System.out.println(" ID H1 "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id_h1",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // color_h1 ::= COLOR IGUAL COMILLA CTE_COLOR COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 h1.setColor(s.toString()); System.out.println(" CTE Color H1 "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("color_h1",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // color_h1 ::= COLOR IGUAL COMILLA RGB_COLOR COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 h1.setColor(s.toString()); System.out.println(" RGB H1 "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("color_h1",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // br ::= MENOR_QUE C_BR MAYOR_QUE 
            {
              Object RESULT =null;
		 if(banderaDiv==false){body.getListBody().add(br);}else{div.getListDiv().add(br);} br= new Br();   System.out.println(" BR Salto de Linea \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("br",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // etiquetas_spam ::= ABRE_C_SPAM parametros_spam MAYOR_QUE TEXTO CIERRA_C_SPAM 
            {
              Object RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object txt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 spam.setTexto(txt.toString());   if(banderaDiv==false){body.getListBody().add(spam);}else{div.getListDiv().add(spam);}   spam= new Spam(); System.out.println(" TEXTO EN SPAM:  "+txt.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_spam",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // etiquetas_spam ::= ABRE_C_SPAM parametros_spam MAYOR_QUE CIERRA_C_SPAM 
            {
              Object RESULT =null;
		if(banderaDiv==false){body.getListBody().add(spam);}else{div.getListDiv().add(spam);}  spam= new Spam(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_spam",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // etiquetas_spam ::= ABRE_C_SPAM MAYOR_QUE TEXTO CIERRA_C_SPAM 
            {
              Object RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object txt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 spam.setTexto(txt.toString()); if(banderaDiv==false){body.getListBody().add(spam);}else{div.getListDiv().add(spam);} spam= new Spam(); System.out.println(" TEXTO EN SPAM:  "+txt.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_spam",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // etiquetas_spam ::= ABRE_C_SPAM MAYOR_QUE CIERRA_C_SPAM 
            {
              Object RESULT =null;
		if(banderaDiv==false){body.getListBody().add(spam);}else{div.getListDiv().add(spam);} spam= new Spam(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_spam",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // parametros_spam ::= CORCHETE_ABRE id_spam CORCHETE_CIERRA parametros_spam 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_spam",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // parametros_spam ::= CORCHETE_ABRE color_spam CORCHETE_CIERRA parametros_spam 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_spam",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // parametros_spam ::= CORCHETE_ABRE font_size_spam CORCHETE_CIERRA parametros_spam 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_spam",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // parametros_spam ::= CORCHETE_ABRE font_family_spam CORCHETE_CIERRA parametros_spam 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_spam",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // parametros_spam ::= CORCHETE_ABRE text_align_spam CORCHETE_CIERRA parametros_spam 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_spam",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // parametros_spam ::= CORCHETE_ABRE id_spam CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_spam",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // parametros_spam ::= CORCHETE_ABRE color_spam CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_spam",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // parametros_spam ::= CORCHETE_ABRE font_size_spam CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_spam",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // parametros_spam ::= CORCHETE_ABRE font_family_spam CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_spam",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // parametros_spam ::= CORCHETE_ABRE text_align_spam CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_spam",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // font_size_spam ::= FONT_SIZE IGUAL COMILLA SIZE COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 spam.setSize(s.toString()); System.out.println(" FONT SIZE SPAM "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("font_size_spam",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // font_family_spam ::= FONT_FAMILY IGUAL COMILLA TIPOS_LETRA COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 spam.setLetra(s.toString());  System.out.println(" FONT FAMILY SPAM "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("font_family_spam",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // text_align_spam ::= TEXT_ALIGN IGUAL COMILLA ALINEACION COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 spam.setAlineacion(s.toString()); System.out.println(" TEXT ALIGN SPAM "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("text_align_spam",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // id_spam ::= ID IGUAL COMILLA TEXTO_ID COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 spam.setId(s.toString());    System.out.println(" ID SPAM "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id_spam",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // color_spam ::= COLOR IGUAL COMILLA CTE_COLOR COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 spam.setColor(s.toString());  System.out.println(" CTE Color SPAM "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("color_spam",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // color_spam ::= COLOR IGUAL COMILLA RGB_COLOR COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 spam.setColor(s.toString()); System.out.println(" RGB SPAM "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("color_spam",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // etiquetas_cp ::= ABRE_C_P parametros_cp MAYOR_QUE TEXTO CIERRA_C_P 
            {
              Object RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object txt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 p.setTexto(txt.toString()); if(banderaDiv==false){body.getListBody().add(p);}else{div.getListDiv().add(p);} p= new P(); System.out.println(" TEXTO EN CP:  "+txt.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_cp",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // etiquetas_cp ::= ABRE_C_P parametros_cp MAYOR_QUE CIERRA_C_P 
            {
              Object RESULT =null;
		 if(banderaDiv==false){body.getListBody().add(p);}else{div.getListDiv().add(p);} p= new P(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_cp",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // etiquetas_cp ::= ABRE_C_P MAYOR_QUE TEXTO CIERRA_C_P 
            {
              Object RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object txt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 p.setTexto(txt.toString()); if(banderaDiv==false){body.getListBody().add(p);}else{div.getListDiv().add(p);} p= new P(); System.out.println(" TEXTO EN CP:  "+txt.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_cp",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // etiquetas_cp ::= ABRE_C_P MAYOR_QUE CIERRA_C_P 
            {
              Object RESULT =null;
		  if(banderaDiv==false){body.getListBody().add(p);}else{div.getListDiv().add(p);} p= new P();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_cp",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // parametros_cp ::= CORCHETE_ABRE id_cp CORCHETE_CIERRA parametros_cp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_cp",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // parametros_cp ::= CORCHETE_ABRE color_cp CORCHETE_CIERRA parametros_cp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_cp",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // parametros_cp ::= CORCHETE_ABRE font_size_cp CORCHETE_CIERRA parametros_cp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_cp",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // parametros_cp ::= CORCHETE_ABRE font_family_cp CORCHETE_CIERRA parametros_cp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_cp",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // parametros_cp ::= CORCHETE_ABRE text_align_cp CORCHETE_CIERRA parametros_cp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_cp",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // parametros_cp ::= CORCHETE_ABRE id_cp CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_cp",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // parametros_cp ::= CORCHETE_ABRE color_cp CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_cp",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // parametros_cp ::= CORCHETE_ABRE font_size_cp CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_cp",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // parametros_cp ::= CORCHETE_ABRE font_family_cp CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_cp",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // parametros_cp ::= CORCHETE_ABRE text_align_cp CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_cp",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // font_size_cp ::= FONT_SIZE IGUAL COMILLA SIZE COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" FONT SIZE CP "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("font_size_cp",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // font_family_cp ::= FONT_FAMILY IGUAL COMILLA TIPOS_LETRA COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" FONT FAMILY CP "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("font_family_cp",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // text_align_cp ::= TEXT_ALIGN IGUAL COMILLA ALINEACION COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" TEXT ALIGN CP "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("text_align_cp",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // id_cp ::= ID IGUAL COMILLA TEXTO_ID COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" ID CP "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id_cp",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // color_cp ::= COLOR IGUAL COMILLA CTE_COLOR COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" CTE Color CP "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("color_cp",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // color_cp ::= COLOR IGUAL COMILLA RGB_COLOR COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" RGB CP "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("color_cp",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // etiquetas_input ::= ABRE_INPUT parametros_input MAYOR_QUE TEXTO CIERRA_INPUT 
            {
              Object RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object txt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 input.setTexto(txt.toString()); if(banderaDiv==false){body.getListBody().add(input);}else{div.getListDiv().add(input);}  input= new Input(); System.out.println(" TEXTO EN INPUT:  "+txt.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_input",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // etiquetas_input ::= ABRE_INPUT parametros_input MAYOR_QUE CIERRA_INPUT 
            {
              Object RESULT =null;
		 if(banderaDiv==false){body.getListBody().add(input);}else{div.getListDiv().add(input);}  input= new Input();  input= new Input(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_input",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // etiquetas_input ::= ABRE_INPUT MAYOR_QUE TEXTO CIERRA_INPUT 
            {
              Object RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object txt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 input.setTexto(txt.toString()); if(banderaDiv==false){body.getListBody().add(input);}else{div.getListDiv().add(input);}  input= new Input(); System.out.println(" TEXTO EN INPUT:  "+txt.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_input",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // etiquetas_input ::= ABRE_INPUT MAYOR_QUE CIERRA_INPUT 
            {
              Object RESULT =null;
		 if(banderaDiv==false){body.getListBody().add(input);}else{div.getListDiv().add(input);}  input= new Input(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_input",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // parametros_input ::= CORCHETE_ABRE id_input CORCHETE_CIERRA parametros_input 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_input",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // parametros_input ::= CORCHETE_ABRE color_input CORCHETE_CIERRA parametros_input 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_input",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // parametros_input ::= CORCHETE_ABRE font_size_input CORCHETE_CIERRA parametros_input 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_input",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // parametros_input ::= CORCHETE_ABRE font_family_input CORCHETE_CIERRA parametros_input 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_input",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // parametros_input ::= CORCHETE_ABRE text_align_input CORCHETE_CIERRA parametros_input 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_input",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // parametros_input ::= CORCHETE_ABRE tipos_input CORCHETE_CIERRA parametros_input 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_input",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // parametros_input ::= CORCHETE_ABRE id_input CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_input",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // parametros_input ::= CORCHETE_ABRE color_input CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_input",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // parametros_input ::= CORCHETE_ABRE font_size_input CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_input",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // parametros_input ::= CORCHETE_ABRE font_family_input CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_input",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // parametros_input ::= CORCHETE_ABRE text_align_input CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_input",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // parametros_input ::= CORCHETE_ABRE tipos_input CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_input",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // font_size_input ::= FONT_SIZE IGUAL COMILLA SIZE COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 input.setSize(s.toString() ); System.out.println(" FONT SIZE INPUT "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("font_size_input",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // font_family_input ::= FONT_FAMILY IGUAL COMILLA TIPOS_LETRA COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 input.setLetra(s.toString() ); System.out.println(" FONT FAMILY INPUT "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("font_family_input",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // text_align_input ::= TEXT_ALIGN IGUAL COMILLA ALINEACION COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 input.setAlign(s.toString() ); System.out.println(" TEXT ALIGN INPUT "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("text_align_input",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // id_input ::= ID IGUAL COMILLA TEXTO_ID COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 input.setId(s.toString() ); System.out.println(" ID INPUT "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id_input",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // color_input ::= COLOR IGUAL COMILLA CTE_COLOR COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 input.setColor(s.toString() ); System.out.println(" CTE Color INPUT "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("color_input",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // color_input ::= COLOR IGUAL COMILLA RGB_COLOR COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 input.setColor(s.toString() ); System.out.println(" RGB INPUT "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("color_input",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // tipos_input ::= TYPE IGUAL COMILLA TIPOS_DE_INPUT COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 input.setTipo(s.toString() ); System.out.println(" TIPOS DE INPUT "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_input",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // etiquetas_area ::= ABRE_TEXT_AREA parametros_area MAYOR_QUE TEXTO CIERRA_TEXT_AREA 
            {
              Object RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object txt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 area.setTexto(txt.toString()); if(banderaDiv==false){body.getListBody().add(area);}else{div.getListDiv().add(area);} area= new TextArea(); System.out.println(" TEXTO EN TEXT AREA:  "+txt.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_area",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // etiquetas_area ::= ABRE_TEXT_AREA parametros_area MAYOR_QUE CIERRA_TEXT_AREA 
            {
              Object RESULT =null;
		  if(banderaDiv==false){body.getListBody().add(area);}else{div.getListDiv().add(area);} area= new TextArea(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_area",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // etiquetas_area ::= ABRE_TEXT_AREA MAYOR_QUE TEXTO CIERRA_TEXT_AREA 
            {
              Object RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object txt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  if(banderaDiv==false){body.getListBody().add(area);}else{div.getListDiv().add(area);} area= new TextArea(); System.out.println(" TEXTO EN TEXT AREA:  "+txt.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_area",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // etiquetas_area ::= ABRE_TEXT_AREA MAYOR_QUE CIERRA_TEXT_AREA 
            {
              Object RESULT =null;
		  if(banderaDiv==false){body.getListBody().add(area);}else{div.getListDiv().add(area);} area= new TextArea(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_area",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // parametros_area ::= CORCHETE_ABRE id_area CORCHETE_CIERRA parametros_area 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_area",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // parametros_area ::= CORCHETE_ABRE font_size_area CORCHETE_CIERRA parametros_area 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_area",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // parametros_area ::= CORCHETE_ABRE font_family_area CORCHETE_CIERRA parametros_area 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_area",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // parametros_area ::= CORCHETE_ABRE text_align_area CORCHETE_CIERRA parametros_area 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_area",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // parametros_area ::= CORCHETE_ABRE cols_area CORCHETE_CIERRA parametros_area 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_area",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // parametros_area ::= CORCHETE_ABRE rows_area CORCHETE_CIERRA parametros_area 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_area",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // parametros_area ::= CORCHETE_ABRE id_area CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_area",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // parametros_area ::= CORCHETE_ABRE font_size_area CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_area",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // parametros_area ::= CORCHETE_ABRE font_family_area CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_area",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // parametros_area ::= CORCHETE_ABRE text_align_area CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_area",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // parametros_area ::= CORCHETE_ABRE cols_area CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_area",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // parametros_area ::= CORCHETE_ABRE rows_area CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_area",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // font_size_area ::= FONT_SIZE IGUAL COMILLA SIZE COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 area.setSize(s.toString()); System.out.println(" FONT SIZE TEXT  AREA: "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("font_size_area",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // font_family_area ::= FONT_FAMILY IGUAL COMILLA TIPOS_LETRA COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 area.setLetra(s.toString()); System.out.println(" FONT FAMILY TEXT AREA: "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("font_family_area",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // text_align_area ::= TEXT_ALIGN IGUAL COMILLA ALINEACION COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 area.setAlign(s.toString()); System.out.println(" TEXT ALIGN TEXT AREA: "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("text_align_area",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // id_area ::= ID IGUAL COMILLA TEXTO_ID COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 area.setId(s.toString()); System.out.println(" ID TEXT AREA: "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id_area",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // cols_area ::= COLS IGUAL COMILLA NUMERO_ENTERO COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 area.setCols(s.toString()); System.out.println(" NUMERO COLS TEXT AREA "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cols_area",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // rows_area ::= ROWS IGUAL COMILLA NUMERO_ENTERO COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 area.setRows(s.toString()); System.out.println(" NUMERO ROWS TEXT AREA "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rows_area",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // etiquetas_button ::= ABRE_BUTTON parametros_button MAYOR_QUE TEXTO CIERRA_BUTTON 
            {
              Object RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object txt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 button.setTexto(txt.toString()); if(banderaDiv==false){body.getListBody().add(button);}else{div.getListDiv().add(button);} button= new Button();  System.out.println(" TEXTO EN BUTTON:  "+txt.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_button",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // etiquetas_button ::= ABRE_BUTTON parametros_button MAYOR_QUE CIERRA_BUTTON 
            {
              Object RESULT =null;
		 if(banderaDiv==false){body.getListBody().add(button);}else{div.getListDiv().add(button);} button= new Button(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_button",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // etiquetas_button ::= ABRE_BUTTON MAYOR_QUE TEXTO CIERRA_BUTTON 
            {
              Object RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object txt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 button.setTexto(txt.toString()); if(banderaDiv==false){body.getListBody().add(button);}else{div.getListDiv().add(button);} button= new Button(); System.out.println(" TEXTO EN BUTTON:  "+txt.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_button",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // etiquetas_button ::= ABRE_BUTTON MAYOR_QUE CIERRA_BUTTON 
            {
              Object RESULT =null;
		  if(banderaDiv==false){body.getListBody().add(button);}else{div.getListDiv().add(button);} button= new Button(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_button",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // parametros_button ::= CORCHETE_ABRE id_button CORCHETE_CIERRA parametros_button 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_button",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // parametros_button ::= CORCHETE_ABRE font_size_button CORCHETE_CIERRA parametros_button 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_button",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // parametros_button ::= CORCHETE_ABRE font_family_button CORCHETE_CIERRA parametros_button 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_button",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // parametros_button ::= CORCHETE_ABRE text_align_button CORCHETE_CIERRA parametros_button 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_button",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // parametros_button ::= CORCHETE_ABRE color_button CORCHETE_CIERRA parametros_button 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_button",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // parametros_button ::= CORCHETE_ABRE background_button CORCHETE_CIERRA parametros_button 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_button",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // parametros_button ::= CORCHETE_ABRE onclick_button CORCHETE_CIERRA parametros_button 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_button",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // parametros_button ::= CORCHETE_ABRE id_button CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_button",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // parametros_button ::= CORCHETE_ABRE font_size_button CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_button",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // parametros_button ::= CORCHETE_ABRE font_family_button CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_button",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // parametros_button ::= CORCHETE_ABRE text_align_button CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_button",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // parametros_button ::= CORCHETE_ABRE color_button CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_button",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // parametros_button ::= CORCHETE_ABRE background_button CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_button",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // parametros_button ::= CORCHETE_ABRE onclick_button CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_button",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // font_size_button ::= FONT_SIZE IGUAL COMILLA SIZE COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 button.setSize(s.toString()); System.out.println(" FONT SIZE BUTTON : "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("font_size_button",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // font_family_button ::= FONT_FAMILY IGUAL COMILLA TIPOS_LETRA COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 button.setLetra(s.toString()); System.out.println(" FONT FAMILY BUTTON: "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("font_family_button",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // text_align_button ::= TEXT_ALIGN IGUAL COMILLA ALINEACION COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 button.setAlign(s.toString()); System.out.println(" TEXT ALIGN BUTTON: "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("text_align_button",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // id_button ::= ID IGUAL COMILLA TEXTO_ID COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 button.setId(s.toString()); System.out.println(" ID BUTTON: "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id_button",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // color_button ::= COLOR IGUAL COMILLA CTE_COLOR COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 button.setColor(s.toString()); System.out.println(" CTE Color BUTTON "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("color_button",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // color_button ::= COLOR IGUAL COMILLA RGB_COLOR COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 button.setColor(s.toString()); System.out.println(" RGB BUTTON "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("color_button",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // background_button ::= BACKGROUND IGUAL COMILLA RGB_COLOR COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 button.setBackground(s.toString()); System.out.println(" BACKGROUND RGB BUTTON: "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("background_button",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // background_button ::= BACKGROUND IGUAL COMILLA CTE_COLOR COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 button.setBackground(s.toString()); System.out.println(" BACKGROUND constante de color BUTTON: "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("background_button",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // onclick_button ::= ONCLICK IGUAL COMILLA NOMBRE_METODO COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  button.setOnclick(s.toString()); System.out.println(" METODO DEL BUTTON: "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("onclick_button",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // etiquetas_img ::= ABRE_IMG parametros_img MAYOR_QUE TEXTO CIERRA_IMG 
            {
              Object RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object txt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 img.setTexto(txt.toString()); if(banderaDiv==false){body.getListBody().add(img);}else{div.getListDiv().add(img);} img= new Img(); System.out.println(" TEXTO EN IMAGEN:  "+txt.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_img",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // etiquetas_img ::= ABRE_IMG parametros_img MAYOR_QUE CIERRA_IMG 
            {
              Object RESULT =null;
		  if(banderaDiv==false){body.getListBody().add(img);}else{div.getListDiv().add(img);} img= new Img(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_img",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // etiquetas_img ::= ABRE_IMG MAYOR_QUE TEXTO CIERRA_IMG 
            {
              Object RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object txt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		img.setTexto(txt.toString()); if(banderaDiv==false){body.getListBody().add(img);}else{div.getListDiv().add(img);} img= new Img(); System.out.println(" TEXTO EN IMAGEN:  "+txt.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_img",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // etiquetas_img ::= ABRE_IMG MAYOR_QUE CIERRA_IMG 
            {
              Object RESULT =null;
		  if(banderaDiv==false){body.getListBody().add(img);}else{div.getListDiv().add(img);} img= new Img();  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_img",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // parametros_img ::= CORCHETE_ABRE id_img CORCHETE_CIERRA parametros_img 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_img",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // parametros_img ::= CORCHETE_ABRE src_img CORCHETE_CIERRA parametros_img 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_img",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // parametros_img ::= CORCHETE_ABRE width_img CORCHETE_CIERRA parametros_img 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_img",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // parametros_img ::= CORCHETE_ABRE height_img CORCHETE_CIERRA parametros_img 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_img",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // parametros_img ::= CORCHETE_ABRE alt_img CORCHETE_CIERRA parametros_img 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_img",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // parametros_img ::= CORCHETE_ABRE id_img CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_img",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // parametros_img ::= CORCHETE_ABRE src_img CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_img",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // parametros_img ::= CORCHETE_ABRE width_img CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_img",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // parametros_img ::= CORCHETE_ABRE height_img CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_img",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // parametros_img ::= CORCHETE_ABRE alt_img CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_img",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // src_img ::= SRC IGUAL COMILLA TEXTO COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 img.setSrc(s.toString()); System.out.println("SRC: IMG : "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("src_img",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // width_img ::= WIDTH IGUAL COMILLA SIZE COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 img.setWidth(s.toString()); System.out.println(" WIDHT IMG: "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("width_img",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // height_img ::= HEIGHT IGUAL COMILLA SIZE COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 img.setHeight(s.toString()); System.out.println(" HEIGHT IMG: : "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("height_img",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // id_img ::= ID IGUAL COMILLA TEXTO_ID COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 img.setId(s.toString()); System.out.println(" ID IMG: "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id_img",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // alt_img ::= ALT IGUAL COMILLA TEXTO COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 img.setAlt(s.toString()); System.out.println(" ALT DE IMG "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("alt_img",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // etiquetas_select ::= ABRE_C_SELECT parametros_select MAYOR_QUE etiquetas_option CIERRA_C_SELECT 
            {
              Object RESULT =null;
		int avleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int avright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object av = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 select.setOpciones(av.toString());   if(banderaDiv==false){body.getListBody().add(select);}else{div.getListDiv().add(select);} select= new Select(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_select",69, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // etiquetas_select ::= ABRE_C_SELECT parametros_select MAYOR_QUE CIERRA_C_SELECT 
            {
              Object RESULT =null;
		  if(banderaDiv==false){body.getListBody().add(select);}else{div.getListDiv().add(select);} select= new Select();  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_select",69, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // etiquetas_select ::= ABRE_C_SELECT MAYOR_QUE CIERRA_C_SELECT 
            {
              Object RESULT =null;
		  if(banderaDiv==false){body.getListBody().add(select);}else{div.getListDiv().add(select);} select= new Select(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_select",69, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // parametros_select ::= CORCHETE_ABRE id_select CORCHETE_CIERRA parametros_select 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_select",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // parametros_select ::= CORCHETE_ABRE color_select CORCHETE_CIERRA parametros_select 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_select",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // parametros_select ::= CORCHETE_ABRE font_size_select CORCHETE_CIERRA parametros_select 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_select",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // parametros_select ::= CORCHETE_ABRE font_family_select CORCHETE_CIERRA parametros_select 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_select",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // parametros_select ::= CORCHETE_ABRE text_align_select CORCHETE_CIERRA parametros_select 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_select",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // parametros_select ::= CORCHETE_ABRE id_select CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_select",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // parametros_select ::= CORCHETE_ABRE color_select CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_select",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // parametros_select ::= CORCHETE_ABRE font_size_select CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_select",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // parametros_select ::= CORCHETE_ABRE font_family_select CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_select",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // parametros_select ::= CORCHETE_ABRE text_align_select CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_select",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // font_size_select ::= FONT_SIZE IGUAL COMILLA SIZE COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 select.setSize(s.toString()); System.out.println(" FONT SIZE SELECT "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("font_size_select",72, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // font_family_select ::= FONT_FAMILY IGUAL COMILLA TIPOS_LETRA COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 select.setLetra(s.toString()); System.out.println(" FONT FAMILY SELECT "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("font_family_select",73, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // text_align_select ::= TEXT_ALIGN IGUAL COMILLA ALINEACION COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 select.setAlign(s.toString()); System.out.println(" TEXT ALIGN SELECT "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("text_align_select",74, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // id_select ::= ID IGUAL COMILLA TEXTO_ID COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 select.setId(s.toString()); System.out.println(" ID SELECT "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id_select",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // color_select ::= COLOR IGUAL COMILLA CTE_COLOR COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 select.setColor(s.toString()); System.out.println(" CTE Color SELECT "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("color_select",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // color_select ::= COLOR IGUAL COMILLA RGB_COLOR COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 select.setColor(s.toString()); System.out.println(" RGB SELECT "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("color_select",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // etiquetas_option ::= ABRE_C_OPTION TEXTO CIERRA_C_OPTION etiquetas_option 
            {
              Object RESULT =null;
		int optleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int optright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object opt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opt2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opt2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object opt2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = opt2.toString()+""+opt.toString()+","; System.out.println(" OPCIONES EN SELECT.: "+opt.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_option",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // etiquetas_option ::= ABRE_C_OPTION TEXTO CIERRA_C_OPTION 
            {
              Object RESULT =null;
		int optleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int optright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object opt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = opt.toString()+","; System.out.println(" OPCIONES EN SELECT "+opt.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_option",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // etiquetas_div ::= abre_div parametros_div mayor parametros_body cierra_div 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_div",77, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // etiquetas_div ::= abre_div parametros_div mayor cierra_div 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_div",77, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // etiquetas_div ::= abre_div mayor parametros_body cierra_div 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_div",77, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // etiquetas_div ::= abre_div mayor cierra_div 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_div",77, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // abre_div ::= ABRE_C_DIV 
            {
              Object RESULT =null;
		  System.out.println("@@@@@@@@@@@@@@@@@@@@@@ABRE-DIV@@@@@@@@@@@@@@@@@@@@@@@@"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("abre_div",85, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // mayor ::= MAYOR_QUE 
            {
              Object RESULT =null;
		 body.getListBody().add(div);  div= new Div(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mayor",87, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // cierra_div ::= CIERRA_C_DIV 
            {
              Object RESULT =null;
		  body.getListBody().add(divc);  divc= new DivC();  System.out.println("######################CIERRA_DIV####################"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cierra_div",86, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // parametros_div ::= CORCHETE_ABRE id_div CORCHETE_CIERRA parametros_div 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_div",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // parametros_div ::= CORCHETE_ABRE color_div CORCHETE_CIERRA parametros_div 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_div",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // parametros_div ::= CORCHETE_ABRE font_size_div CORCHETE_CIERRA parametros_div 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_div",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // parametros_div ::= CORCHETE_ABRE font_family_div CORCHETE_CIERRA parametros_div 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_div",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // parametros_div ::= CORCHETE_ABRE text_align_div CORCHETE_CIERRA parametros_div 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_div",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // parametros_div ::= CORCHETE_ABRE background_div CORCHETE_CIERRA parametros_div 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_div",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // parametros_div ::= CORCHETE_ABRE class_div CORCHETE_CIERRA parametros_div 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_div",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // parametros_div ::= CORCHETE_ABRE id_div CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_div",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // parametros_div ::= CORCHETE_ABRE color_div CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_div",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // parametros_div ::= CORCHETE_ABRE font_size_div CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_div",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // parametros_div ::= CORCHETE_ABRE font_family_div CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_div",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // parametros_div ::= CORCHETE_ABRE text_align_div CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_div",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // parametros_div ::= CORCHETE_ABRE background_div CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_div",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // parametros_div ::= CORCHETE_ABRE class_div CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_div",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // font_size_div ::= FONT_SIZE IGUAL COMILLA SIZE COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 div.setSize(s.toString()); System.out.println(" FONT SIZE DIV "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("font_size_div",81, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // font_family_div ::= FONT_FAMILY IGUAL COMILLA TIPOS_LETRA COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 div.setLetra(s.toString()); System.out.println(" FONT FAMILY DIV "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("font_family_div",82, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // text_align_div ::= TEXT_ALIGN IGUAL COMILLA ALINEACION COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 div.setAlign(s.toString()); System.out.println(" TEXT ALIGN DIV "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("text_align_div",83, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // id_div ::= ID IGUAL COMILLA TEXTO_ID COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 div.setId(s.toString()); System.out.println(" ID DIV "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id_div",78, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // background_div ::= BACKGROUND IGUAL COMILLA RGB_COLOR COMILLA 
            {
              Object RESULT =null;
		int backleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int backright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object back = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 div.setBackground(back.toString()); System.out.println(" BACKGROUND RGB DIV: "+back.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("background_div",80, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // background_div ::= BACKGROUND IGUAL COMILLA CTE_COLOR COMILLA 
            {
              Object RESULT =null;
		int baleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int baright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ba = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 div.setBackground(ba.toString()); System.out.println(" BACKGROUND constante de color DIV: "+ba.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("background_div",80, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // color_div ::= COLOR IGUAL COMILLA CTE_COLOR COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 div.setColor(s.toString()); System.out.println(" CTE Color DIV "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("color_div",79, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // color_div ::= COLOR IGUAL COMILLA RGB_COLOR COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 div.setColor(s.toString()); System.out.println(" RGB DIV "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("color_div",79, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // class_div ::= CLASS IGUAL COMILLA TIPOS_CLASE COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 div.setClasss(s.toString()); System.out.println(" Class DIV "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_div",84, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // etiquetas_scripting ::= abre_script MAYOR_QUE parametros_scripting cierra_script 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_scripting",88, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // etiquetas_scripting ::= abre_script MAYOR_QUE parametros_proces cierra_script 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_scripting",88, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // abre_script ::= ABRE_C_SCRIPTING 
            {
              Object RESULT =null;
		  script= new Script(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("abre_script",89, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // cierra_script ::= CIERRA_C_SCRIPTING 
            {
              Object RESULT =null;
		    
	body.getListBody().add(script); script= new Script(); 
	body.getListBody().add(script2); script2= new Script2(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cierra_script",90, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // parametros_scripting ::= onload parametros_proces 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_scripting",92, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // parametros_scripting ::= onload 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_scripting",92, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // parametros_proces ::= proces parametros_proces 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_proces",91, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // parametros_proces ::= proces 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_proces",91, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // proces ::= process_ini CORCHETE_ABRE definicion_variables CORCHETE_CIERRA 
            {
              Object RESULT =null;
		int methodleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int methodright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object method = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 proceso.setNombre(method.toString()); proceso.setLstProcess(lstMetodos); script.getListScript().add(proceso); script.getListScript().add(close);  lstMetodos = new ArrayList(); System.out.println(" METODO PROCESS_() "+method.toString()+"-------------------------------"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proces",93, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // proces ::= process_ini CORCHETE_ABRE CORCHETE_CIERRA 
            {
              Object RESULT =null;
		int methodleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int methodright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object method = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 proceso.setLstProcess(lstMetodos); script.getListScript().add(proceso); script.getListScript().add(close); lstMetodos = new ArrayList(); System.out.println(" METODO PROCESS_() "+method.toString()+"-------------------------------"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proces",93, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // onload ::= ON_LOAD PARENTESIS_ABRE PARENTESIS_CIERRA CORCHETE_ABRE definicion_variables CORCHETE_CIERRA 
            {
              Object RESULT =null;
		 only.setLstOnload(lstMetodos);   script.getListScript().add(only);  /*script.getListScript().add(close);*/ lstMetodos = new ArrayList(); System.out.println(" METODO ONLOAD() "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("onload",95, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // onload ::= ON_LOAD PARENTESIS_ABRE PARENTESIS_CIERRA CORCHETE_ABRE CORCHETE_CIERRA 
            {
              Object RESULT =null;
		 only.setLstOnload(lstMetodos); script.getListScript().add(only); /*script.getListScript().add(close);*/ lstMetodos = new ArrayList(); System.out.println(" METODO ONLOAD() "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("onload",95, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // process_ini ::= NOMBRE_METODO 
            {
              Object RESULT =null;
		int methodleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int methodright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object method = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=method.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("process_ini",94, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // definicion_variables ::= integer definicion_variables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("definicion_variables",112, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // definicion_variables ::= integer 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("definicion_variables",112, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // definicion_variables ::= string definicion_variables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("definicion_variables",112, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // definicion_variables ::= string 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("definicion_variables",112, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // definicion_variables ::= decimal definicion_variables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("definicion_variables",112, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // definicion_variables ::= decimal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("definicion_variables",112, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // definicion_variables ::= char definicion_variables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("definicion_variables",112, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // definicion_variables ::= char 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("definicion_variables",112, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // definicion_variables ::= asig definicion_variables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("definicion_variables",112, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // definicion_variables ::= asig 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("definicion_variables",112, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // definicion_variables ::= boolean definicion_variables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("definicion_variables",112, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // definicion_variables ::= boolean 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("definicion_variables",112, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // definicion_variables ::= metodos_especiales2 definicion_variables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("definicion_variables",112, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // definicion_variables ::= metodos_especiales2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("definicion_variables",112, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // definicion_variables ::= sentencias_control definicion_variables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("definicion_variables",112, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // definicion_variables ::= sentencias_control 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("definicion_variables",112, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // definicion_variables ::= repeat definicion_variables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("definicion_variables",112, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // definicion_variables ::= repeat 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("definicion_variables",112, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // definicion_variables ::= while definicion_variables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("definicion_variables",112, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // definicion_variables ::= while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("definicion_variables",112, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // definicion_variables ::= insert definicion_variables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("definicion_variables",112, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // definicion_variables ::= insert 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("definicion_variables",112, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // instruccion ::= integer 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",100, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // instruccion ::= string 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",100, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // instruccion ::= decimal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",100, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // instruccion ::= char 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",100, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // instruccion ::= asig 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",100, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // instruccion ::= boolean 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",100, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // instruccion ::= metodos_especiales 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",100, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // asig ::= NOMBRE_VARIABLE IGUAL asig2 PUNTO_COMA 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 asignacion= new Asignacion(var1.toString(),val.toString()+";");  lstMetodos.add(asignacion);  System.out.println("----- ASIGNACION INTEGER:   "+var1+" Valores: "+val); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asig",117, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // asig ::= NOMBRE_VARIABLE IGUAL metodos_especiales PUNTO_COMA 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 asignacion= new Asignacion(var1.toString(),val.toString());  lstMetodos.add(asignacion);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asig",117, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */
  /** Method 1 with the actual generated action code for actions 300 to 600. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000001(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // asig2 ::= asig2 SUMA asig2 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1.toString()+"+"+e2.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asig2",118, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // asig2 ::= asig2 RESTA asig2 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1.toString()+"-"+e2.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asig2",118, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // asig2 ::= asig2 MULTIPLICACION asig2 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1.toString()+"*"+e2.toString() ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asig2",118, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // asig2 ::= asig2 DIVISION asig2 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1.toString()+"/"+e2.toString() ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asig2",118, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // asig2 ::= asig2 OR_O_AND asig2 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s.toString()+o.toString()+" "+t.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asig2",118, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // asig2 ::= RESTA asig2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "-"+e.toString();  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asig2",118, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // asig2 ::= PARENTESIS_ABRE asig2 PARENTESIS_CIERRA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "("+e.toString()+")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asig2",118, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // asig2 ::= NUMERO_ENTERO 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asig2",118, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // asig2 ::= NUMERO_DECIMAL 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asig2",118, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // asig2 ::= NOMBRE_VARIABLE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asig2",118, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // asig2 ::= COMILLA TEXTO COMILLA 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = t.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asig2",118, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // asig2 ::= COMILLA_SIMPLE TEXTO COMILLA_SIMPLE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = t.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asig2",118, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // asig2 ::= operador_logico_boolean 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t.toString()+""; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asig2",118, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // get_element ::= GETELEMENBYID PARENTESIS_ABRE COMILLA_SIMPLE TEXTO_ID COMILLA_SIMPLE PARENTESIS_CIERRA 
            {
              Object RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ids = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT= ids.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("get_element",120, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // integer ::= INTEGER GLOBAL nombre_variables PUNTO_COMA 
            {
              Object RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 integ = new IntegerV(vars.toString(),true,null); lstMetodos.add(integ); System.out.println(" VARIABLES:  G "+vars); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("integer",113, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // integer ::= INTEGER GLOBAL nombre_variables IGUAL valor_integer PUNTO_COMA 
            {
              Object RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 integ = new IntegerV(vars.toString(),true,val.toString()); lstMetodos.add(integ); System.out.println(" VARIABLES:  G "+vars+" Valores: "+val); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("integer",113, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // integer ::= INTEGER nombre_variables PUNTO_COMA 
            {
              Object RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 integ = new IntegerV(vars.toString(),false,null); lstMetodos.add(integ); System.out.println(" VARIABLES:   "+vars); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("integer",113, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // integer ::= INTEGER nombre_variables IGUAL valor_integer PUNTO_COMA 
            {
              Object RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 integ = new IntegerV(vars.toString(),false,val.toString()); lstMetodos.add(integ); System.out.println(" VARIABLES:   "+vars+" Valores: "+val); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("integer",113, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // nombre_variables ::= nombre_variables COMA NOMBRE_VARIABLE 
            {
              Object RESULT =null;
		int aaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object aa = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object var2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= aa.toString()+var2.toString()+c.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nombre_variables",114, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // nombre_variables ::= NOMBRE_VARIABLE 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= var1+",";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nombre_variables",114, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // valor_integer ::= valor_integer SUMA valor_integer 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1.toString()+"+"+e2.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_integer",115, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // valor_integer ::= valor_integer RESTA valor_integer 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1.toString()+"-"+e2.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_integer",115, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // valor_integer ::= valor_integer MULTIPLICACION valor_integer 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1.toString()+"*"+e2.toString() ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_integer",115, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // valor_integer ::= valor_integer DIVISION valor_integer 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1.toString()+"/"+e2.toString() ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_integer",115, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // valor_integer ::= RESTA valor_integer 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "-"+e.toString();  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_integer",115, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // valor_integer ::= PARENTESIS_ABRE valor_integer PARENTESIS_CIERRA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "("+e.toString()+")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_integer",115, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // valor_integer ::= NUMERO_ENTERO 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_integer",115, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // valor_integer ::= NOMBRE_VARIABLE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_integer",115, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // string ::= STRING GLOBAL nombre_variables IGUAL get_element PUNTO_COMA 
            {
              Object RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 string = new StringV(vars.toString(),true,null,id.toString()); lstMetodos.add(string); System.out.println(" GETELEMENT BY ID "+vars+" ID: "+id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("string",119, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // string ::= STRING nombre_variables IGUAL get_element PUNTO_COMA 
            {
              Object RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 string = new StringV(vars.toString(),false,null,id.toString()); lstMetodos.add(string); System.out.println(" GETELEMENT BY ID "+vars+" ID: "+id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("string",119, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // string ::= STRING GLOBAL nombre_variables PUNTO_COMA 
            {
              Object RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 string = new StringV(vars.toString(),true,null,null); lstMetodos.add(string);  System.out.println(" VARIABLES: STRING  G "+vars); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("string",119, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // string ::= STRING GLOBAL nombre_variables IGUAL valor_string PUNTO_COMA 
            {
              Object RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 string = new StringV(vars.toString(),true,val.toString(),null); lstMetodos.add(string); System.out.println(" VARIABLES: STRING G "+vars+" Valores: "+val); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("string",119, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // string ::= STRING nombre_variables PUNTO_COMA 
            {
              Object RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 string = new StringV(vars.toString(),false,null,null); lstMetodos.add(string);  System.out.println(" VARIABLES: STRING "+vars); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("string",119, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // string ::= STRING nombre_variables IGUAL valor_string PUNTO_COMA 
            {
              Object RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 string = new StringV(vars.toString(),false,val.toString(),null); lstMetodos.add(string); System.out.println(" VARIABLES: STRING "+vars+" Valores: "+val); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("string",119, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // string ::= STRING nombre_variables IGUAL metodos_especiales PUNTO_COMA 
            {
              Object RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 string = new StringV(vars.toString(),false,null,null,r.toString()); lstMetodos.add(string); System.out.println(" VARIABLES: STRING "+vars); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("string",119, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // string ::= STRING GLOBAL nombre_variables IGUAL metodos_especiales PUNTO_COMA 
            {
              Object RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 string = new StringV(vars.toString(),true,null,null,r.toString()); lstMetodos.add(string); System.out.println(" VARIABLES: STRING "+vars); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("string",119, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // valor_string ::= valor_string SUMA COMILLA TEXTO COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = s.toString()+"+\""+t.toString()+"\""; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_string",121, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // valor_string ::= valor_string SUMA NOMBRE_VARIABLE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s.toString()+"+"+t.toString()+","; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_string",121, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // valor_string ::= COMILLA TEXTO COMILLA 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "\""+t.toString()+"\""; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_string",121, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // valor_string ::= NOMBRE_VARIABLE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t.toString()+""; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_string",121, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // char ::= CHAR GLOBAL nombre_variables PUNTO_COMA 
            {
              Object RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  cha = new CharV(vars.toString(),true,null); lstMetodos.add(cha);  System.out.println(" VARIABLES: CHAR  G "+vars); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("char",123, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // char ::= CHAR GLOBAL nombre_variables IGUAL valor_char PUNTO_COMA 
            {
              Object RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 cha = new CharV(vars.toString(),true,val.toString()); lstMetodos.add(cha);  System.out.println(" VARIABLES: CHAR G "+vars+" Valores: "+val); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("char",123, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // char ::= CHAR nombre_variables PUNTO_COMA 
            {
              Object RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 cha = new CharV(vars.toString(),false,null); lstMetodos.add(cha); System.out.println(" VARIABLES: CHAR "+vars); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("char",123, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // char ::= CHAR nombre_variables IGUAL valor_char PUNTO_COMA 
            {
              Object RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 cha = new CharV(vars.toString(),false,val.toString()); lstMetodos.add(cha); System.out.println(" VARIABLES: CHAR "+vars+" Valores: "+val); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("char",123, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // valor_char ::= valor_char SUMA COMILLA_SIMPLE TEXTO COMILLA_SIMPLE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = s.toString()+t.toString()+","; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_char",124, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // valor_char ::= valor_char SUMA NOMBRE_VARIABLE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s.toString()+t.toString()+","; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_char",124, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // valor_char ::= COMILLA_SIMPLE TEXTO COMILLA_SIMPLE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = t.toString()+","; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_char",124, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // valor_char ::= NOMBRE_VARIABLE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t.toString()+","; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_char",124, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // decimal ::= DECIMAL GLOBAL nombre_variables PUNTO_COMA 
            {
              Object RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 decimal = new DecimalV(vars.toString(),true,null);  lstMetodos.add(decimal); System.out.println(" VARIABLES: DECIMAL  G "+vars); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decimal",122, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // decimal ::= DECIMAL GLOBAL nombre_variables IGUAL valor_decimal PUNTO_COMA 
            {
              Object RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 decimal = new DecimalV(vars.toString(),true,val.toString()); lstMetodos.add(decimal); System.out.println(" VARIABLES: DECIMAL G "+vars+" Valores: "+val); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decimal",122, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // decimal ::= DECIMAL nombre_variables PUNTO_COMA 
            {
              Object RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 decimal = new DecimalV(vars.toString(),false,null); lstMetodos.add(decimal); System.out.println(" VARIABLES: DECIMAL  "+vars); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decimal",122, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // decimal ::= DECIMAL nombre_variables IGUAL valor_decimal PUNTO_COMA 
            {
              Object RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 decimal = new DecimalV(vars.toString(),false,val.toString()); lstMetodos.add(decimal); System.out.println(" VARIABLES: DECIMAL  "+vars+" Valores: "+val); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decimal",122, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // valor_decimal ::= valor_decimal SUMA valor_decimal 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1.toString()+"+"+e2.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_decimal",116, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // valor_decimal ::= valor_decimal RESTA valor_decimal 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1.toString()+"-"+e2.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_decimal",116, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // valor_decimal ::= valor_decimal MULTIPLICACION valor_decimal 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1.toString()+"*"+e2.toString() ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_decimal",116, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // valor_decimal ::= valor_decimal DIVISION valor_decimal 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1.toString()+"/"+e2.toString() ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_decimal",116, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // valor_decimal ::= RESTA valor_decimal 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "-"+e.toString();  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_decimal",116, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // valor_decimal ::= PARENTESIS_ABRE valor_decimal PARENTESIS_CIERRA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "("+e.toString()+")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_decimal",116, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // valor_decimal ::= NUMERO_ENTERO 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_decimal",116, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // valor_decimal ::= NUMERO_DECIMAL 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_decimal",116, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // valor_decimal ::= NOMBRE_VARIABLE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_decimal",116, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // boolean ::= BOOLEAN GLOBAL nombre_variables PUNTO_COMA 
            {
              Object RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 bool = new BooleanV(vars.toString(),true,null); lstMetodos.add(bool);  System.out.println(" VARIABLES: BOOLEAN  G "+vars); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean",125, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // boolean ::= BOOLEAN GLOBAL nombre_variables IGUAL valor_boolean PUNTO_COMA 
            {
              Object RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 bool = new BooleanV(vars.toString(),true,val.toString());  lstMetodos.add(bool); System.out.println(" VARIABLES: BOOLEAN G "+vars+" Valores: "+val); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean",125, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // boolean ::= BOOLEAN nombre_variables PUNTO_COMA 
            {
              Object RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 bool = new BooleanV(vars.toString(),false,null);  lstMetodos.add(bool); System.out.println(" VARIABLES: BOOLEAN  "+vars); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean",125, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // boolean ::= BOOLEAN nombre_variables IGUAL valor_boolean PUNTO_COMA 
            {
              Object RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 bool = new BooleanV(vars.toString(),false,val.toString()); lstMetodos.add(bool); System.out.println(" VARIABLES: BOOLEAN  "+vars+" Valores: "+val); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean",125, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // valor_boolean ::= valor_boolean OR_O_AND operador_logico_boolean 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s.toString()+o.toString()+" "+t.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_boolean",126, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // valor_boolean ::= valor_boolean OR_O_AND NOMBRE_VARIABLE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s.toString()+o.toString()+" "+t.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_boolean",126, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // valor_boolean ::= operador_logico_boolean 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t.toString()+""; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_boolean",126, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // valor_boolean ::= NOMBRE_VARIABLE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t.toString()+" "; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_boolean",126, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // operador_logico_boolean ::= NOT TRUE_O_FALSE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "!"+t.toString()+" "; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_logico_boolean",127, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // operador_logico_boolean ::= NOT NOMBRE_VARIABLE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "!"+t.toString()+" "; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_logico_boolean",127, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // operador_logico_boolean ::= TRUE_O_FALSE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t.toString()+" "; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_logico_boolean",127, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // sentencias_control ::= if instruccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_control",101, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // sentencias_control ::= if bloque_INIT_END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_control",101, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // sentencias_control ::= if instruccion pametro_els 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_control",101, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // sentencias_control ::= if bloque_INIT_END pametro_els 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_control",101, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // sentencias_control ::= if instruccion pametros_elseif pametro_els 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_control",101, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // sentencias_control ::= if bloque_INIT_END pametros_elseif pametro_els 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_control",101, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // if ::= IF PARENTESIS_ABRE condicionales condicionales2 condicionales PARENTESIS_CIERRA THEN 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 iff= new IF(a.toString()+b.toString()+c.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",104, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // if ::= IF PARENTESIS_ABRE condicionales PARENTESIS_CIERRA THEN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",104, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // pametro_els ::= ELSE instruccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pametro_els",103, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 381: // pametro_els ::= ELSE bloque_INIT_END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pametro_els",103, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 382: // pametros_elseif ::= ELSE IF PARENTESIS_ABRE condicionales condicionales2 condicionales PARENTESIS_CIERRA THEN instruccion 
            {
              Object RESULT =null;
		System.out.println("aqui 1");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pametros_elseif",102, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 383: // pametros_elseif ::= ELSE IF PARENTESIS_ABRE condicionales PARENTESIS_CIERRA THEN instruccion 
            {
              Object RESULT =null;
		System.out.println("aqui 2");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pametros_elseif",102, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 384: // pametros_elseif ::= ELSE IF PARENTESIS_ABRE condicionales condicionales2 condicionales PARENTESIS_CIERRA THEN bloque_INIT_END 
            {
              Object RESULT =null;
		System.out.println("aqui 1");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pametros_elseif",102, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 385: // pametros_elseif ::= ELSE IF PARENTESIS_ABRE condicionales PARENTESIS_CIERRA THEN bloque_INIT_END 
            {
              Object RESULT =null;
		System.out.println("aqui 1");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pametros_elseif",102, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 386: // pametros_elseif ::= pametros_elseif ELSE IF PARENTESIS_ABRE condicionales condicionales2 condicionales PARENTESIS_CIERRA THEN instruccion 
            {
              Object RESULT =null;
		System.out.println("aqui 2");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pametros_elseif",102, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 387: // pametros_elseif ::= pametros_elseif ELSE IF PARENTESIS_ABRE condicionales condicionales2 condicionales PARENTESIS_CIERRA THEN bloque_INIT_END 
            {
              Object RESULT =null;
		System.out.println("aqui 2");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pametros_elseif",102, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 388: // bloque_INIT_END ::= INIT ABRE_INIT definicion_variables CIERRA_INIT END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_INIT_END",99, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 389: // bloque_INIT_END ::= INIT ABRE_INIT CIERRA_INIT END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_INIT_END",99, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 390: // repeat ::= REPEAT PARENTESIS_ABRE PARENTESIS_CIERRA HUNTIL PARENTESIS_ABRE PARENTESIS_CIERRA instruccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("repeat",105, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 391: // repeat ::= REPEAT PARENTESIS_ABRE PARENTESIS_CIERRA HUNTIL PARENTESIS_ABRE PARENTESIS_CIERRA bloque_INIT_END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("repeat",105, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 392: // while ::= WHILE PARENTESIS_ABRE PARENTESIS_CIERRA THENWHILE instruccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while",106, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 393: // while ::= WHILE PARENTESIS_ABRE PARENTESIS_CIERRA THENWHILE bloque_INIT_END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while",106, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 394: // insert ::= INSERT PARENTESIS_ABRE PARENTESIS_CIERRA PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("insert",107, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 395: // insert ::= INSERT PARENTESIS_ABRE nombre_variables PARENTESIS_CIERRA PUNTO_COMA 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 System.out.println(" INSERTT "+v.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("insert",107, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 396: // insert ::= INSERT PARENTESIS_ABRE param_var PARENTESIS_CIERRA PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("insert",107, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 397: // param_var ::= COMILLA_SIMPLE TEXTO COMILLA_SIMPLE COMA NOMBRE_VARIABLE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println(" INSERTT "+t.toString()+" Variable "+v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_var",108, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 398: // param_var ::= COMILLA_SIMPLE TEXTO COMILLA_SIMPLE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" INSERTT "+t.toString() ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_var",108, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 399: // metodos_especiales ::= ASC PARENTESIS_ABRE NOMBRE_VARIABLE PARENTESIS_CIERRA 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= "ASC("+b.toString()+".value);"; System.out.println(" ASC "+b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodos_especiales",97, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 400: // metodos_especiales ::= DESC PARENTESIS_ABRE NOMBRE_VARIABLE PARENTESIS_CIERRA 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= "DESC("+b.toString()+".value);"; System.out.println(" DESC "+b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodos_especiales",97, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 401: // metodos_especiales ::= LETPAR_NUM PARENTESIS_ABRE NOMBRE_VARIABLE PARENTESIS_CIERRA 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= "LETPAR_NUM("+b.toString()+".value);"; System.out.println(" LETPAR_NUM "+b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodos_especiales",97, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 402: // metodos_especiales ::= LETIMPAR_NUM PARENTESIS_ABRE NOMBRE_VARIABLE PARENTESIS_CIERRA 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= "LETIMPAR_NUM("+b.toString()+".value);"; System.out.println(" LETIMPAR_NUM "+b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodos_especiales",97, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 403: // metodos_especiales ::= REVERSE PARENTESIS_ABRE NOMBRE_VARIABLE PARENTESIS_CIERRA 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= "REVERSE("+b.toString()+".value);"; System.out.println(" REVERSE "+b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodos_especiales",97, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 404: // metodos_especiales ::= CARACTER_ALEATORIO PARENTESIS_ABRE PARENTESIS_CIERRA 
            {
              Object RESULT =null;
		 RESULT= "CARACTER_ALEATORIO();"; System.out.println(" CARACTER_ALEATORIO "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodos_especiales",97, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 405: // metodos_especiales ::= NUM_ALEATORIO PARENTESIS_ABRE PARENTESIS_CIERRA 
            {
              Object RESULT =null;
		 RESULT= "NUM_ALEATORIO();"; System.out.println(" NUM_ALEATORIO "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodos_especiales",97, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 406: // metodos_especiales2 ::= ALERT_INFO PARENTESIS_ABRE NOMBRE_VARIABLE PARENTESIS_CIERRA PUNTO_COMA 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 alert= new ALERT_INFO(b.toString()); lstMetodos.add(alert);   System.out.println(" DESC "+b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodos_especiales2",98, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 407: // metodos_especiales2 ::= EXIT PARENTESIS_ABRE PARENTESIS_CIERRA PUNTO_COMA 
            {
              Object RESULT =null;
		 System.out.println(" EXIT "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodos_especiales2",98, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 408: // metodos_especiales2 ::= REDIRECT PARENTESIS_ABRE PARENTESIS_CIERRA PUNTO_COMA 
            {
              Object RESULT =null;
		 System.out.println(" REDIRECT "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodos_especiales2",98, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 409: // condicionales ::= condicionales SUMA condicionales 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1.toString()+"+"+e2.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionales",109, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 410: // condicionales ::= condicionales RESTA condicionales 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1.toString()+"-"+e2.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionales",109, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 411: // condicionales ::= condicionales MULTIPLICACION condicionales 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1.toString()+"*"+e2.toString() ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionales",109, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 412: // condicionales ::= condicionales DIVISION condicionales 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1.toString()+"/"+e2.toString() ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionales",109, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 413: // condicionales ::= RESTA condicionales 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "-"+e.toString();  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionales",109, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 414: // condicionales ::= PARENTESIS_ABRE condicionales PARENTESIS_CIERRA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "("+e.toString()+")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionales",109, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 415: // condicionales ::= NUMERO_ENTERO 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionales",109, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 416: // condicionales ::= NUMERO_DECIMAL 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionales",109, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 417: // condicionales ::= NOMBRE_VARIABLE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionales",109, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 418: // cond_str ::= condicionales IGUALDAD condicionales 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1.toString()+"=="+e2.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_str",111, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 419: // cond_str ::= condicionales NO_IGUAL condicionales 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1.toString()+"!="+e2.toString() ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_str",111, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 420: // cond_str ::= PARENTESIS_ABRE condicionales PARENTESIS_CIERRA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "("+e.toString()+")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_str",111, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 421: // cond_str ::= NUMERO_ENTERO 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_str",111, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 422: // cond_str ::= NUMERO_DECIMAL 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_str",111, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 423: // cond_str ::= NOMBRE_VARIABLE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_str",111, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 424: // cond_str ::= COMILLA TEXTO COMILLA 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = t.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_str",111, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 425: // cond_str ::= COMILLA_SIMPLE TEXTO COMILLA_SIMPLE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = t.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_str",111, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 426: // condicionales2 ::= IGUALDAD 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionales2",110, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 427: // condicionales2 ::= NO_IGUAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionales2",110, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 428: // condicionales2 ::= MENOR_QUE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionales2",110, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 429: // condicionales2 ::= MENOR_IGUAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionales2",110, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 430: // condicionales2 ::= MAYOR_QUE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionales2",110, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 431: // condicionales2 ::= MAYOR_IGUAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionales2",110, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 432: // condicionales2 ::= OR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionales2",110, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 433: // condicionales2 ::= AND 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionales2",110, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 434: // condicionales2 ::= NOT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionales2",110, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* select the action handler based on the action number */
      switch (CUP$parser$act_num/300)
        {
          /*. . . . . . . . 0 < #action < 300. . . . . . . . . . . .*/
          case 0: 
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
          /*. . . . . . . . 300 < #action < 600. . . . . . . . . . . .*/
          case 1: 
              return CUP$parser$do_action_part00000001(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
          /* . . . no valid action number: . . .*/
          default:
            throw new Exception("Invalid action number found in internal parse table");

        }      /* end of switch */
    }
}

}
