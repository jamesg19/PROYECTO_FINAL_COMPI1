
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadoress;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;
import java.util.ArrayList;
import Variables.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0179\000\002\002\004\000\002\137\003\000\002\002" +
    "\014\000\002\002\013\000\002\003\010\000\002\003\010" +
    "\000\002\003\005\000\002\003\005\000\002\015\007\000" +
    "\002\016\007\000\002\011\012\000\002\011\012\000\002" +
    "\011\011\000\002\004\004\000\002\004\004\000\002\004" +
    "\003\000\002\005\003\000\002\006\003\000\002\012\014" +
    "\000\002\012\013\000\002\010\005\000\002\010\004\000" +
    "\002\013\007\000\002\017\015\000\002\017\014\000\002" +
    "\020\007\000\002\020\007\000\002\021\004\000\002\021" +
    "\003\000\002\021\004\000\002\021\003\000\002\021\004" +
    "\000\002\021\003\000\002\021\004\000\002\021\003\000" +
    "\002\021\004\000\002\021\003\000\002\021\004\000\002" +
    "\021\003\000\002\021\004\000\002\021\003\000\002\021" +
    "\004\000\002\021\003\000\002\021\004\000\002\021\003" +
    "\000\002\021\004\000\002\021\003\000\002\021\004\000" +
    "\002\021\003\000\002\024\007\000\002\024\006\000\002" +
    "\024\006\000\002\024\005\000\002\023\006\000\002\023" +
    "\006\000\002\023\006\000\002\023\006\000\002\023\006" +
    "\000\002\023\005\000\002\023\005\000\002\023\005\000" +
    "\002\023\005\000\002\023\005\000\002\027\007\000\002" +
    "\030\007\000\002\031\007\000\002\025\007\000\002\026" +
    "\007\000\002\026\007\000\002\022\005\000\002\033\007" +
    "\000\002\033\006\000\002\033\006\000\002\033\005\000" +
    "\002\032\006\000\002\032\006\000\002\032\006\000\002" +
    "\032\006\000\002\032\006\000\002\032\005\000\002\032" +
    "\005\000\002\032\005\000\002\032\005\000\002\032\005" +
    "\000\002\036\007\000\002\037\007\000\002\040\007\000" +
    "\002\034\007\000\002\035\007\000\002\035\007\000\002" +
    "\042\007\000\002\042\006\000\002\042\006\000\002\042" +
    "\005\000\002\041\006\000\002\041\006\000\002\041\006" +
    "\000\002\041\006\000\002\041\006\000\002\041\005\000" +
    "\002\041\005\000\002\041\005\000\002\041\005\000\002" +
    "\041\005\000\002\045\007\000\002\046\007\000\002\047" +
    "\007\000\002\043\007\000\002\044\007\000\002\044\007" +
    "\000\002\102\007\000\002\102\006\000\002\102\006\000" +
    "\002\102\005\000\002\101\006\000\002\101\006\000\002" +
    "\101\006\000\002\101\006\000\002\101\006\000\002\101" +
    "\006\000\002\101\005\000\002\101\005\000\002\101\005" +
    "\000\002\101\005\000\002\101\005\000\002\101\005\000" +
    "\002\105\007\000\002\106\007\000\002\107\007\000\002" +
    "\103\007\000\002\104\007\000\002\104\007\000\002\100" +
    "\007\000\002\051\007\000\002\051\006\000\002\051\006" +
    "\000\002\051\005\000\002\050\006\000\002\050\006\000" +
    "\002\050\006\000\002\050\006\000\002\050\006\000\002" +
    "\050\006\000\002\050\005\000\002\050\005\000\002\050" +
    "\005\000\002\050\005\000\002\050\005\000\002\050\005" +
    "\000\002\053\007\000\002\054\007\000\002\055\007\000" +
    "\002\052\007\000\002\057\007\000\002\056\007\000\002" +
    "\070\007\000\002\070\006\000\002\070\006\000\002\070" +
    "\005\000\002\067\006\000\002\067\006\000\002\067\006" +
    "\000\002\067\006\000\002\067\006\000\002\067\006\000" +
    "\002\067\006\000\002\067\005\000\002\067\005\000\002" +
    "\067\005\000\002\067\005\000\002\067\005\000\002\067" +
    "\005\000\002\067\005\000\002\072\007\000\002\073\007" +
    "\000\002\074\007\000\002\071\007\000\002\075\007\000" +
    "\002\075\007\000\002\076\007\000\002\076\007\000\002" +
    "\077\007\000\002\061\007\000\002\061\006\000\002\061" +
    "\006\000\002\061\005\000\002\060\006\000\002\060\006" +
    "\000\002\060\006\000\002\060\006\000\002\060\006\000" +
    "\002\060\005\000\002\060\005\000\002\060\005\000\002" +
    "\060\005\000\002\060\005\000\002\063\007\000\002\064" +
    "\007\000\002\065\007\000\002\062\007\000\002\066\007" +
    "\000\002\111\007\000\002\111\006\000\002\111\005\000" +
    "\002\110\006\000\002\110\006\000\002\110\006\000\002" +
    "\110\006\000\002\110\006\000\002\110\005\000\002\110" +
    "\005\000\002\110\005\000\002\110\005\000\002\110\005" +
    "\000\002\114\007\000\002\115\007\000\002\116\007\000" +
    "\002\112\007\000\002\113\007\000\002\113\007\000\002" +
    "\117\006\000\002\117\005\000\002\121\007\000\002\121" +
    "\006\000\002\121\005\000\002\120\006\000\002\120\006" +
    "\000\002\120\006\000\002\120\006\000\002\120\006\000" +
    "\002\120\006\000\002\120\006\000\002\120\005\000\002" +
    "\120\005\000\002\120\005\000\002\120\005\000\002\120" +
    "\005\000\002\120\005\000\002\120\005\000\002\125\007" +
    "\000\002\126\007\000\002\127\007\000\002\122\007\000" +
    "\002\124\007\000\002\124\007\000\002\123\007\000\002" +
    "\123\007\000\002\130\007\000\002\131\006\000\002\131" +
    "\006\000\002\133\004\000\002\133\003\000\002\132\004" +
    "\000\002\132\003\000\002\134\006\000\002\134\005\000" +
    "\002\136\007\000\002\151\004\000\002\151\003\000\002" +
    "\151\004\000\002\151\003\000\002\151\004\000\002\151" +
    "\003\000\002\151\004\000\002\151\003\000\002\151\004" +
    "\000\002\151\003\000\002\151\004\000\002\151\003\000" +
    "\002\151\004\000\002\151\003\000\002\151\004\000\002" +
    "\151\003\000\002\143\003\000\002\143\003\000\002\143" +
    "\003\000\002\143\003\000\002\143\003\000\002\143\003" +
    "\000\002\143\003\000\002\157\006\000\002\160\005\000" +
    "\002\160\005\000\002\160\005\000\002\160\005\000\002" +
    "\160\005\000\002\160\004\000\002\160\005\000\002\160" +
    "\003\000\002\160\003\000\002\160\003\000\002\160\005" +
    "\000\002\160\005\000\002\160\003\000\002\162\010\000" +
    "\002\152\006\000\002\152\010\000\002\152\005\000\002" +
    "\152\007\000\002\153\005\000\002\153\003\000\002\154" +
    "\005\000\002\154\005\000\002\154\005\000\002\154\005" +
    "\000\002\154\004\000\002\154\005\000\002\154\003\000" +
    "\002\154\003\000\002\161\010\000\002\161\007\000\002" +
    "\161\006\000\002\161\010\000\002\161\005\000\002\161" +
    "\007\000\002\163\007\000\002\163\005\000\002\163\005" +
    "\000\002\163\003\000\002\165\006\000\002\165\010\000" +
    "\002\165\005\000\002\165\007\000\002\166\007\000\002" +
    "\166\005\000\002\166\005\000\002\166\003\000\002\164" +
    "\006\000\002\164\010\000\002\164\005\000\002\164\007" +
    "\000\002\155\005\000\002\155\005\000\002\155\005\000" +
    "\002\155\005\000\002\155\004\000\002\155\005\000\002" +
    "\155\003\000\002\155\003\000\002\155\003\000\002\167" +
    "\006\000\002\167\010\000\002\167\005\000\002\167\007" +
    "\000\002\170\005\000\002\170\005\000\002\170\003\000" +
    "\002\170\003\000\002\171\004\000\002\171\004\000\002" +
    "\171\003\000\002\150\004\000\002\150\003\000\002\144" +
    "\004\000\002\144\004\000\002\144\005\000\002\144\005" +
    "\000\002\144\006\000\002\144\006\000\002\147\006\000" +
    "\002\146\004\000\002\146\004\000\002\145\010\000\002" +
    "\145\010\000\002\145\011\000\002\145\011\000\002\142" +
    "\007\000\002\142\006\000\002\140\007\000\002\140\007" +
    "\000\002\140\007\000\002\140\007\000\002\140\007\000" +
    "\002\140\006\000\002\140\006\000\002\140\007\000\002" +
    "\140\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u03b1\000\004\075\005\001\002\000\004\002\u03b3\001" +
    "\002\000\004\004\007\001\002\000\004\002\000\001\002" +
    "\000\006\077\011\136\012\001\002\000\004\077\u03ac\001" +
    "\002\000\004\075\037\001\002\000\006\036\013\037\015" +
    "\001\002\000\004\073\033\001\002\000\004\137\027\001" +
    "\002\000\004\073\023\001\002\000\004\137\017\001\002" +
    "\000\006\077\ufffa\136\020\001\002\000\004\037\015\001" +
    "\002\000\004\137\022\001\002\000\004\077\ufffd\001\002" +
    "\000\004\140\024\001\002\000\004\030\025\001\002\000" +
    "\004\140\026\001\002\000\004\137\ufff8\001\002\000\006" +
    "\077\ufffb\136\030\001\002\000\004\036\013\001\002\000" +
    "\004\137\032\001\002\000\004\077\ufffc\001\002\000\004" +
    "\140\034\001\002\000\004\031\035\001\002\000\004\140" +
    "\036\001\002\000\004\137\ufff9\001\002\000\004\005\u037e" +
    "\001\002\000\004\075\042\001\002\000\004\075\u037a\001" +
    "\002\000\004\010\043\001\002\000\004\136\044\001\002" +
    "\000\006\026\046\137\047\001\002\000\004\137\u0373\001" +
    "\002\000\004\073\u036d\001\002\000\004\077\050\001\002" +
    "\000\030\075\062\160\055\162\073\164\051\166\077\170" +
    "\065\172\070\174\057\176\061\202\052\204\063\001\002" +
    "\000\006\077\u0339\136\u033b\001\002\000\006\077\u02f5\136" +
    "\u02f7\001\002\000\030\075\u02e9\160\055\162\073\164\051" +
    "\166\077\170\065\172\070\174\057\176\061\202\052\204" +
    "\063\001\002\000\032\075\uffdd\160\uffdd\162\uffdd\164\uffdd" +
    "\166\uffdd\170\uffdd\172\uffdd\174\uffdd\176\uffdd\202\uffdd\203" +
    "\uffdd\204\uffdd\001\002\000\006\077\u02b2\136\u02b3\001\002" +
    "\000\032\075\uffd7\160\uffd7\162\uffd7\164\uffd7\166\uffd7\170" +
    "\uffd7\172\uffd7\174\uffd7\176\uffd7\202\uffd7\203\uffd7\204\uffd7" +
    "\001\002\000\006\077\u0280\136\u0281\001\002\000\032\075" +
    "\uffd5\160\uffd5\162\uffd5\164\uffd5\166\uffd5\170\uffd5\172\uffd5" +
    "\174\uffd5\176\uffd5\202\uffd5\203\uffd5\204\uffd5\001\002\000" +
    "\006\077\u024a\136\u024b\001\002\000\004\020\u0248\001\002" +
    "\000\004\077\u0130\001\002\000\032\075\uffe1\160\uffe1\162" +
    "\uffe1\164\uffe1\166\uffe1\170\uffe1\172\uffe1\174\uffe1\176\uffe1" +
    "\202\uffe1\203\uffe1\204\uffe1\001\002\000\006\077\366\136" +
    "\370\001\002\000\032\075\uffdb\160\uffdb\162\uffdb\164\uffdb" +
    "\166\uffdb\170\uffdb\172\uffdb\174\uffdb\176\uffdb\202\uffdb\203" +
    "\uffdb\204\uffdb\001\002\000\032\075\uffd1\160\uffd1\162\uffd1" +
    "\164\uffd1\166\uffd1\170\uffd1\172\uffd1\174\uffd1\176\uffd1\202" +
    "\uffd1\203\uffd1\204\uffd1\001\002\000\006\077\260\136\261" +
    "\001\002\000\032\075\uffd9\160\uffd9\162\uffd9\164\uffd9\166" +
    "\uffd9\170\uffd9\172\uffd9\174\uffd9\176\uffd9\202\uffd9\203\uffd9" +
    "\204\uffd9\001\002\000\032\075\uffdf\160\uffdf\162\uffdf\164" +
    "\uffdf\166\uffdf\170\uffdf\172\uffdf\174\uffdf\176\uffdf\202\uffdf" +
    "\203\uffdf\204\uffdf\001\002\000\006\077\174\136\176\001" +
    "\002\000\032\075\uffe3\160\uffe3\162\uffe3\164\uffe3\166\uffe3" +
    "\170\uffe3\172\uffe3\174\uffe3\176\uffe3\202\uffe3\203\uffe3\204" +
    "\uffe3\001\002\000\032\075\uffe5\160\uffe5\162\uffe5\164\uffe5" +
    "\166\uffe5\170\uffe5\172\uffe5\174\uffe5\176\uffe5\202\uffe5\203" +
    "\uffe5\204\uffe5\001\002\000\032\075\uffd3\160\uffd3\162\uffd3" +
    "\164\uffd3\166\uffd3\170\uffd3\172\uffd3\174\uffd3\176\uffd3\202" +
    "\uffd3\203\uffd3\204\uffd3\001\002\000\006\077\101\136\102" +
    "\001\002\000\004\077\170\001\002\000\006\030\165\167" +
    "\166\001\002\000\016\022\103\027\116\033\112\034\114" +
    "\036\115\155\110\001\002\000\004\073\157\001\002\000" +
    "\004\137\155\001\002\000\004\137\153\001\002\000\004" +
    "\137\151\001\002\000\004\137\147\001\002\000\004\073" +
    "\143\001\002\000\004\137\141\001\002\000\004\073\135" +
    "\001\002\000\004\137\133\001\002\000\004\073\127\001" +
    "\002\000\004\073\123\001\002\000\004\073\117\001\002" +
    "\000\004\140\120\001\002\000\004\157\121\001\002\000" +
    "\004\140\122\001\002\000\004\137\uff83\001\002\000\004" +
    "\140\124\001\002\000\004\031\125\001\002\000\004\140" +
    "\126\001\002\000\004\137\uff80\001\002\000\004\140\130" +
    "\001\002\000\004\035\131\001\002\000\004\140\132\001" +
    "\002\000\004\137\uff7d\001\002\000\006\077\uff87\136\102" +
    "\001\002\000\004\077\uff8d\001\002\000\004\140\136\001" +
    "\002\000\004\156\137\001\002\000\004\140\140\001\002" +
    "\000\004\137\uff81\001\002\000\006\077\uff84\136\102\001" +
    "\002\000\004\077\uff8a\001\002\000\004\140\144\001\002" +
    "\000\004\032\145\001\002\000\004\140\146\001\002\000" +
    "\004\137\uff82\001\002\000\006\077\uff85\136\102\001\002" +
    "\000\004\077\uff8b\001\002\000\006\077\uff86\136\102\001" +
    "\002\000\004\077\uff8c\001\002\000\006\077\uff89\136\102" +
    "\001\002\000\004\077\uff8f\001\002\000\006\077\uff88\136" +
    "\102\001\002\000\004\077\uff8e\001\002\000\004\140\160" +
    "\001\002\000\006\057\161\060\162\001\002\000\004\140" +
    "\164\001\002\000\004\140\163\001\002\000\004\137\uff7f" +
    "\001\002\000\004\137\uff7e\001\002\000\004\167\167\001" +
    "\002\000\032\075\uff90\160\uff90\162\uff90\164\uff90\166\uff90" +
    "\170\uff90\172\uff90\174\uff90\176\uff90\202\uff90\203\uff90\204" +
    "\uff90\001\002\000\032\075\uff91\160\uff91\162\uff91\164\uff91" +
    "\166\uff91\170\uff91\172\uff91\174\uff91\176\uff91\202\uff91\203" +
    "\uff91\204\uff91\001\002\000\006\030\171\167\172\001\002" +
    "\000\004\167\173\001\002\000\032\075\uff92\160\uff92\162" +
    "\uff92\164\uff92\166\uff92\170\uff92\172\uff92\174\uff92\176\uff92" +
    "\202\uff92\203\uff92\204\uff92\001\002\000\032\075\uff93\160" +
    "\uff93\162\uff93\164\uff93\166\uff93\170\uff93\172\uff93\174\uff93" +
    "\176\uff93\202\uff93\203\uff93\204\uff93\001\002\000\006\030" +
    "\255\163\256\001\002\000\004\077\251\001\002\000\014" +
    "\022\177\027\210\033\206\036\207\155\205\001\002\000" +
    "\004\073\243\001\002\000\004\137\241\001\002\000\004" +
    "\137\237\001\002\000\004\137\235\001\002\000\004\137" +
    "\233\001\002\000\004\137\231\001\002\000\004\073\225" +
    "\001\002\000\004\073\221\001\002\000\004\073\215\001" +
    "\002\000\004\073\211\001\002\000\004\140\212\001\002" +
    "\000\004\157\213\001\002\000\004\140\214\001\002\000" +
    "\004\137\uffad\001\002\000\004\140\216\001\002\000\004" +
    "\031\217\001\002\000\004\140\220\001\002\000\004\137" +
    "\uffaa\001\002\000\004\140\222\001\002\000\004\156\223" +
    "\001\002\000\004\140\224\001\002\000\004\137\uffab\001" +
    "\002\000\004\140\226\001\002\000\004\032\227\001\002" +
    "\000\004\140\230\001\002\000\004\137\uffac\001\002\000" +
    "\006\077\uffb0\136\176\001\002\000\004\077\uffb5\001\002" +
    "\000\006\077\uffaf\136\176\001\002\000\004\077\uffb4\001" +
    "\002\000\006\077\uffae\136\176\001\002\000\004\077\uffb3" +
    "\001\002\000\006\077\uffb2\136\176\001\002\000\004\077" +
    "\uffb7\001\002\000\006\077\uffb1\136\176\001\002\000\004" +
    "\077\uffb6\001\002\000\004\140\244\001\002\000\006\057" +
    "\245\060\246\001\002\000\004\140\250\001\002\000\004" +
    "\140\247\001\002\000\004\137\uffa9\001\002\000\004\137" +
    "\uffa8\001\002\000\006\030\252\163\253\001\002\000\004" +
    "\163\254\001\002\000\032\075\uffba\160\uffba\162\uffba\164" +
    "\uffba\166\uffba\170\uffba\172\uffba\174\uffba\176\uffba\202\uffba" +
    "\203\uffba\204\uffba\001\002\000\032\075\uffbb\160\uffbb\162" +
    "\uffbb\164\uffbb\166\uffbb\170\uffbb\172\uffbb\174\uffbb\176\uffbb" +
    "\202\uffbb\203\uffbb\204\uffbb\001\002\000\004\163\257\001" +
    "\002\000\032\075\uffb8\160\uffb8\162\uffb8\164\uffb8\166\uffb8" +
    "\170\uffb8\172\uffb8\174\uffb8\176\uffb8\202\uffb8\203\uffb8\204" +
    "\uffb8\001\002\000\032\075\uffb9\160\uffb9\162\uffb9\164\uffb9" +
    "\166\uffb9\170\uffb9\172\uffb9\174\uffb9\176\uffb9\202\uffb9\203" +
    "\uffb9\204\uffb9\001\002\000\006\030\363\173\364\001\002" +
    "\000\020\022\267\026\272\027\302\033\277\036\300\052" +
    "\273\155\275\001\002\000\004\077\263\001\002\000\006" +
    "\030\264\173\265\001\002\000\004\173\266\001\002\000" +
    "\032\075\uff65\160\uff65\162\uff65\164\uff65\166\uff65\170\uff65" +
    "\172\uff65\174\uff65\176\uff65\202\uff65\203\uff65\204\uff65\001" +
    "\002\000\032\075\uff66\160\uff66\162\uff66\164\uff66\166\uff66" +
    "\170\uff66\172\uff66\174\uff66\176\uff66\202\uff66\203\uff66\204" +
    "\uff66\001\002\000\004\073\355\001\002\000\004\137\353" +
    "\001\002\000\004\137\351\001\002\000\004\073\343\001" +
    "\002\000\004\073\337\001\002\000\004\137\335\001\002" +
    "\000\004\073\331\001\002\000\004\137\327\001\002\000" +
    "\004\073\323\001\002\000\004\073\317\001\002\000\004" +
    "\137\315\001\002\000\004\073\311\001\002\000\004\137" +
    "\307\001\002\000\004\137\305\001\002\000\006\077\uff5a" +
    "\136\261\001\002\000\004\077\uff61\001\002\000\006\077" +
    "\uff59\136\261\001\002\000\004\077\uff60\001\002\000\004" +
    "\140\312\001\002\000\004\157\313\001\002\000\004\140" +
    "\314\001\002\000\004\137\uff54\001\002\000\006\077\uff55" +
    "\136\261\001\002\000\004\077\uff5c\001\002\000\004\140" +
    "\320\001\002\000\004\031\321\001\002\000\004\140\322" +
    "\001\002\000\004\137\uff51\001\002\000\004\140\324\001" +
    "\002\000\004\156\325\001\002\000\004\140\326\001\002" +
    "\000\004\137\uff52\001\002\000\006\077\uff5b\136\261\001" +
    "\002\000\004\077\uff62\001\002\000\004\140\332\001\002" +
    "\000\004\032\333\001\002\000\004\140\334\001\002\000" +
    "\004\137\uff53\001\002\000\006\077\uff57\136\261\001\002" +
    "\000\004\077\uff5e\001\002\000\004\140\340\001\002\000" +
    "\004\053\341\001\002\000\004\140\342\001\002\000\004" +
    "\137\uff4c\001\002\000\004\140\344\001\002\000\006\057" +
    "\345\060\346\001\002\000\004\140\350\001\002\000\004" +
    "\140\347\001\002\000\004\137\uff4d\001\002\000\004\137" +
    "\uff4e\001\002\000\006\077\uff56\136\261\001\002\000\004" +
    "\077\uff5d\001\002\000\006\077\uff58\136\261\001\002\000" +
    "\004\077\uff5f\001\002\000\004\140\356\001\002\000\006" +
    "\057\357\060\360\001\002\000\004\140\362\001\002\000" +
    "\004\140\361\001\002\000\004\137\uff50\001\002\000\004" +
    "\137\uff4f\001\002\000\004\173\365\001\002\000\032\075" +
    "\uff63\160\uff63\162\uff63\164\uff63\166\uff63\170\uff63\172\uff63" +
    "\174\uff63\176\uff63\202\uff63\203\uff63\204\uff63\001\002\000" +
    "\032\075\uff64\160\uff64\162\uff64\164\uff64\166\uff64\170\uff64" +
    "\172\uff64\174\uff64\176\uff64\202\uff64\203\uff64\204\uff64\001" +
    "\002\000\006\030\u012d\171\u012e\001\002\000\004\077\u0129" +
    "\001\002\000\016\027\u0102\033\374\036\u0101\040\u0100\041" +
    "\u0103\155\372\001\002\000\004\137\u0127\001\002\000\004" +
    "\073\u0123\001\002\000\004\137\u0121\001\002\000\004\073" +
    "\u011d\001\002\000\004\137\u011b\001\002\000\004\137\u0119" +
    "\001\002\000\004\137\u0117\001\002\000\004\073\u0113\001" +
    "\002\000\004\073\u010f\001\002\000\004\073\u010b\001\002" +
    "\000\004\073\u0107\001\002\000\004\137\u0105\001\002\000" +
    "\006\077\uff6d\136\370\001\002\000\004\077\uff73\001\002" +
    "\000\004\140\u0108\001\002\000\004\152\u0109\001\002\000" +
    "\004\140\u010a\001\002\000\004\137\uff67\001\002\000\004" +
    "\140\u010c\001\002\000\004\157\u010d\001\002\000\004\140" +
    "\u010e\001\002\000\004\137\uff6c\001\002\000\004\140\u0110" +
    "\001\002\000\004\031\u0111\001\002\000\004\140\u0112\001" +
    "\002\000\004\137\uff69\001\002\000\004\140\u0114\001\002" +
    "\000\004\152\u0115\001\002\000\004\140\u0116\001\002\000" +
    "\004\137\uff68\001\002\000\006\077\uff71\136\370\001\002" +
    "\000\004\077\uff77\001\002\000\006\077\uff6e\136\370\001" +
    "\002\000\004\077\uff74\001\002\000\006\077\uff70\136\370" +
    "\001\002\000\004\077\uff76\001\002\000\004\140\u011e\001" +
    "\002\000\004\156\u011f\001\002\000\004\140\u0120\001\002" +
    "\000\004\137\uff6a\001\002\000\006\077\uff6f\136\370\001" +
    "\002\000\004\077\uff75\001\002\000\004\140\u0124\001\002" +
    "\000\004\032\u0125\001\002\000\004\140\u0126\001\002\000" +
    "\004\137\uff6b\001\002\000\006\077\uff72\136\370\001\002" +
    "\000\004\077\uff78\001\002\000\006\030\u012a\171\u012b\001" +
    "\002\000\004\171\u012c\001\002\000\032\075\uff7b\160\uff7b" +
    "\162\uff7b\164\uff7b\166\uff7b\170\uff7b\172\uff7b\174\uff7b\176" +
    "\uff7b\202\uff7b\203\uff7b\204\uff7b\001\002\000\032\075\uff7c" +
    "\160\uff7c\162\uff7c\164\uff7c\166\uff7c\170\uff7c\172\uff7c\174" +
    "\uff7c\176\uff7c\202\uff7c\203\uff7c\204\uff7c\001\002\000\004" +
    "\171\u012f\001\002\000\032\075\uff79\160\uff79\162\uff79\164" +
    "\uff79\166\uff79\170\uff79\172\uff79\174\uff79\176\uff79\202\uff79" +
    "\203\uff79\204\uff79\001\002\000\032\075\uff7a\160\uff7a\162" +
    "\uff7a\164\uff7a\166\uff7a\170\uff7a\172\uff7a\174\uff7a\176\uff7a" +
    "\202\uff7a\203\uff7a\204\uff7a\001\002\000\006\053\u0133\056" +
    "\u0131\001\002\000\004\134\u0244\001\002\000\004\205\u0243" +
    "\001\002\000\004\136\u013a\001\002\000\004\205\u0139\001" +
    "\002\000\006\053\u0133\205\uff04\001\002\000\006\053\u0133" +
    "\205\uff06\001\002\000\004\205\uff07\001\002\000\004\205" +
    "\uff05\001\002\000\032\075\uff09\160\uff09\162\uff09\164\uff09" +
    "\166\uff09\170\uff09\172\uff09\174\uff09\176\uff09\202\uff09\203" +
    "\uff09\204\uff09\001\002\000\044\061\u013e\063\u0151\064\u0143" +
    "\065\u0147\070\u0142\071\u0149\105\u0150\106\u013f\107\u0148\110" +
    "\u013b\111\u0155\112\u0152\113\u014c\114\u014e\115\u013d\122\u0145" +
    "\137\u0141\001\002\000\004\134\u023f\001\002\000\046\061" +
    "\u013e\063\u0151\064\u0143\065\u0147\070\u0142\071\u0149\105\u0150" +
    "\106\u013f\107\u0148\110\u013b\111\u0155\112\u0152\113\u014c\114" +
    "\u014e\115\u013d\122\u0145\133\ufefd\137\ufefd\001\002\000\004" +
    "\134\u023b\001\002\000\004\073\u021f\001\002\000\004\134" +
    "\u021b\001\002\000\046\061\u013e\063\u0151\064\u0143\065\u0147" +
    "\070\u0142\071\u0149\105\u0150\106\u013f\107\u0148\110\u013b\111" +
    "\u0155\112\u0152\113\u014c\114\u014e\115\u013d\122\u0145\133\ufefb" +
    "\137\ufefb\001\002\000\006\053\uff02\205\uff02\001\002\000" +
    "\006\061\u0161\062\u0206\001\002\000\006\061\u0161\062\u01eb" +
    "\001\002\000\004\137\u01ea\001\002\000\004\134\u01e7\001" +
    "\002\000\046\061\u013e\063\u0151\064\u0143\065\u0147\070\u0142" +
    "\071\u0149\105\u0150\106\u013f\107\u0148\110\u013b\111\u0155\112" +
    "\u0152\113\u014c\114\u014e\115\u013d\122\u0145\133\ufef1\137\ufef1" +
    "\001\002\000\006\061\u0161\062\u01d2\001\002\000\004\134" +
    "\u01ce\001\002\000\006\061\u0161\062\u01b0\001\002\000\042" +
    "\061\u013e\063\u0151\064\u0143\065\u0147\070\u0142\071\u0149\105" +
    "\u0150\106\u013f\107\u0148\110\u013b\111\u0155\112\u0152\113\u014c" +
    "\114\u014e\115\u013d\120\u018b\001\002\000\046\061\u013e\063" +
    "\u0151\064\u0143\065\u0147\070\u0142\071\u0149\105\u0150\106\u013f" +
    "\107\u0148\110\u013b\111\u0155\112\u0152\113\u014c\114\u014e\115" +
    "\u013d\122\u0145\133\ufef7\137\ufef7\001\002\000\004\134\u0186" +
    "\001\002\000\046\061\u013e\063\u0151\064\u0143\065\u0147\070" +
    "\u0142\071\u0149\105\u0150\106\u013f\107\u0148\110\u013b\111\u0155" +
    "\112\u0152\113\u014c\114\u014e\115\u013d\122\u0145\133\ufef3\137" +
    "\ufef3\001\002\000\004\134\u0181\001\002\000\046\061\u013e" +
    "\063\u0151\064\u0143\065\u0147\070\u0142\071\u0149\105\u0150\106" +
    "\u013f\107\u0148\110\u013b\111\u0155\112\u0152\113\u014c\114\u014e" +
    "\115\u013d\122\u0145\133\ufeff\137\ufeff\001\002\000\004\134" +
    "\u017c\001\002\000\006\061\u0161\062\u015f\001\002\000\004" +
    "\134\u015c\001\002\000\046\061\u013e\063\u0151\064\u0143\065" +
    "\u0147\070\u0142\071\u0149\105\u0150\106\u013f\107\u0148\110\u013b" +
    "\111\u0155\112\u0152\113\u014c\114\u014e\115\u013d\122\u0145\133" +
    "\ufef9\137\ufef9\001\002\000\046\061\u013e\063\u0151\064\u0143" +
    "\065\u0147\070\u0142\071\u0149\105\u0150\106\u013f\107\u0148\110" +
    "\u013b\111\u0155\112\u0152\113\u014c\114\u014e\115\u013d\122\u0145" +
    "\133\ufef5\137\ufef5\001\002\000\004\134\u0156\001\002\000" +
    "\004\061\u0157\001\002\000\004\135\u0158\001\002\000\004" +
    "\144\u0159\001\002\000\050\061\ufe8d\063\ufe8d\064\ufe8d\065" +
    "\ufe8d\070\ufe8d\071\ufe8d\105\ufe8d\106\ufe8d\107\ufe8d\110\ufe8d" +
    "\111\ufe8d\112\ufe8d\113\ufe8d\114\ufe8d\115\ufe8d\122\ufe8d\123" +
    "\ufe8d\133\ufe8d\137\ufe8d\001\002\000\006\133\ufef6\137\ufef6" +
    "\001\002\000\006\133\ufefa\137\ufefa\001\002\000\004\135" +
    "\u015d\001\002\000\004\144\u015e\001\002\000\050\061\ufe8c" +
    "\063\ufe8c\064\ufe8c\065\ufe8c\070\ufe8c\071\ufe8c\105\ufe8c\106" +
    "\ufe8c\107\ufe8c\110\ufe8c\111\ufe8c\112\ufe8c\113\ufe8c\114\ufe8c" +
    "\115\ufe8c\122\ufe8c\123\ufe8c\133\ufe8c\137\ufe8c\001\002\000" +
    "\004\061\u0161\001\002\000\010\073\u0164\144\u0163\145\u0162" +
    "\001\002\000\010\073\ufed5\144\ufed5\145\ufed5\001\002\000" +
    "\004\061\u0176\001\002\000\050\061\ufed8\063\ufed8\064\ufed8" +
    "\065\ufed8\070\ufed8\071\ufed8\105\ufed8\106\ufed8\107\ufed8\110" +
    "\ufed8\111\ufed8\112\ufed8\113\ufed8\114\ufed8\115\ufed8\122\ufed8" +
    "\123\ufed8\133\ufed8\137\ufed8\001\002\000\012\061\u0169\134" +
    "\u0168\147\u0165\152\u0167\001\002\000\012\061\u0169\134\u0168" +
    "\147\u0165\152\u0167\001\002\000\014\144\u0174\146\u016e\147" +
    "\u016c\150\u016b\151\u016f\001\002\000\016\135\ufece\144\ufece" +
    "\146\ufece\147\ufece\150\ufece\151\ufece\001\002\000\012\061" +
    "\u0169\134\u0168\147\u0165\152\u0167\001\002\000\016\135\ufecd" +
    "\144\ufecd\146\ufecd\147\ufecd\150\ufecd\151\ufecd\001\002\000" +
    "\014\135\u016d\146\u016e\147\u016c\150\u016b\151\u016f\001\002" +
    "\000\012\061\u0169\134\u0168\147\u0165\152\u0167\001\002\000" +
    "\012\061\u0169\134\u0168\147\u0165\152\u0167\001\002\000\016" +
    "\135\ufecf\144\ufecf\146\ufecf\147\ufecf\150\ufecf\151\ufecf\001" +
    "\002\000\012\061\u0169\134\u0168\147\u0165\152\u0167\001\002" +
    "\000\012\061\u0169\134\u0168\147\u0165\152\u0167\001\002\000" +
    "\016\135\ufed1\144\ufed1\146\ufed1\147\ufed1\150\ufed1\151\ufed1" +
    "\001\002\000\016\135\ufed4\144\ufed4\146\ufed4\147\ufed4\150" +
    "\u016b\151\u016f\001\002\000\016\135\ufed3\144\ufed3\146\ufed3" +
    "\147\ufed3\150\u016b\151\u016f\001\002\000\016\135\ufed2\144" +
    "\ufed2\146\ufed2\147\ufed2\150\ufed2\151\ufed2\001\002\000\050" +
    "\061\ufed7\063\ufed7\064\ufed7\065\ufed7\070\ufed7\071\ufed7\105" +
    "\ufed7\106\ufed7\107\ufed7\110\ufed7\111\ufed7\112\ufed7\113\ufed7" +
    "\114\ufed7\115\ufed7\122\ufed7\123\ufed7\133\ufed7\137\ufed7\001" +
    "\002\000\016\135\ufed0\144\ufed0\146\ufed0\147\ufed0\150\ufed0" +
    "\151\ufed0\001\002\000\010\073\ufed6\144\ufed6\145\ufed6\001" +
    "\002\000\010\073\u0179\144\u0178\145\u0162\001\002\000\050" +
    "\061\ufeda\063\ufeda\064\ufeda\065\ufeda\070\ufeda\071\ufeda\105" +
    "\ufeda\106\ufeda\107\ufeda\110\ufeda\111\ufeda\112\ufeda\113\ufeda" +
    "\114\ufeda\115\ufeda\122\ufeda\123\ufeda\133\ufeda\137\ufeda\001" +
    "\002\000\012\061\u0169\134\u0168\147\u0165\152\u0167\001\002" +
    "\000\014\144\u017b\146\u016e\147\u016c\150\u016b\151\u016f\001" +
    "\002\000\050\061\ufed9\063\ufed9\064\ufed9\065\ufed9\070\ufed9" +
    "\071\ufed9\105\ufed9\106\ufed9\107\ufed9\110\ufed9\111\ufed9\112" +
    "\ufed9\113\ufed9\114\ufed9\115\ufed9\122\ufed9\123\ufed9\133\ufed9" +
    "\137\ufed9\001\002\000\004\061\u017d\001\002\000\004\135" +
    "\u017e\001\002\000\004\144\u017f\001\002\000\050\061\ufe91" +
    "\063\ufe91\064\ufe91\065\ufe91\070\ufe91\071\ufe91\105\ufe91\106" +
    "\ufe91\107\ufe91\110\ufe91\111\ufe91\112\ufe91\113\ufe91\114\ufe91" +
    "\115\ufe91\122\ufe91\123\ufe91\133\ufe91\137\ufe91\001\002\000" +
    "\006\133\uff00\137\uff00\001\002\000\004\061\u0182\001\002" +
    "\000\004\135\u0183\001\002\000\004\144\u0184\001\002\000" +
    "\050\061\ufe8a\063\ufe8a\064\ufe8a\065\ufe8a\070\ufe8a\071\ufe8a" +
    "\105\ufe8a\106\ufe8a\107\ufe8a\110\ufe8a\111\ufe8a\112\ufe8a\113" +
    "\ufe8a\114\ufe8a\115\ufe8a\122\ufe8a\123\ufe8a\133\ufe8a\137\ufe8a" +
    "\001\002\000\006\133\ufef4\137\ufef4\001\002\000\004\135" +
    "\u0187\001\002\000\004\144\u0188\001\002\000\050\061\ufe8b" +
    "\063\ufe8b\064\ufe8b\065\ufe8b\070\ufe8b\071\ufe8b\105\ufe8b\106" +
    "\ufe8b\107\ufe8b\110\ufe8b\111\ufe8b\112\ufe8b\113\ufe8b\114\ufe8b" +
    "\115\ufe8b\122\ufe8b\123\ufe8b\133\ufe8b\137\ufe8b\001\002\000" +
    "\006\133\ufef8\137\ufef8\001\002\000\050\061\ufeef\063\ufeef" +
    "\064\ufeef\065\ufeef\070\ufeef\071\ufeef\105\ufeef\106\ufeef\107" +
    "\ufeef\110\ufeef\111\ufeef\112\ufeef\113\ufeef\114\ufeef\115\ufeef" +
    "\122\ufeef\123\ufeef\133\ufeef\137\ufeef\001\002\000\004\132" +
    "\u01aa\001\002\000\050\061\ufeee\063\ufeee\064\ufeee\065\ufeee" +
    "\070\ufeee\071\ufeee\105\ufeee\106\ufeee\107\ufeee\110\ufeee\111" +
    "\ufeee\112\ufeee\113\ufeee\114\ufeee\115\ufeee\122\ufeee\123\ufeee" +
    "\133\ufeee\137\ufeee\001\002\000\050\061\ufea0\063\ufea0\064" +
    "\ufea0\065\ufea0\070\ufea0\071\ufea0\105\ufea0\106\ufea0\107\ufea0" +
    "\110\ufea0\111\ufea0\112\ufea0\113\ufea0\114\ufea0\115\ufea0\122" +
    "\ufea0\123\u0194\133\ufea0\137\ufea0\001\002\000\050\061\ufe9f" +
    "\063\ufe9f\064\ufe9f\065\ufe9f\070\ufe9f\071\ufe9f\105\ufe9f\106" +
    "\ufe9f\107\ufe9f\110\ufe9f\111\ufe9f\112\ufe9f\113\ufe9f\114\ufe9f" +
    "\115\ufe9f\122\ufe9f\123\u0194\133\ufe9f\137\ufe9f\001\002\000" +
    "\050\061\ufeec\063\ufeec\064\ufeec\065\ufeec\070\ufeec\071\ufeec" +
    "\105\ufeec\106\ufeec\107\ufeec\110\ufeec\111\ufeec\112\ufeec\113" +
    "\ufeec\114\ufeec\115\ufeec\122\ufeec\123\ufeec\133\ufeec\137\ufeec" +
    "\001\002\000\050\061\ufeea\063\ufeea\064\ufeea\065\ufeea\070" +
    "\ufeea\071\ufeea\105\ufeea\106\ufeea\107\ufeea\110\ufeea\111\ufeea" +
    "\112\ufeea\113\ufeea\114\ufeea\115\ufeea\122\ufeea\123\ufeea\133" +
    "\ufeea\137\ufeea\001\002\000\050\061\ufef0\063\ufef0\064\ufef0" +
    "\065\ufef0\070\ufef0\071\ufef0\105\ufef0\106\ufef0\107\ufef0\110" +
    "\ufef0\111\ufef0\112\ufef0\113\ufef0\114\ufef0\115\ufef0\122\ufef0" +
    "\123\ufef0\133\ufef0\137\ufef0\001\002\000\050\061\ufeed\063" +
    "\ufeed\064\ufeed\065\ufeed\070\ufeed\071\ufeed\105\ufeed\106\ufeed" +
    "\107\ufeed\110\ufeed\111\ufeed\112\ufeed\113\ufeed\114\ufeed\115" +
    "\ufeed\122\ufeed\123\ufeed\133\ufeed\137\ufeed\001\002\000\050" +
    "\061\ufeeb\063\ufeeb\064\ufeeb\065\ufeeb\070\ufeeb\071\ufeeb\105" +
    "\ufeeb\106\ufeeb\107\ufeeb\110\ufeeb\111\ufeeb\112\ufeeb\113\ufeeb" +
    "\114\ufeeb\115\ufeeb\122\ufeeb\123\ufeeb\133\ufeeb\137\ufeeb\001" +
    "\002\000\044\061\u013e\063\u0151\064\u0143\065\u0147\070\u0142" +
    "\071\u0149\105\u0150\106\u013f\107\u0148\110\u013b\111\u0155\112" +
    "\u0152\113\u014c\114\u014e\115\u013d\120\u018b\122\u01a1\001\002" +
    "\000\004\123\u0197\001\002\000\046\061\ufe9d\063\ufe9d\064" +
    "\ufe9d\065\ufe9d\070\ufe9d\071\ufe9d\105\ufe9d\106\ufe9d\107\ufe9d" +
    "\110\ufe9d\111\ufe9d\112\ufe9d\113\ufe9d\114\ufe9d\115\ufe9d\122" +
    "\ufe9d\133\ufe9d\137\ufe9d\001\002\000\044\061\u013e\063\u0151" +
    "\064\u0143\065\u0147\070\u0142\071\u0149\105\u0150\106\u013f\107" +
    "\u0148\110\u013b\111\u0155\112\u0152\113\u014c\114\u014e\115\u013d" +
    "\120\u018b\122\u019b\001\002\000\046\061\ufe9b\063\ufe9b\064" +
    "\ufe9b\065\ufe9b\070\ufe9b\071\ufe9b\105\ufe9b\106\ufe9b\107\ufe9b" +
    "\110\ufe9b\111\ufe9b\112\ufe9b\113\ufe9b\114\ufe9b\115\ufe9b\122" +
    "\ufe9b\133\ufe9b\137\ufe9b\001\002\000\046\061\ufe99\063\ufe99" +
    "\064\ufe99\065\ufe99\070\ufe99\071\ufe99\105\ufe99\106\ufe99\107" +
    "\ufe99\110\ufe99\111\ufe99\112\ufe99\113\ufe99\114\ufe99\115\ufe99" +
    "\122\ufe99\133\ufe99\137\ufe99\001\002\000\046\061\ufe98\063" +
    "\ufe98\064\ufe98\065\ufe98\070\ufe98\071\ufe98\105\ufe98\106\ufe98" +
    "\107\ufe98\110\ufe98\111\ufe98\112\ufe98\113\ufe98\114\ufe98\115" +
    "\ufe98\122\ufe98\133\ufe98\137\ufe98\001\002\000\004\134\u019c" +
    "\001\002\000\004\135\u019d\001\002\000\004\124\u019e\001" +
    "\002\000\042\061\u013e\063\u0151\064\u0143\065\u0147\070\u0142" +
    "\071\u0149\105\u0150\106\u013f\107\u0148\110\u013b\111\u0155\112" +
    "\u0152\113\u014c\114\u014e\115\u013d\120\u018b\001\002\000\004" +
    "\123\ufe95\001\002\000\004\123\ufe94\001\002\000\004\134" +
    "\u01a2\001\002\000\004\135\u01a3\001\002\000\004\124\u01a4" +
    "\001\002\000\042\061\u013e\063\u0151\064\u0143\065\u0147\070" +
    "\u0142\071\u0149\105\u0150\106\u013f\107\u0148\110\u013b\111\u0155" +
    "\112\u0152\113\u014c\114\u014e\115\u013d\120\u018b\001\002\000" +
    "\004\123\ufe97\001\002\000\004\123\ufe96\001\002\000\004" +
    "\123\u0197\001\002\000\046\061\ufe9e\063\ufe9e\064\ufe9e\065" +
    "\ufe9e\070\ufe9e\071\ufe9e\105\ufe9e\106\ufe9e\107\ufe9e\110\ufe9e" +
    "\111\ufe9e\112\ufe9e\113\ufe9e\114\ufe9e\115\ufe9e\122\ufe9e\133" +
    "\ufe9e\137\ufe9e\001\002\000\046\061\ufe9c\063\ufe9c\064\ufe9c" +
    "\065\ufe9c\070\ufe9c\071\ufe9c\105\ufe9c\106\ufe9c\107\ufe9c\110" +
    "\ufe9c\111\ufe9c\112\ufe9c\113\ufe9c\114\ufe9c\115\ufe9c\122\ufe9c" +
    "\133\ufe9c\137\ufe9c\001\002\000\044\061\u013e\063\u0151\064" +
    "\u0143\065\u0147\070\u0142\071\u0149\105\u0150\106\u013f\107\u0148" +
    "\110\u013b\111\u0155\112\u0152\113\u014c\114\u014e\115\u013d\122" +
    "\u0145\133\u01ac\001\002\000\004\133\u01ae\001\002\000\004" +
    "\121\u01ad\001\002\000\050\061\ufe92\063\ufe92\064\ufe92\065" +
    "\ufe92\070\ufe92\071\ufe92\105\ufe92\106\ufe92\107\ufe92\110\ufe92" +
    "\111\ufe92\112\ufe92\113\ufe92\114\ufe92\115\ufe92\122\ufe92\123" +
    "\ufe92\133\ufe92\137\ufe92\001\002\000\004\121\u01af\001\002" +
    "\000\050\061\ufe93\063\ufe93\064\ufe93\065\ufe93\070\ufe93\071" +
    "\ufe93\105\ufe93\106\ufe93\107\ufe93\110\ufe93\111\ufe93\112\ufe93" +
    "\113\ufe93\114\ufe93\115\ufe93\122\ufe93\123\ufe93\133\ufe93\137" +
    "\ufe93\001\002\000\004\061\u0161\001\002\000\010\073\u01b3" +
    "\144\u01b2\145\u0162\001\002\000\050\061\ufec8\063\ufec8\064" +
    "\ufec8\065\ufec8\070\ufec8\071\ufec8\105\ufec8\106\ufec8\107\ufec8" +
    "\110\ufec8\111\ufec8\112\ufec8\113\ufec8\114\ufec8\115\ufec8\122" +
    "\ufec8\123\ufec8\133\ufec8\137\ufec8\001\002\000\010\061\u01b8" +
    "\117\u01b6\140\u01b4\001\002\000\004\030\u01c5\001\002\000" +
    "\006\144\u01bf\146\u01c0\001\002\000\004\134\u01ba\001\002" +
    "\000\004\144\u01b9\001\002\000\006\144\ufec3\146\ufec3\001" +
    "\002\000\050\061\ufecb\063\ufecb\064\ufecb\065\ufecb\070\ufecb" +
    "\071\ufecb\105\ufecb\106\ufecb\107\ufecb\110\ufecb\111\ufecb\112" +
    "\ufecb\113\ufecb\114\ufecb\115\ufecb\122\ufecb\123\ufecb\133\ufecb" +
    "\137\ufecb\001\002\000\004\141\u01bb\001\002\000\004\031" +
    "\u01bc\001\002\000\004\141\u01bd\001\002\000\004\135\u01be" +
    "\001\002\000\004\144\ufedb\001\002\000\050\061\ufec7\063" +
    "\ufec7\064\ufec7\065\ufec7\070\ufec7\071\ufec7\105\ufec7\106\ufec7" +
    "\107\ufec7\110\ufec7\111\ufec7\112\ufec7\113\ufec7\114\ufec7\115" +
    "\ufec7\122\ufec7\123\ufec7\133\ufec7\137\ufec7\001\002\000\006" +
    "\061\u01c2\140\u01c1\001\002\000\004\030\u01c3\001\002\000" +
    "\006\144\ufec5\146\ufec5\001\002\000\004\140\u01c4\001\002" +
    "\000\006\144\ufec6\146\ufec6\001\002\000\004\140\u01c6\001" +
    "\002\000\006\144\ufec4\146\ufec4\001\002\000\010\073\u01c9" +
    "\144\u01c8\145\u0162\001\002\000\050\061\ufeca\063\ufeca\064" +
    "\ufeca\065\ufeca\070\ufeca\071\ufeca\105\ufeca\106\ufeca\107\ufeca" +
    "\110\ufeca\111\ufeca\112\ufeca\113\ufeca\114\ufeca\115\ufeca\122" +
    "\ufeca\123\ufeca\133\ufeca\137\ufeca\001\002\000\010\061\u01b8" +
    "\117\u01b6\140\u01b4\001\002\000\006\144\u01cd\146\u01c0\001" +
    "\002\000\004\144\u01cc\001\002\000\050\061\ufecc\063\ufecc" +
    "\064\ufecc\065\ufecc\070\ufecc\071\ufecc\105\ufecc\106\ufecc\107" +
    "\ufecc\110\ufecc\111\ufecc\112\ufecc\113\ufecc\114\ufecc\115\ufecc" +
    "\122\ufecc\123\ufecc\133\ufecc\137\ufecc\001\002\000\050\061" +
    "\ufec9\063\ufec9\064\ufec9\065\ufec9\070\ufec9\071\ufec9\105\ufec9" +
    "\106\ufec9\107\ufec9\110\ufec9\111\ufec9\112\ufec9\113\ufec9\114" +
    "\ufec9\115\ufec9\122\ufec9\123\ufec9\133\ufec9\137\ufec9\001\002" +
    "\000\004\061\u01cf\001\002\000\004\135\u01d0\001\002\000" +
    "\004\144\u01d1\001\002\000\050\061\ufe8f\063\ufe8f\064\ufe8f" +
    "\065\ufe8f\070\ufe8f\071\ufe8f\105\ufe8f\106\ufe8f\107\ufe8f\110" +
    "\ufe8f\111\ufe8f\112\ufe8f\113\ufe8f\114\ufe8f\115\ufe8f\122\ufe8f" +
    "\123\ufe8f\133\ufe8f\137\ufe8f\001\002\000\004\061\u0161\001" +
    "\002\000\010\073\u01d5\144\u01d4\145\u0162\001\002\000\050" +
    "\061\ufeab\063\ufeab\064\ufeab\065\ufeab\070\ufeab\071\ufeab\105" +
    "\ufeab\106\ufeab\107\ufeab\110\ufeab\111\ufeab\112\ufeab\113\ufeab" +
    "\114\ufeab\115\ufeab\122\ufeab\123\ufeab\133\ufeab\137\ufeab\001" +
    "\002\000\010\061\u01da\066\u01d9\104\u01d8\001\002\000\006" +
    "\067\u01de\144\u01dd\001\002\000\006\067\ufea7\144\ufea7\001" +
    "\002\000\006\061\u01dc\066\u01db\001\002\000\020\067\ufea3" +
    "\135\ufea3\144\ufea3\146\ufea3\147\ufea3\150\ufea3\151\ufea3\001" +
    "\002\000\006\067\ufea6\144\ufea6\001\002\000\020\067\ufea5" +
    "\135\ufea5\144\ufea5\146\ufea5\147\ufea5\150\ufea5\151\ufea5\001" +
    "\002\000\020\067\ufea4\135\ufea4\144\ufea4\146\ufea4\147\ufea4" +
    "\150\ufea4\151\ufea4\001\002\000\050\061\ufeaa\063\ufeaa\064" +
    "\ufeaa\065\ufeaa\070\ufeaa\071\ufeaa\105\ufeaa\106\ufeaa\107\ufeaa" +
    "\110\ufeaa\111\ufeaa\112\ufeaa\113\ufeaa\114\ufeaa\115\ufeaa\122" +
    "\ufeaa\123\ufeaa\133\ufeaa\137\ufeaa\001\002\000\010\061\u01e0" +
    "\066\u01d9\104\u01d8\001\002\000\006\067\ufea9\144\ufea9\001" +
    "\002\000\006\067\ufea8\144\ufea8\001\002\000\010\073\u01e2" +
    "\144\u01e3\145\u0162\001\002\000\010\061\u01da\066\u01d9\104" +
    "\u01d8\001\002\000\050\061\ufead\063\ufead\064\ufead\065\ufead" +
    "\070\ufead\071\ufead\105\ufead\106\ufead\107\ufead\110\ufead\111" +
    "\ufead\112\ufead\113\ufead\114\ufead\115\ufead\122\ufead\123\ufead" +
    "\133\ufead\137\ufead\001\002\000\006\067\u01de\144\u01e5\001" +
    "\002\000\050\061\ufeac\063\ufeac\064\ufeac\065\ufeac\070\ufeac" +
    "\071\ufeac\105\ufeac\106\ufeac\107\ufeac\110\ufeac\111\ufeac\112" +
    "\ufeac\113\ufeac\114\ufeac\115\ufeac\122\ufeac\123\ufeac\133\ufeac" +
    "\137\ufeac\001\002\000\006\133\ufef2\137\ufef2\001\002\000" +
    "\004\135\u01e8\001\002\000\004\124\u01e9\001\002\000\042" +
    "\061\ufe9a\063\ufe9a\064\ufe9a\065\ufe9a\070\ufe9a\071\ufe9a\105" +
    "\ufe9a\106\ufe9a\107\ufe9a\110\ufe9a\111\ufe9a\112\ufe9a\113\ufe9a" +
    "\114\ufe9a\115\ufe9a\120\ufe9a\001\002\000\006\053\uff03\205" +
    "\uff03\001\002\000\004\061\u0161\001\002\000\010\073\u01ed" +
    "\144\u01ee\145\u0162\001\002\000\014\061\u01f4\134\u01f3\147" +
    "\u01ef\152\u01f2\153\u01f0\001\002\000\050\061\ufeb8\063\ufeb8" +
    "\064\ufeb8\065\ufeb8\070\ufeb8\071\ufeb8\105\ufeb8\106\ufeb8\107" +
    "\ufeb8\110\ufeb8\111\ufeb8\112\ufeb8\113\ufeb8\114\ufeb8\115\ufeb8" +
    "\122\ufeb8\123\ufeb8\133\ufeb8\137\ufeb8\001\002\000\014\061" +
    "\u01f4\134\u01f3\147\u01ef\152\u01f2\153\u01f0\001\002\000\016" +
    "\135\ufeaf\144\ufeaf\146\ufeaf\147\ufeaf\150\ufeaf\151\ufeaf\001" +
    "\002\000\014\144\u01ff\146\u01f9\147\u01f7\150\u01f6\151\u01fa" +
    "\001\002\000\016\135\ufeb0\144\ufeb0\146\ufeb0\147\ufeb0\150" +
    "\ufeb0\151\ufeb0\001\002\000\014\061\u01f4\134\u01f3\147\u01ef" +
    "\152\u01f2\153\u01f0\001\002\000\016\135\ufeae\144\ufeae\146" +
    "\ufeae\147\ufeae\150\ufeae\151\ufeae\001\002\000\014\135\u01f8" +
    "\146\u01f9\147\u01f7\150\u01f6\151\u01fa\001\002\000\014\061" +
    "\u01f4\134\u01f3\147\u01ef\152\u01f2\153\u01f0\001\002\000\014" +
    "\061\u01f4\134\u01f3\147\u01ef\152\u01f2\153\u01f0\001\002\000" +
    "\016\135\ufeb1\144\ufeb1\146\ufeb1\147\ufeb1\150\ufeb1\151\ufeb1" +
    "\001\002\000\014\061\u01f4\134\u01f3\147\u01ef\152\u01f2\153" +
    "\u01f0\001\002\000\014\061\u01f4\134\u01f3\147\u01ef\152\u01f2" +
    "\153\u01f0\001\002\000\016\135\ufeb3\144\ufeb3\146\ufeb3\147" +
    "\ufeb3\150\ufeb3\151\ufeb3\001\002\000\016\135\ufeb6\144\ufeb6" +
    "\146\ufeb6\147\ufeb6\150\u01f6\151\u01fa\001\002\000\016\135" +
    "\ufeb5\144\ufeb5\146\ufeb5\147\ufeb5\150\u01f6\151\u01fa\001\002" +
    "\000\016\135\ufeb4\144\ufeb4\146\ufeb4\147\ufeb4\150\ufeb4\151" +
    "\ufeb4\001\002\000\050\061\ufeb7\063\ufeb7\064\ufeb7\065\ufeb7" +
    "\070\ufeb7\071\ufeb7\105\ufeb7\106\ufeb7\107\ufeb7\110\ufeb7\111" +
    "\ufeb7\112\ufeb7\113\ufeb7\114\ufeb7\115\ufeb7\122\ufeb7\123\ufeb7" +
    "\133\ufeb7\137\ufeb7\001\002\000\016\135\ufeb2\144\ufeb2\146" +
    "\ufeb2\147\ufeb2\150\ufeb2\151\ufeb2\001\002\000\010\073\u0203" +
    "\144\u0202\145\u0162\001\002\000\050\061\ufeba\063\ufeba\064" +
    "\ufeba\065\ufeba\070\ufeba\071\ufeba\105\ufeba\106\ufeba\107\ufeba" +
    "\110\ufeba\111\ufeba\112\ufeba\113\ufeba\114\ufeba\115\ufeba\122" +
    "\ufeba\123\ufeba\133\ufeba\137\ufeba\001\002\000\014\061\u01f4" +
    "\134\u01f3\147\u01ef\152\u01f2\153\u01f0\001\002\000\014\144" +
    "\u0205\146\u01f9\147\u01f7\150\u01f6\151\u01fa\001\002\000\050" +
    "\061\ufeb9\063\ufeb9\064\ufeb9\065\ufeb9\070\ufeb9\071\ufeb9\105" +
    "\ufeb9\106\ufeb9\107\ufeb9\110\ufeb9\111\ufeb9\112\ufeb9\113\ufeb9" +
    "\114\ufeb9\115\ufeb9\122\ufeb9\123\ufeb9\133\ufeb9\137\ufeb9\001" +
    "\002\000\004\061\u0161\001\002\000\010\073\u0208\144\u0209" +
    "\145\u0162\001\002\000\006\061\u020c\141\u020a\001\002\000" +
    "\050\061\ufec0\063\ufec0\064\ufec0\065\ufec0\070\ufec0\071\ufec0" +
    "\105\ufec0\106\ufec0\107\ufec0\110\ufec0\111\ufec0\112\ufec0\113" +
    "\ufec0\114\ufec0\115\ufec0\122\ufec0\123\ufec0\133\ufec0\137\ufec0" +
    "\001\002\000\004\030\u0213\001\002\000\006\144\u020d\146" +
    "\u020e\001\002\000\006\144\ufebb\146\ufebb\001\002\000\050" +
    "\061\ufebf\063\ufebf\064\ufebf\065\ufebf\070\ufebf\071\ufebf\105" +
    "\ufebf\106\ufebf\107\ufebf\110\ufebf\111\ufebf\112\ufebf\113\ufebf" +
    "\114\ufebf\115\ufebf\122\ufebf\123\ufebf\133\ufebf\137\ufebf\001" +
    "\002\000\006\061\u0210\141\u020f\001\002\000\004\030\u0211" +
    "\001\002\000\006\144\ufebd\146\ufebd\001\002\000\004\141" +
    "\u0212\001\002\000\006\144\ufebe\146\ufebe\001\002\000\004" +
    "\141\u0214\001\002\000\006\144\ufebc\146\ufebc\001\002\000" +
    "\010\073\u0217\144\u0216\145\u0162\001\002\000\050\061\ufec2" +
    "\063\ufec2\064\ufec2\065\ufec2\070\ufec2\071\ufec2\105\ufec2\106" +
    "\ufec2\107\ufec2\110\ufec2\111\ufec2\112\ufec2\113\ufec2\114\ufec2" +
    "\115\ufec2\122\ufec2\123\ufec2\133\ufec2\137\ufec2\001\002\000" +
    "\006\061\u020c\141\u020a\001\002\000\006\144\u0219\146\u020e" +
    "\001\002\000\050\061\ufec1\063\ufec1\064\ufec1\065\ufec1\070" +
    "\ufec1\071\ufec1\105\ufec1\106\ufec1\107\ufec1\110\ufec1\111\ufec1" +
    "\112\ufec1\113\ufec1\114\ufec1\115\ufec1\122\ufec1\123\ufec1\133" +
    "\ufec1\137\ufec1\001\002\000\006\133\ufefc\137\ufefc\001\002" +
    "\000\004\061\u021c\001\002\000\004\135\u021d\001\002\000" +
    "\004\144\u021e\001\002\000\050\061\ufe90\063\ufe90\064\ufe90" +
    "\065\ufe90\070\ufe90\071\ufe90\105\ufe90\106\ufe90\107\ufe90\110" +
    "\ufe90\111\ufe90\112\ufe90\113\ufe90\114\ufe90\115\ufe90\122\ufe90" +
    "\123\ufe90\133\ufe90\137\ufe90\001\002\000\024\061\u0225\066" +
    "\u01d9\104\u01d8\134\u0223\140\u0228\141\u0220\147\u0227\152\u0221" +
    "\153\u0226\001\002\000\004\030\u0239\001\002\000\020\067" +
    "\ufee1\135\ufee1\144\ufee1\146\ufee1\147\ufee1\150\ufee1\151\ufee1" +
    "\001\002\000\016\067\u022e\144\u0238\146\u022f\147\u022d\150" +
    "\u022c\151\u0230\001\002\000\024\061\u0225\066\u01d9\104\u01d8" +
    "\134\u0223\140\u0228\141\u0220\147\u0227\152\u0221\153\u0226\001" +
    "\002\000\020\067\ufedc\135\ufedc\144\ufedc\146\ufedc\147\ufedc" +
    "\150\ufedc\151\ufedc\001\002\000\020\067\ufedf\135\ufedf\144" +
    "\ufedf\146\ufedf\147\ufedf\150\ufedf\151\ufedf\001\002\000\020" +
    "\067\ufee0\135\ufee0\144\ufee0\146\ufee0\147\ufee0\150\ufee0\151" +
    "\ufee0\001\002\000\024\061\u0225\066\u01d9\104\u01d8\134\u0223" +
    "\140\u0228\141\u0220\147\u0227\152\u0221\153\u0226\001\002\000" +
    "\004\030\u0229\001\002\000\004\140\u022a\001\002\000\020" +
    "\067\ufede\135\ufede\144\ufede\146\ufede\147\ufede\150\ufede\151" +
    "\ufede\001\002\000\020\067\ufee3\135\ufee3\144\ufee3\146\ufee3" +
    "\147\ufee3\150\ufee3\151\ufee3\001\002\000\024\061\u0225\066" +
    "\u01d9\104\u01d8\134\u0223\140\u0228\141\u0220\147\u0227\152\u0221" +
    "\153\u0226\001\002\000\024\061\u0225\066\u01d9\104\u01d8\134" +
    "\u0223\140\u0228\141\u0220\147\u0227\152\u0221\153\u0226\001\002" +
    "\000\024\061\u0225\066\u01d9\104\u01d8\134\u0223\140\u0228\141" +
    "\u0220\147\u0227\152\u0221\153\u0226\001\002\000\024\061\u0225" +
    "\066\u01d9\104\u01d8\134\u0223\140\u0228\141\u0220\147\u0227\152" +
    "\u0221\153\u0226\001\002\000\024\061\u0225\066\u01d9\104\u01d8" +
    "\134\u0223\140\u0228\141\u0220\147\u0227\152\u0221\153\u0226\001" +
    "\002\000\020\067\u022e\135\ufee5\144\ufee5\146\ufee5\147\ufee5" +
    "\150\ufee5\151\ufee5\001\002\000\020\067\u022e\135\ufee8\144" +
    "\ufee8\146\ufee8\147\ufee8\150\u022c\151\u0230\001\002\000\020" +
    "\067\ufee4\135\ufee4\144\ufee4\146\ufee4\147\ufee4\150\ufee4\151" +
    "\ufee4\001\002\000\020\067\u022e\135\ufee7\144\ufee7\146\ufee7" +
    "\147\ufee7\150\u022c\151\u0230\001\002\000\020\067\u022e\135" +
    "\ufee6\144\ufee6\146\ufee6\147\ufee6\150\ufee6\151\ufee6\001\002" +
    "\000\016\067\u022e\135\u0237\146\u022f\147\u022d\150\u022c\151" +
    "\u0230\001\002\000\020\067\ufee2\135\ufee2\144\ufee2\146\ufee2" +
    "\147\ufee2\150\ufee2\151\ufee2\001\002\000\050\061\ufee9\063" +
    "\ufee9\064\ufee9\065\ufee9\070\ufee9\071\ufee9\105\ufee9\106\ufee9" +
    "\107\ufee9\110\ufee9\111\ufee9\112\ufee9\113\ufee9\114\ufee9\115" +
    "\ufee9\122\ufee9\123\ufee9\133\ufee9\137\ufee9\001\002\000\004" +
    "\141\u023a\001\002\000\020\067\ufedd\135\ufedd\144\ufedd\146" +
    "\ufedd\147\ufedd\150\ufedd\151\ufedd\001\002\000\004\135\u023c" +
    "\001\002\000\004\144\u023d\001\002\000\050\061\ufe89\063" +
    "\ufe89\064\ufe89\065\ufe89\070\ufe89\071\ufe89\105\ufe89\106\ufe89" +
    "\107\ufe89\110\ufe89\111\ufe89\112\ufe89\113\ufe89\114\ufe89\115" +
    "\ufe89\122\ufe89\123\ufe89\133\ufe89\137\ufe89\001\002\000\006" +
    "\133\ufefe\137\ufefe\001\002\000\004\061\u0240\001\002\000" +
    "\004\135\u0241\001\002\000\004\144\u0242\001\002\000\050" +
    "\061\ufe8e\063\ufe8e\064\ufe8e\065\ufe8e\070\ufe8e\071\ufe8e\105" +
    "\ufe8e\106\ufe8e\107\ufe8e\110\ufe8e\111\ufe8e\112\ufe8e\113\ufe8e" +
    "\114\ufe8e\115\ufe8e\122\ufe8e\123\ufe8e\133\ufe8e\137\ufe8e\001" +
    "\002\000\032\075\uff08\160\uff08\162\uff08\164\uff08\166\uff08" +
    "\170\uff08\172\uff08\174\uff08\176\uff08\202\uff08\203\uff08\204" +
    "\uff08\001\002\000\004\135\u0245\001\002\000\004\136\u0246" +
    "\001\002\000\004\137\u0247\001\002\000\006\053\uff01\205" +
    "\uff01\001\002\000\004\077\u0249\001\002\000\032\075\uffbc" +
    "\160\uffbc\162\uffbc\164\uffbc\166\uffbc\170\uffbc\172\uffbc\174" +
    "\uffbc\176\uffbc\202\uffbc\203\uffbc\204\uffbc\001\002\000\004" +
    "\177\u027f\001\002\000\014\022\u0255\027\u025d\033\u025a\036" +
    "\u025b\155\u0259\001\002\000\004\077\u024d\001\002\000\006" +
    "\177\u024f\200\u0250\001\002\000\004\177\u0254\001\002\000" +
    "\032\075\uff37\160\uff37\162\uff37\164\uff37\166\uff37\170\uff37" +
    "\172\uff37\174\uff37\176\uff37\202\uff37\203\uff37\204\uff37\001" +
    "\002\000\004\030\u0251\001\002\000\004\201\u0252\001\002" +
    "\000\006\177\uff24\200\u0250\001\002\000\004\177\uff25\001" +
    "\002\000\032\075\uff38\160\uff38\162\uff38\164\uff38\166\uff38" +
    "\170\uff38\172\uff38\174\uff38\176\uff38\202\uff38\203\uff38\204" +
    "\uff38\001\002\000\004\073\u0279\001\002\000\004\137\u0277" +
    "\001\002\000\004\137\u0275\001\002\000\004\137\u0273\001" +
    "\002\000\004\073\u026f\001\002\000\004\073\u026b\001\002" +
    "\000\004\073\u0267\001\002\000\004\137\u0265\001\002\000" +
    "\004\073\u0261\001\002\000\004\137\u025f\001\002\000\006" +
    "\077\uff2f\136\u024b\001\002\000\004\077\uff34\001\002\000" +
    "\004\140\u0262\001\002\000\004\157\u0263\001\002\000\004" +
    "\140\u0264\001\002\000\004\137\uff2b\001\002\000\006\077" +
    "\uff30\136\u024b\001\002\000\004\077\uff35\001\002\000\004" +
    "\140\u0268\001\002\000\004\031\u0269\001\002\000\004\140" +
    "\u026a\001\002\000\004\137\uff28\001\002\000\004\140\u026c" +
    "\001\002\000\004\156\u026d\001\002\000\004\140\u026e\001" +
    "\002\000\004\137\uff29\001\002\000\004\140\u0270\001\002" +
    "\000\004\032\u0271\001\002\000\004\140\u0272\001\002\000" +
    "\004\137\uff2a\001\002\000\006\077\uff2c\136\u024b\001\002" +
    "\000\004\077\uff31\001\002\000\006\077\uff2e\136\u024b\001" +
    "\002\000\004\077\uff33\001\002\000\006\077\uff2d\136\u024b" +
    "\001\002\000\004\077\uff32\001\002\000\004\140\u027a\001" +
    "\002\000\006\057\u027b\060\u027c\001\002\000\004\140\u027e" +
    "\001\002\000\004\140\u027d\001\002\000\004\137\uff27\001" +
    "\002\000\004\137\uff26\001\002\000\032\075\uff36\160\uff36" +
    "\162\uff36\164\uff36\166\uff36\170\uff36\172\uff36\174\uff36\176" +
    "\uff36\202\uff36\203\uff36\204\uff36\001\002\000\006\030\u02af" +
    "\175\u02b0\001\002\000\014\036\u028d\046\u028b\047\u028e\050" +
    "\u028c\051\u0287\001\002\000\004\077\u0283\001\002\000\006" +
    "\030\u0284\175\u0285\001\002\000\004\175\u0286\001\002\000" +
    "\032\075\uff4a\160\uff4a\162\uff4a\164\uff4a\166\uff4a\170\uff4a" +
    "\172\uff4a\174\uff4a\176\uff4a\202\uff4a\203\uff4a\204\uff4a\001" +
    "\002\000\032\075\uff4b\160\uff4b\162\uff4b\164\uff4b\166\uff4b" +
    "\170\uff4b\172\uff4b\174\uff4b\176\uff4b\202\uff4b\203\uff4b\204" +
    "\uff4b\001\002\000\004\073\u02ab\001\002\000\004\137\u02a9" +
    "\001\002\000\004\137\u02a7\001\002\000\004\137\u02a5\001" +
    "\002\000\004\073\u02a1\001\002\000\004\073\u029d\001\002" +
    "\000\004\073\u0299\001\002\000\004\073\u0295\001\002\000" +
    "\004\137\u0293\001\002\000\004\137\u0291\001\002\000\006" +
    "\077\uff40\136\u0281\001\002\000\004\077\uff45\001\002\000" +
    "\006\077\uff3f\136\u0281\001\002\000\004\077\uff44\001\002" +
    "\000\004\140\u0296\001\002\000\004\157\u0297\001\002\000" +
    "\004\140\u0298\001\002\000\004\137\uff3c\001\002\000\004" +
    "\140\u029a\001\002\000\004\031\u029b\001\002\000\004\140" +
    "\u029c\001\002\000\004\137\uff3a\001\002\000\004\140\u029e" +
    "\001\002\000\004\157\u029f\001\002\000\004\140\u02a0\001" +
    "\002\000\004\137\uff3b\001\002\000\004\140\u02a2\001\002" +
    "\000\004\030\u02a3\001\002\000\004\140\u02a4\001\002\000" +
    "\004\137\uff3d\001\002\000\006\077\uff41\136\u0281\001\002" +
    "\000\004\077\uff46\001\002\000\006\077\uff3e\136\u0281\001" +
    "\002\000\004\077\uff43\001\002\000\006\077\uff42\136\u0281" +
    "\001\002\000\004\077\uff47\001\002\000\004\140\u02ac\001" +
    "\002\000\004\030\u02ad\001\002\000\004\140\u02ae\001\002" +
    "\000\004\137\uff39\001\002\000\004\175\u02b1\001\002\000" +
    "\032\075\uff48\160\uff48\162\uff48\164\uff48\166\uff48\170\uff48" +
    "\172\uff48\174\uff48\176\uff48\202\uff48\203\uff48\204\uff48\001" +
    "\002\000\032\075\uff49\160\uff49\162\uff49\164\uff49\166\uff49" +
    "\170\uff49\172\uff49\174\uff49\176\uff49\202\uff49\203\uff49\204" +
    "\uff49\001\002\000\006\030\u02e3\161\u02e4\001\002\000\014" +
    "\022\u02b9\027\u02c2\033\u02bf\036\u02c1\155\u02bd\001\002\000" +
    "\004\077\u02b5\001\002\000\006\030\u02b6\161\u02b7\001\002" +
    "\000\004\161\u02b8\001\002\000\032\075\uffcf\160\uffcf\162" +
    "\uffcf\164\uffcf\166\uffcf\170\uffcf\172\uffcf\174\uffcf\176\uffcf" +
    "\202\uffcf\203\uffcf\204\uffcf\001\002\000\032\075\uffd0\160" +
    "\uffd0\162\uffd0\164\uffd0\166\uffd0\170\uffd0\172\uffd0\174\uffd0" +
    "\176\uffd0\202\uffd0\203\uffd0\204\uffd0\001\002\000\004\073" +
    "\u02dd\001\002\000\004\137\u02db\001\002\000\004\137\u02d9" +
    "\001\002\000\004\137\u02d7\001\002\000\004\073\u02d3\001" +
    "\002\000\004\137\u02d1\001\002\000\004\073\u02cd\001\002" +
    "\000\004\137\u02cb\001\002\000\004\073\u02c7\001\002\000" +
    "\004\073\u02c3\001\002\000\004\140\u02c4\001\002\000\004" +
    "\157\u02c5\001\002\000\004\140\u02c6\001\002\000\004\137" +
    "\uffc2\001\002\000\004\140\u02c8\001\002\000\004\031\u02c9" +
    "\001\002\000\004\140\u02ca\001\002\000\004\137\uffbf\001" +
    "\002\000\006\077\uffc5\136\u02b3\001\002\000\004\077\uffca" +
    "\001\002\000\004\140\u02ce\001\002\000\004\156\u02cf\001" +
    "\002\000\004\140\u02d0\001\002\000\004\137\uffc0\001\002" +
    "\000\006\077\uffc6\136\u02b3\001\002\000\004\077\uffcb\001" +
    "\002\000\004\140\u02d4\001\002\000\004\032\u02d5\001\002" +
    "\000\004\140\u02d6\001\002\000\004\137\uffc1\001\002\000" +
    "\006\077\uffc4\136\u02b3\001\002\000\004\077\uffc9\001\002" +
    "\000\006\077\uffc3\136\u02b3\001\002\000\004\077\uffc8\001" +
    "\002\000\006\077\uffc7\136\u02b3\001\002\000\004\077\uffcc" +
    "\001\002\000\004\140\u02de\001\002\000\006\057\u02df\060" +
    "\u02e0\001\002\000\004\140\u02e2\001\002\000\004\140\u02e1" +
    "\001\002\000\004\137\uffbe\001\002\000\004\137\uffbd\001" +
    "\002\000\004\161\u02e5\001\002\000\032\075\uffcd\160\uffcd" +
    "\162\uffcd\164\uffcd\166\uffcd\170\uffcd\172\uffcd\174\uffcd\176" +
    "\uffcd\202\uffcd\203\uffcd\204\uffcd\001\002\000\032\075\uffce" +
    "\160\uffce\162\uffce\164\uffce\166\uffce\170\uffce\172\uffce\174" +
    "\uffce\176\uffce\202\uffce\203\uffce\204\uffce\001\002\000\032" +
    "\075\uffde\160\uffde\162\uffde\164\uffde\166\uffde\170\uffde\172" +
    "\uffde\174\uffde\176\uffde\202\uffde\203\uffde\204\uffde\001\002" +
    "\000\032\075\uffd8\160\uffd8\162\uffd8\164\uffd8\166\uffd8\170" +
    "\uffd8\172\uffd8\174\uffd8\176\uffd8\202\uffd8\203\uffd8\204\uffd8" +
    "\001\002\000\032\075\uffd6\160\uffd6\162\uffd6\164\uffd6\166" +
    "\uffd6\170\uffd6\172\uffd6\174\uffd6\176\uffd6\202\uffd6\203\uffd6" +
    "\204\uffd6\001\002\000\006\020\u0248\151\u02f2\001\002\000" +
    "\032\075\uffe2\160\uffe2\162\uffe2\164\uffe2\166\uffe2\170\uffe2" +
    "\172\uffe2\174\uffe2\176\uffe2\202\uffe2\203\uffe2\204\uffe2\001" +
    "\002\000\032\075\uffdc\160\uffdc\162\uffdc\164\uffdc\166\uffdc" +
    "\170\uffdc\172\uffdc\174\uffdc\176\uffdc\202\uffdc\203\uffdc\204" +
    "\uffdc\001\002\000\032\075\uffd2\160\uffd2\162\uffd2\164\uffd2" +
    "\166\uffd2\170\uffd2\172\uffd2\174\uffd2\176\uffd2\202\uffd2\203" +
    "\uffd2\204\uffd2\001\002\000\032\075\uffda\160\uffda\162\uffda" +
    "\164\uffda\166\uffda\170\uffda\172\uffda\174\uffda\176\uffda\202" +
    "\uffda\203\uffda\204\uffda\001\002\000\032\075\uffe0\160\uffe0" +
    "\162\uffe0\164\uffe0\166\uffe0\170\uffe0\172\uffe0\174\uffe0\176" +
    "\uffe0\202\uffe0\203\uffe0\204\uffe0\001\002\000\032\075\uffe6" +
    "\160\uffe6\162\uffe6\164\uffe6\166\uffe6\170\uffe6\172\uffe6\174" +
    "\uffe6\176\uffe6\202\uffe6\203\uffe6\204\uffe6\001\002\000\032" +
    "\075\uffe4\160\uffe4\162\uffe4\164\uffe4\166\uffe4\170\uffe4\172" +
    "\uffe4\174\uffe4\176\uffe4\202\uffe4\203\uffe4\204\uffe4\001\002" +
    "\000\032\075\uffd4\160\uffd4\162\uffd4\164\uffd4\166\uffd4\170" +
    "\uffd4\172\uffd4\174\uffd4\176\uffd4\202\uffd4\203\uffd4\204\uffd4" +
    "\001\002\000\004\010\u02f3\001\002\000\004\077\u02f4\001" +
    "\002\000\004\075\uffe9\001\002\000\004\203\u0338\001\002" +
    "\000\004\077\u0334\001\002\000\020\022\u02f8\026\u02fb\027" +
    "\u0302\033\u02fd\036\u02ff\042\u0305\155\u02fc\001\002\000\004" +
    "\073\u032e\001\002\000\004\137\u032c\001\002\000\004\137" +
    "\u032a\001\002\000\004\073\u0324\001\002\000\004\073\u0320" +
    "\001\002\000\004\073\u031c\001\002\000\004\137\u031a\001" +
    "\002\000\004\073\u0316\001\002\000\004\137\u0314\001\002" +
    "\000\004\137\u0312\001\002\000\004\073\u030e\001\002\000" +
    "\004\137\u030c\001\002\000\004\137\u030a\001\002\000\004" +
    "\073\u0306\001\002\000\004\140\u0307\001\002\000\004\043" +
    "\u0308\001\002\000\004\140\u0309\001\002\000\004\137\uff0a" +
    "\001\002\000\006\077\uff18\136\u02f7\001\002\000\004\077" +
    "\uff1f\001\002\000\006\077\uff19\136\u02f7\001\002\000\004" +
    "\077\uff20\001\002\000\004\140\u030f\001\002\000\004\157" +
    "\u0310\001\002\000\004\140\u0311\001\002\000\004\137\uff12" +
    "\001\002\000\006\077\uff14\136\u02f7\001\002\000\004\077" +
    "\uff1b\001\002\000\006\077\uff17\136\u02f7\001\002\000\004" +
    "\077\uff1e\001\002\000\004\140\u0317\001\002\000\004\031" +
    "\u0318\001\002\000\004\140\u0319\001\002\000\004\137\uff0f" +
    "\001\002\000\006\077\uff13\136\u02f7\001\002\000\004\077" +
    "\uff1a\001\002\000\004\140\u031d\001\002\000\004\156\u031e" +
    "\001\002\000\004\140\u031f\001\002\000\004\137\uff10\001" +
    "\002\000\004\140\u0321\001\002\000\004\032\u0322\001\002" +
    "\000\004\140\u0323\001\002\000\004\137\uff11\001\002\000" +
    "\004\140\u0325\001\002\000\006\057\u0326\060\u0327\001\002" +
    "\000\004\140\u0329\001\002\000\004\140\u0328\001\002\000" +
    "\004\137\uff0d\001\002\000\004\137\uff0e\001\002\000\006" +
    "\077\uff15\136\u02f7\001\002\000\004\077\uff1c\001\002\000" +
    "\006\077\uff16\136\u02f7\001\002\000\004\077\uff1d\001\002" +
    "\000\004\140\u032f\001\002\000\006\057\u0330\060\u0331\001" +
    "\002\000\004\140\u0333\001\002\000\004\140\u0332\001\002" +
    "\000\004\137\uff0c\001\002\000\004\137\uff0b\001\002\000" +
    "\032\075\062\160\055\162\073\164\051\166\077\170\065" +
    "\172\070\174\057\176\061\202\052\203\u0336\204\063\001" +
    "\002\000\032\075\062\160\055\162\073\164\051\166\077" +
    "\170\065\172\070\174\057\176\061\202\052\203\u0337\204" +
    "\063\001\002\000\032\075\uff22\160\uff22\162\uff22\164\uff22" +
    "\166\uff22\170\uff22\172\uff22\174\uff22\176\uff22\202\uff22\203" +
    "\uff22\204\uff22\001\002\000\032\075\uff23\160\uff23\162\uff23" +
    "\164\uff23\166\uff23\170\uff23\172\uff23\174\uff23\176\uff23\202" +
    "\uff23\203\uff23\204\uff23\001\002\000\032\075\uff21\160\uff21" +
    "\162\uff21\164\uff21\166\uff21\170\uff21\172\uff21\174\uff21\176" +
    "\uff21\202\uff21\203\uff21\204\uff21\001\002\000\006\030\u036a" +
    "\165\u036b\001\002\000\004\077\u0366\001\002\000\014\022" +
    "\u033c\027\u0345\033\u0342\036\u0344\155\u0340\001\002\000\004" +
    "\073\u0360\001\002\000\004\137\u035e\001\002\000\004\137" +
    "\u035c\001\002\000\004\137\u035a\001\002\000\004\073\u0356" +
    "\001\002\000\004\137\u0354\001\002\000\004\073\u0350\001" +
    "\002\000\004\137\u034e\001\002\000\004\073\u034a\001\002" +
    "\000\004\073\u0346\001\002\000\004\140\u0347\001\002\000" +
    "\004\157\u0348\001\002\000\004\140\u0349\001\002\000\004" +
    "\137\uff99\001\002\000\004\140\u034b\001\002\000\004\031" +
    "\u034c\001\002\000\004\140\u034d\001\002\000\004\137\uff96" +
    "\001\002\000\006\077\uff9c\136\u033b\001\002\000\004\077" +
    "\uffa1\001\002\000\004\140\u0351\001\002\000\004\156\u0352" +
    "\001\002\000\004\140\u0353\001\002\000\004\137\uff97\001" +
    "\002\000\006\077\uff9d\136\u033b\001\002\000\004\077\uffa2" +
    "\001\002\000\004\140\u0357\001\002\000\004\032\u0358\001" +
    "\002\000\004\140\u0359\001\002\000\004\137\uff98\001\002" +
    "\000\006\077\uff9b\136\u033b\001\002\000\004\077\uffa0\001" +
    "\002\000\006\077\uff9a\136\u033b\001\002\000\004\077\uff9f" +
    "\001\002\000\006\077\uff9e\136\u033b\001\002\000\004\077" +
    "\uffa3\001\002\000\004\140\u0361\001\002\000\006\057\u0362" +
    "\060\u0363\001\002\000\004\140\u0365\001\002\000\004\140" +
    "\u0364\001\002\000\004\137\uff95\001\002\000\004\137\uff94" +
    "\001\002\000\006\030\u0367\165\u0368\001\002\000\004\165" +
    "\u0369\001\002\000\032\075\uffa6\160\uffa6\162\uffa6\164\uffa6" +
    "\166\uffa6\170\uffa6\172\uffa6\174\uffa6\176\uffa6\202\uffa6\203" +
    "\uffa6\204\uffa6\001\002\000\032\075\uffa7\160\uffa7\162\uffa7" +
    "\164\uffa7\166\uffa7\170\uffa7\172\uffa7\174\uffa7\176\uffa7\202" +
    "\uffa7\203\uffa7\204\uffa7\001\002\000\004\165\u036c\001\002" +
    "\000\032\075\uffa4\160\uffa4\162\uffa4\164\uffa4\166\uffa4\170" +
    "\uffa4\172\uffa4\174\uffa4\176\uffa4\202\uffa4\203\uffa4\204\uffa4" +
    "\001\002\000\032\075\uffa5\160\uffa5\162\uffa5\164\uffa5\166" +
    "\uffa5\170\uffa5\172\uffa5\174\uffa5\176\uffa5\202\uffa5\203\uffa5" +
    "\204\uffa5\001\002\000\004\140\u036e\001\002\000\006\057" +
    "\u036f\060\u0370\001\002\000\004\140\u0372\001\002\000\004" +
    "\140\u0371\001\002\000\004\137\uffe7\001\002\000\004\137" +
    "\uffe8\001\002\000\004\077\u0374\001\002\000\030\075\062" +
    "\160\055\162\073\164\051\166\077\170\065\172\070\174" +
    "\057\176\061\202\052\204\063\001\002\000\030\075\u0376" +
    "\160\055\162\073\164\051\166\077\170\065\172\070\174" +
    "\057\176\061\202\052\204\063\001\002\000\006\020\u0248" +
    "\151\u0377\001\002\000\004\010\u0378\001\002\000\004\077" +
    "\u0379\001\002\000\004\075\uffea\001\002\000\004\151\u037b" +
    "\001\002\000\004\004\u037c\001\002\000\004\077\u037d\001" +
    "\002\000\004\002\ufffe\001\002\000\004\077\u037f\001\002" +
    "\000\006\075\u0382\142\u0385\001\002\000\004\075\u03a8\001" +
    "\002\000\004\075\u03a2\001\002\000\006\007\u038c\151\u038b" +
    "\001\002\000\004\075\ufff2\001\002\000\006\075\ufff1\142" +
    "\u0385\001\002\000\006\030\u0386\143\u0387\001\002\000\004" +
    "\143\u0388\001\002\000\004\075\uffec\001\002\000\004\075" +
    "\uffed\001\002\000\004\075\ufff0\001\002\000\004\075\ufff4" +
    "\001\002\000\004\005\u03a0\001\002\000\004\136\u038d\001" +
    "\002\000\006\024\u038f\137\u0390\001\002\000\004\137\u039a" +
    "\001\002\000\004\073\u0396\001\002\000\004\077\u0391\001" +
    "\002\000\004\075\u0392\001\002\000\004\151\u0393\001\002" +
    "\000\004\007\u0394\001\002\000\004\077\u0395\001\002\000" +
    "\006\075\uffee\142\uffee\001\002\000\004\140\u0397\001\002" +
    "\000\004\030\u0398\001\002\000\004\140\u0399\001\002\000" +
    "\004\137\uffeb\001\002\000\004\077\u039b\001\002\000\004" +
    "\075\u039c\001\002\000\004\151\u039d\001\002\000\004\007" +
    "\u039e\001\002\000\004\077\u039f\001\002\000\006\075\uffef" +
    "\142\uffef\001\002\000\004\077\u03a1\001\002\000\004\075" +
    "\ufff5\001\002\000\006\007\u038c\151\u03a5\001\002\000\004" +
    "\075\ufff3\001\002\000\004\075\ufff1\001\002\000\004\005" +
    "\u03a6\001\002\000\004\077\u03a7\001\002\000\004\075\ufff6" +
    "\001\002\000\004\151\u03a9\001\002\000\004\005\u03aa\001" +
    "\002\000\004\077\u03ab\001\002\000\004\075\ufff7\001\002" +
    "\000\004\075\037\001\002\000\004\075\042\001\002\000" +
    "\004\075\u03af\001\002\000\004\151\u03b0\001\002\000\004" +
    "\004\u03b1\001\002\000\004\077\u03b2\001\002\000\004\002" +
    "\uffff\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u03b1\000\006\002\005\137\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\007" +
    "\001\001\000\002\001\001\000\004\011\037\001\001\000" +
    "\006\015\015\016\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\020\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\030" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\021\052\022\073\024\074\033\063\042\071" +
    "\051\065\061\055\070\070\102\053\111\057\121\075\131" +
    "\066\001\001\000\004\041\u0339\001\001\000\004\120\u02f5" +
    "\001\001\000\030\022\u02ef\024\u02ee\033\u02e9\042\u02ed\051" +
    "\u02ea\061\u02e6\070\u02ec\102\u02e5\111\u02e7\121\u02f0\131\u02eb" +
    "\001\001\000\002\001\001\000\004\023\u02b3\001\001\000" +
    "\002\001\001\000\004\060\u0281\001\001\000\002\001\001" +
    "\000\004\110\u024b\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\050\366\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\067\261\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\032\174\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\101\077\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\100\110\103\104\104\103\105\112\106\105\107" +
    "\106\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\101\133\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\101\141\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\101\147\001" +
    "\001\000\002\001\001\000\004\101\151\001\001\000\002" +
    "\001\001\000\004\101\153\001\001\000\002\001\001\000" +
    "\004\101\155\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\034\200\035\177\036\203\037" +
    "\202\040\201\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\032\231\001\001\000\002" +
    "\001\001\000\004\032\233\001\001\000\002\001\001\000" +
    "\004\032\235\001\001\000\002\001\001\000\004\032\237" +
    "\001\001\000\002\001\001\000\004\032\241\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\071\275\072\303" +
    "\073\302\074\267\075\273\076\270\077\300\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\067" +
    "\305\001\001\000\002\001\001\000\004\067\307\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\067\315\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\067" +
    "\327\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\067" +
    "\335\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\067\351\001" +
    "\001\000\002\001\001\000\004\067\353\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\052\370\053\376" +
    "\054\374\055\372\056\u0103\057\375\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\050\u0105\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\050\u0117\001\001\000\002\001\001\000" +
    "\004\050\u0119\001\001\000\002\001\001\000\004\050\u011b" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\050\u0121" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\050\u0127" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\132\u0131\133" +
    "\u0133\134\u0134\136\u0135\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\132" +
    "\u0137\134\u0134\001\001\000\006\132\u0136\134\u0134\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\140\u014c\144\u0145\147\u0149\151\u0143\152\u014e\157\u014a" +
    "\161\u013b\164\u013f\165\u0152\167\u0153\001\001\000\002\001" +
    "\001\000\026\140\u014c\144\u0145\147\u0149\151\u023d\152\u014e" +
    "\157\u014a\161\u013b\164\u013f\165\u0152\167\u0153\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\140\u014c\144\u0145\147\u0149\151\u0219\152\u014e\157\u014a\161" +
    "\u013b\164\u013f\165\u0152\167\u0153\001\001\000\002\001\001" +
    "\000\004\153\u0206\001\001\000\004\153\u01eb\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\140\u014c\144\u0145" +
    "\147\u0149\151\u01e5\152\u014e\157\u014a\161\u013b\164\u013f\165" +
    "\u0152\167\u0153\001\001\000\004\153\u01d2\001\001\000\002" +
    "\001\001\000\004\153\u01b0\001\001\000\024\140\u018f\142" +
    "\u018d\143\u018c\152\u0190\157\u018e\161\u0189\164\u018b\165\u0191" +
    "\167\u0192\001\001\000\026\140\u014c\144\u0145\147\u0149\151" +
    "\u0188\152\u014e\157\u014a\161\u013b\164\u013f\165\u0152\167\u0153" +
    "\001\001\000\002\001\001\000\026\140\u014c\144\u0145\147" +
    "\u0149\151\u0184\152\u014e\157\u014a\161\u013b\164\u013f\165\u0152" +
    "\167\u0153\001\001\000\002\001\001\000\026\140\u014c\144" +
    "\u0145\147\u0149\151\u017f\152\u014e\157\u014a\161\u013b\164\u013f" +
    "\165\u0152\167\u0153\001\001\000\002\001\001\000\004\153" +
    "\u015f\001\001\000\002\001\001\000\026\140\u014c\144\u0145" +
    "\147\u0149\151\u015a\152\u014e\157\u014a\161\u013b\164\u013f\165" +
    "\u0152\167\u0153\001\001\000\026\140\u014c\144\u0145\147\u0149" +
    "\151\u0159\152\u014e\157\u014a\161\u013b\164\u013f\165\u0152\167" +
    "\u0153\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\153\u0176\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\154\u0165\001\001\000\004\154\u0174\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\154\u0169\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\154\u0172\001" +
    "\001\000\004\154\u0171\001\001\000\002\001\001\000\004" +
    "\154\u0170\001\001\000\004\154\u016f\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\154\u0179\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\145\u01a6\146\u01a7\001\001\000\006\145\u0194\146\u0195\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\140\u018f\142" +
    "\u0199\143\u0198\152\u0190\157\u018e\161\u0189\164\u018b\165\u0191" +
    "\167\u0192\001\001\000\004\146\u0197\001\001\000\002\001" +
    "\001\000\024\140\u018f\142\u0199\143\u0198\152\u0190\157\u018e" +
    "\161\u0189\164\u018b\165\u0191\167\u0192\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\140\u018f\142" +
    "\u019f\143\u019e\152\u0190\157\u018e\161\u0189\164\u018b\165\u0191" +
    "\167\u0192\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\140\u018f\142\u01a5\143\u01a4\152\u0190\157\u018e\161\u0189\164" +
    "\u018b\165\u0191\167\u0192\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\146\u01a8\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\140\u014c\144\u0145\147\u0149\151\u01aa" +
    "\152\u014e\157\u014a\161\u013b\164\u013f\165\u0152\167\u0153\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\153\u01c6\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\162\u01b6" +
    "\163\u01b4\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\162" +
    "\u01ca\163\u01c9\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\153\u01e0\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\170\u01d5\171\u01d6\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\171\u01de\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\170\u01e3\171\u01d6\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\153\u0200\001\001\000" +
    "\002\001\001\000\004\155\u01f0\001\001\000\002\001\001" +
    "\000\004\155\u01ff\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\155\u01f4\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\155\u01fd\001\001\000" +
    "\004\155\u01fc\001\001\000\002\001\001\000\004\155\u01fb" +
    "\001\001\000\004\155\u01fa\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\155\u0203\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\153\u0214\001\001\000\002\001\001\000" +
    "\004\166\u020a\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\166\u0217" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\160\u0221\171\u0223\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\160\u0235\171\u0223\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\160\u022a\171\u0223\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\160\u0234\171\u0223\001\001\000\006" +
    "\160\u0233\171\u0223\001\001\000\006\160\u0232\171\u0223\001" +
    "\001\000\006\160\u0231\171\u0223\001\001\000\006\160\u0230" +
    "\171\u0223\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\112\u025b\113\u025d\114\u0256\115" +
    "\u0255\116\u0257\001\001\000\002\001\001\000\004\117\u024d" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\117\u0252\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\110\u025f\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\110\u0265\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\110\u0273\001\001\000\002\001\001\000\004\110" +
    "\u0275\001\001\000\002\001\001\000\004\110\u0277\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\062" +
    "\u0287\063\u0289\064\u028f\065\u028e\066\u0288\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\060\u0291\001\001\000" +
    "\002\001\001\000\004\060\u0293\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\060\u02a5\001\001\000\002\001\001\000\004\060\u02a7" +
    "\001\001\000\002\001\001\000\004\060\u02a9\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\025\u02b9" +
    "\026\u02bd\027\u02bf\030\u02bb\031\u02ba\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\023\u02cb\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\023\u02d1\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\023\u02d7\001\001\000\002\001\001\000\004\023\u02d9\001" +
    "\001\000\002\001\001\000\004\023\u02db\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\122\u0302\123\u0303\124\u0300\125\u02ff\126" +
    "\u02f8\127\u02f9\130\u02fd\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\120\u030a\001\001\000\002\001\001\000\004" +
    "\120\u030c\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\120\u0312\001\001\000\002\001\001\000\004\120\u0314\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\120\u031a\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\120\u032a" +
    "\001\001\000\002\001\001\000\004\120\u032c\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\021\u0334\022\073\024\074\033\063\042\071" +
    "\051\065\061\055\070\070\102\053\111\057\121\075\131" +
    "\066\001\001\000\030\022\u02ef\024\u02ee\033\u02e9\042\u02ed" +
    "\051\u02ea\061\u02e6\070\u02ec\102\u02e5\111\u02e7\121\u02f0\131" +
    "\u02eb\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\043" +
    "\u033c\044\u0340\045\u0342\046\u033e\047\u033d\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\041\u034e\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\041\u0354\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\041\u035a\001\001\000\002" +
    "\001\001\000\004\041\u035c\001\001\000\002\001\001\000" +
    "\004\041\u035e\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\021\u0374\022\073\024\074\033\063\042\071\051\065\061" +
    "\055\070\070\102\053\111\057\121\075\131\066\001\001" +
    "\000\030\022\u02ef\024\u02ee\033\u02e9\042\u02ed\051\u02ea\061" +
    "\u02e6\070\u02ec\102\u02e5\111\u02e7\121\u02f0\131\u02eb\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\004" +
    "\u037f\005\u0382\010\u0380\012\u0383\001\001\000\002\001\001" +
    "\000\006\005\u03a2\012\u03a3\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\006\u0389\010\u0388\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\u038d\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\u03ac\001\001\000\004\017\u03ad\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	
	private Symbol sym;
	ArrayList<Variable> lstVariable = new ArrayList();
	IntegerV integ= new IntegerV();
	ArrayList<String> Variables = new ArrayList<String>();

	//constructor
	public parser( LexerCup lex){
	 super(lex);
	}
	public void report_error(String message, Object info){
		System.out.println("\nREPORT ERROR");
	}
	public void report_fatal_error(String message, Object info){
		System.out.println("\nREPORT FATAL");
	}
	public void syntax_error(Symbol curl_token){
		System.out.println("\nSE ESPERABA: "+symbl_name_from_id(expected_token_ids().get(0)));
        System.out.println("syntaxerr: " + symbl_name_from_id(cur_token.sym) +" Columna: "+cur_token.right+" Linea: "+cur_token.left+" Valor:"+cur_token.value);
	}
	public void prueba(Symbol curl_token){
		System.out.println("----HEYYYY :"+cur_token.right);
	}
	public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        	System.out.println("Error síntactico  " +  (s.left)+ " columna "+(s.right)+". palabra " + s.value ); 
    	}
		protected int error_sync_size() {
        return 1;
    }
	public float obtenerValorNum(Object object){
		return Float.valueOf(String.valueOf(object));
	}
	public int obtenerValorNumInt(Object object){
		return Integer.valueOf(String.valueOf(object));
	}
	public void addNameVar(String var){
		Variables.add(var);
	}




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= estado_inicial EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // estado_inicial ::= etiqueta_gcic 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estado_inicial",93, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // etiqueta_gcic ::= MENOR_QUE C_GCIC parametro_c_gcic MAYOR_QUE head body MENOR_QUE DIVISION C_GCIC MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiqueta_gcic",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // etiqueta_gcic ::= MENOR_QUE C_GCIC MAYOR_QUE head body MENOR_QUE DIVISION C_GCIC MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiqueta_gcic",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // parametro_c_gcic ::= CORCHETE_ABRE id CORCHETE_CIERRA CORCHETE_ABRE name CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_c_gcic",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // parametro_c_gcic ::= CORCHETE_ABRE name CORCHETE_CIERRA CORCHETE_ABRE id CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_c_gcic",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // parametro_c_gcic ::= CORCHETE_ABRE name CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_c_gcic",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // parametro_c_gcic ::= CORCHETE_ABRE id CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_c_gcic",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // id ::= ID IGUAL COMILLA TEXTO_ID COMILLA 
            {
              Object RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ts = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" ID "+ts.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // name ::= NAME IGUAL COMILLA TEXTO COMILLA 
            {
              Object RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object es = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" NAME "+es.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("name",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // head ::= MENOR_QUE C_HEAD MAYOR_QUE parametros_head MENOR_QUE DIVISION C_HEAD MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("head",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // head ::= MENOR_QUE C_HEAD MAYOR_QUE titulo MENOR_QUE DIVISION C_HEAD MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("head",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // head ::= MENOR_QUE C_HEAD MAYOR_QUE MENOR_QUE DIVISION C_HEAD MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("head",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // parametros_head ::= link parametros_head2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_head",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // parametros_head ::= titulo parametros_head1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_head",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // parametros_head ::= parametros_head1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_head",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // parametros_head1 ::= link 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_head1",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // parametros_head2 ::= titulo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_head2",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // link ::= MENOR_QUE C_LINK CORCHETE_ABRE href CORCHETE_CIERRA MAYOR_QUE MENOR_QUE DIVISION C_LINK MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("link",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // link ::= MENOR_QUE C_LINK CORCHETE_ABRE CORCHETE_CIERRA MAYOR_QUE MENOR_QUE DIVISION C_LINK MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("link",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // titulo ::= TI TEXTO TD 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.out.println(" Titulo: "+a.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("titulo",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // titulo ::= TI TD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("titulo",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // href ::= HREF IGUAL COMILLA TEXTO COMILLA 
            {
              Object RESULT =null;
		int linkkleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int linkkright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object linkk = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.out.println(" LINK "+linkk.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("href",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // body ::= MENOR_QUE C_BODY CORCHETE_ABRE background CORCHETE_CIERRA MAYOR_QUE parametros_body MENOR_QUE DIVISION C_BODY MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("body",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // body ::= MENOR_QUE C_BODY CORCHETE_ABRE CORCHETE_CIERRA MAYOR_QUE parametros_body MENOR_QUE DIVISION C_BODY MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("body",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // background ::= BACKGROUND IGUAL COMILLA RGB_COLOR COMILLA 
            {
              Object RESULT =null;
		int backleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int backright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object back = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" BACKGROUND RGB "+back.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("background",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // background ::= BACKGROUND IGUAL COMILLA CTE_COLOR COMILLA 
            {
              Object RESULT =null;
		int baleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int baright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ba = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" BACKGROUND constante de color: "+ba.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("background",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // parametros_body ::= parametros_body etiquetas_h1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_body",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // parametros_body ::= etiquetas_h1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_body",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // parametros_body ::= parametros_body br 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_body",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // parametros_body ::= br 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_body",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // parametros_body ::= parametros_body etiquetas_spam 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_body",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // parametros_body ::= etiquetas_spam 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_body",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // parametros_body ::= parametros_body etiquetas_cp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_body",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // parametros_body ::= etiquetas_cp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_body",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // parametros_body ::= parametros_body etiquetas_input 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_body",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // parametros_body ::= etiquetas_input 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_body",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // parametros_body ::= parametros_body etiquetas_area 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_body",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // parametros_body ::= etiquetas_area 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_body",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // parametros_body ::= parametros_body etiquetas_button 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_body",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // parametros_body ::= etiquetas_button 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_body",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // parametros_body ::= parametros_body etiquetas_img 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_body",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // parametros_body ::= etiquetas_img 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_body",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // parametros_body ::= parametros_body etiquetas_select 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_body",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // parametros_body ::= etiquetas_select 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_body",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // parametros_body ::= parametros_body etiquetas_div 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_body",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // parametros_body ::= etiquetas_div 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_body",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // parametros_body ::= parametros_body etiquetas_scripting 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_body",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // parametros_body ::= etiquetas_scripting 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_body",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // etiquetas_h1 ::= ABRE_C_H1 parametros_h1 MAYOR_QUE TEXTO CIERRA_C_H1 
            {
              Object RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object txt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" TEXTO EN H1:  "+txt.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_h1",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // etiquetas_h1 ::= ABRE_C_H1 parametros_h1 MAYOR_QUE CIERRA_C_H1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_h1",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // etiquetas_h1 ::= ABRE_C_H1 MAYOR_QUE TEXTO CIERRA_C_H1 
            {
              Object RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object txt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" TEXTO EN H1:  "+txt.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_h1",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // etiquetas_h1 ::= ABRE_C_H1 MAYOR_QUE CIERRA_C_H1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_h1",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // parametros_h1 ::= CORCHETE_ABRE id_h1 CORCHETE_CIERRA parametros_h1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_h1",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // parametros_h1 ::= CORCHETE_ABRE color_h1 CORCHETE_CIERRA parametros_h1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_h1",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // parametros_h1 ::= CORCHETE_ABRE font_size_h1 CORCHETE_CIERRA parametros_h1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_h1",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // parametros_h1 ::= CORCHETE_ABRE font_family_h1 CORCHETE_CIERRA parametros_h1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_h1",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // parametros_h1 ::= CORCHETE_ABRE text_align_h1 CORCHETE_CIERRA parametros_h1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_h1",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // parametros_h1 ::= CORCHETE_ABRE id_h1 CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_h1",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // parametros_h1 ::= CORCHETE_ABRE color_h1 CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_h1",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // parametros_h1 ::= CORCHETE_ABRE font_size_h1 CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_h1",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // parametros_h1 ::= CORCHETE_ABRE font_family_h1 CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_h1",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // parametros_h1 ::= CORCHETE_ABRE text_align_h1 CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_h1",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // font_size_h1 ::= FONT_SIZE IGUAL COMILLA SIZE COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" FONT SIZE H1 "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("font_size_h1",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // font_family_h1 ::= FONT_FAMILY IGUAL COMILLA TIPOS_LETRA COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" FONT FAMILY H1 "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("font_family_h1",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // text_align_h1 ::= TEXT_ALIGN IGUAL COMILLA ALINEACION COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" TEXT ALIGN H1 "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("text_align_h1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // id_h1 ::= ID IGUAL COMILLA TEXTO_ID COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" ID H1 "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id_h1",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // color_h1 ::= COLOR IGUAL COMILLA CTE_COLOR COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" CTE Color H1 "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("color_h1",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // color_h1 ::= COLOR IGUAL COMILLA RGB_COLOR COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" RGB H1 "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("color_h1",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // br ::= MENOR_QUE C_BR MAYOR_QUE 
            {
              Object RESULT =null;
		System.out.println(" BR Salto de Linea \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("br",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // etiquetas_spam ::= ABRE_C_SPAM parametros_spam MAYOR_QUE TEXTO CIERRA_C_SPAM 
            {
              Object RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object txt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" TEXTO EN SPAM:  "+txt.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_spam",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // etiquetas_spam ::= ABRE_C_SPAM parametros_spam MAYOR_QUE CIERRA_C_SPAM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_spam",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // etiquetas_spam ::= ABRE_C_SPAM MAYOR_QUE TEXTO CIERRA_C_SPAM 
            {
              Object RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object txt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" TEXTO EN SPAM:  "+txt.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_spam",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // etiquetas_spam ::= ABRE_C_SPAM MAYOR_QUE CIERRA_C_SPAM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_spam",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // parametros_spam ::= CORCHETE_ABRE id_spam CORCHETE_CIERRA parametros_spam 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_spam",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // parametros_spam ::= CORCHETE_ABRE color_spam CORCHETE_CIERRA parametros_spam 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_spam",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // parametros_spam ::= CORCHETE_ABRE font_size_spam CORCHETE_CIERRA parametros_spam 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_spam",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // parametros_spam ::= CORCHETE_ABRE font_family_spam CORCHETE_CIERRA parametros_spam 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_spam",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // parametros_spam ::= CORCHETE_ABRE text_align_spam CORCHETE_CIERRA parametros_spam 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_spam",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // parametros_spam ::= CORCHETE_ABRE id_spam CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_spam",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // parametros_spam ::= CORCHETE_ABRE color_spam CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_spam",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // parametros_spam ::= CORCHETE_ABRE font_size_spam CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_spam",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // parametros_spam ::= CORCHETE_ABRE font_family_spam CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_spam",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // parametros_spam ::= CORCHETE_ABRE text_align_spam CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_spam",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // font_size_spam ::= FONT_SIZE IGUAL COMILLA SIZE COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" FONT SIZE SPAM "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("font_size_spam",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // font_family_spam ::= FONT_FAMILY IGUAL COMILLA TIPOS_LETRA COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" FONT FAMILY SPAM "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("font_family_spam",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // text_align_spam ::= TEXT_ALIGN IGUAL COMILLA ALINEACION COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" TEXT ALIGN SPAM "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("text_align_spam",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // id_spam ::= ID IGUAL COMILLA TEXTO_ID COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" ID SPAM "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id_spam",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // color_spam ::= COLOR IGUAL COMILLA CTE_COLOR COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" CTE Color SPAM "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("color_spam",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // color_spam ::= COLOR IGUAL COMILLA RGB_COLOR COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" RGB SPAM "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("color_spam",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // etiquetas_cp ::= ABRE_C_P parametros_cp MAYOR_QUE TEXTO CIERRA_C_P 
            {
              Object RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object txt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" TEXTO EN CP:  "+txt.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_cp",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // etiquetas_cp ::= ABRE_C_P parametros_cp MAYOR_QUE CIERRA_C_P 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_cp",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // etiquetas_cp ::= ABRE_C_P MAYOR_QUE TEXTO CIERRA_C_P 
            {
              Object RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object txt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" TEXTO EN CP:  "+txt.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_cp",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // etiquetas_cp ::= ABRE_C_P MAYOR_QUE CIERRA_C_P 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_cp",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // parametros_cp ::= CORCHETE_ABRE id_cp CORCHETE_CIERRA parametros_cp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_cp",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // parametros_cp ::= CORCHETE_ABRE color_cp CORCHETE_CIERRA parametros_cp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_cp",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // parametros_cp ::= CORCHETE_ABRE font_size_cp CORCHETE_CIERRA parametros_cp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_cp",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // parametros_cp ::= CORCHETE_ABRE font_family_cp CORCHETE_CIERRA parametros_cp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_cp",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // parametros_cp ::= CORCHETE_ABRE text_align_cp CORCHETE_CIERRA parametros_cp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_cp",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // parametros_cp ::= CORCHETE_ABRE id_cp CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_cp",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // parametros_cp ::= CORCHETE_ABRE color_cp CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_cp",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // parametros_cp ::= CORCHETE_ABRE font_size_cp CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_cp",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // parametros_cp ::= CORCHETE_ABRE font_family_cp CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_cp",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // parametros_cp ::= CORCHETE_ABRE text_align_cp CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_cp",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // font_size_cp ::= FONT_SIZE IGUAL COMILLA SIZE COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" FONT SIZE CP "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("font_size_cp",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // font_family_cp ::= FONT_FAMILY IGUAL COMILLA TIPOS_LETRA COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" FONT FAMILY CP "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("font_family_cp",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // text_align_cp ::= TEXT_ALIGN IGUAL COMILLA ALINEACION COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" TEXT ALIGN CP "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("text_align_cp",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // id_cp ::= ID IGUAL COMILLA TEXTO_ID COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" ID CP "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id_cp",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // color_cp ::= COLOR IGUAL COMILLA CTE_COLOR COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" CTE Color CP "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("color_cp",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // color_cp ::= COLOR IGUAL COMILLA RGB_COLOR COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" RGB CP "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("color_cp",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // etiquetas_input ::= ABRE_INPUT parametros_input MAYOR_QUE TEXTO CIERRA_INPUT 
            {
              Object RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object txt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" TEXTO EN INPUT:  "+txt.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_input",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // etiquetas_input ::= ABRE_INPUT parametros_input MAYOR_QUE CIERRA_INPUT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_input",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // etiquetas_input ::= ABRE_INPUT MAYOR_QUE TEXTO CIERRA_INPUT 
            {
              Object RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object txt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" TEXTO EN INPUT:  "+txt.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_input",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // etiquetas_input ::= ABRE_INPUT MAYOR_QUE CIERRA_INPUT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_input",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // parametros_input ::= CORCHETE_ABRE id_input CORCHETE_CIERRA parametros_input 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_input",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // parametros_input ::= CORCHETE_ABRE color_input CORCHETE_CIERRA parametros_input 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_input",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // parametros_input ::= CORCHETE_ABRE font_size_input CORCHETE_CIERRA parametros_input 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_input",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // parametros_input ::= CORCHETE_ABRE font_family_input CORCHETE_CIERRA parametros_input 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_input",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // parametros_input ::= CORCHETE_ABRE text_align_input CORCHETE_CIERRA parametros_input 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_input",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // parametros_input ::= CORCHETE_ABRE tipos_input CORCHETE_CIERRA parametros_input 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_input",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // parametros_input ::= CORCHETE_ABRE id_input CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_input",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // parametros_input ::= CORCHETE_ABRE color_input CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_input",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // parametros_input ::= CORCHETE_ABRE font_size_input CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_input",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // parametros_input ::= CORCHETE_ABRE font_family_input CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_input",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // parametros_input ::= CORCHETE_ABRE text_align_input CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_input",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // parametros_input ::= CORCHETE_ABRE tipos_input CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_input",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // font_size_input ::= FONT_SIZE IGUAL COMILLA SIZE COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" FONT SIZE INPUT "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("font_size_input",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // font_family_input ::= FONT_FAMILY IGUAL COMILLA TIPOS_LETRA COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" FONT FAMILY INPUT "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("font_family_input",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // text_align_input ::= TEXT_ALIGN IGUAL COMILLA ALINEACION COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" TEXT ALIGN INPUT "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("text_align_input",69, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // id_input ::= ID IGUAL COMILLA TEXTO_ID COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" ID INPUT "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id_input",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // color_input ::= COLOR IGUAL COMILLA CTE_COLOR COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" CTE Color INPUT "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("color_input",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // color_input ::= COLOR IGUAL COMILLA RGB_COLOR COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" RGB INPUT "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("color_input",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // tipos_input ::= TYPE IGUAL COMILLA TIPOS_DE_INPUT COMILLA 
            {
              Object RESULT =null;
		int inputleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int inputright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object input = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" TIPOS DE INPUT "+input.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_input",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // etiquetas_area ::= ABRE_TEXT_AREA parametros_area MAYOR_QUE TEXTO CIERRA_TEXT_AREA 
            {
              Object RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object txt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" TEXTO EN TEXT AREA:  "+txt.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_area",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // etiquetas_area ::= ABRE_TEXT_AREA parametros_area MAYOR_QUE CIERRA_TEXT_AREA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_area",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // etiquetas_area ::= ABRE_TEXT_AREA MAYOR_QUE TEXTO CIERRA_TEXT_AREA 
            {
              Object RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object txt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" TEXTO EN TEXT AREA:  "+txt.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_area",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // etiquetas_area ::= ABRE_TEXT_AREA MAYOR_QUE CIERRA_TEXT_AREA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_area",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // parametros_area ::= CORCHETE_ABRE id_area CORCHETE_CIERRA parametros_area 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_area",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // parametros_area ::= CORCHETE_ABRE font_size_area CORCHETE_CIERRA parametros_area 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_area",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // parametros_area ::= CORCHETE_ABRE font_family_area CORCHETE_CIERRA parametros_area 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_area",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // parametros_area ::= CORCHETE_ABRE text_align_area CORCHETE_CIERRA parametros_area 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_area",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // parametros_area ::= CORCHETE_ABRE cols_area CORCHETE_CIERRA parametros_area 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_area",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // parametros_area ::= CORCHETE_ABRE rows_area CORCHETE_CIERRA parametros_area 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_area",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // parametros_area ::= CORCHETE_ABRE id_area CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_area",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // parametros_area ::= CORCHETE_ABRE font_size_area CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_area",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // parametros_area ::= CORCHETE_ABRE font_family_area CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_area",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // parametros_area ::= CORCHETE_ABRE text_align_area CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_area",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // parametros_area ::= CORCHETE_ABRE cols_area CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_area",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // parametros_area ::= CORCHETE_ABRE rows_area CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_area",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // font_size_area ::= FONT_SIZE IGUAL COMILLA SIZE COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" FONT SIZE TEXT  AREA: "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("font_size_area",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // font_family_area ::= FONT_FAMILY IGUAL COMILLA TIPOS_LETRA COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" FONT FAMILY TEXT AREA: "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("font_family_area",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // text_align_area ::= TEXT_ALIGN IGUAL COMILLA ALINEACION COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" TEXT ALIGN TEXT AREA: "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("text_align_area",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // id_area ::= ID IGUAL COMILLA TEXTO_ID COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" ID TEXT AREA: "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id_area",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // cols_area ::= COLS IGUAL COMILLA NUMERO_ENTERO COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" NUMERO COLS TEXT AREA "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cols_area",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // rows_area ::= ROWS IGUAL COMILLA NUMERO_ENTERO COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" NUMERO ROWS TEXT AREA "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rows_area",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // etiquetas_button ::= ABRE_BUTTON parametros_button MAYOR_QUE TEXTO CIERRA_BUTTON 
            {
              Object RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object txt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" TEXTO EN BUTTON:  "+txt.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_button",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // etiquetas_button ::= ABRE_BUTTON parametros_button MAYOR_QUE CIERRA_BUTTON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_button",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // etiquetas_button ::= ABRE_BUTTON MAYOR_QUE TEXTO CIERRA_BUTTON 
            {
              Object RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object txt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" TEXTO EN BUTTON:  "+txt.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_button",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // etiquetas_button ::= ABRE_BUTTON MAYOR_QUE CIERRA_BUTTON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_button",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // parametros_button ::= CORCHETE_ABRE id_button CORCHETE_CIERRA parametros_button 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_button",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // parametros_button ::= CORCHETE_ABRE font_size_button CORCHETE_CIERRA parametros_button 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_button",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // parametros_button ::= CORCHETE_ABRE font_family_button CORCHETE_CIERRA parametros_button 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_button",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // parametros_button ::= CORCHETE_ABRE text_align_button CORCHETE_CIERRA parametros_button 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_button",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // parametros_button ::= CORCHETE_ABRE color_button CORCHETE_CIERRA parametros_button 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_button",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // parametros_button ::= CORCHETE_ABRE background_button CORCHETE_CIERRA parametros_button 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_button",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // parametros_button ::= CORCHETE_ABRE onclick_button CORCHETE_CIERRA parametros_button 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_button",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // parametros_button ::= CORCHETE_ABRE id_button CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_button",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // parametros_button ::= CORCHETE_ABRE font_size_button CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_button",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // parametros_button ::= CORCHETE_ABRE font_family_button CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_button",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // parametros_button ::= CORCHETE_ABRE text_align_button CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_button",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // parametros_button ::= CORCHETE_ABRE color_button CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_button",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // parametros_button ::= CORCHETE_ABRE background_button CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_button",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // parametros_button ::= CORCHETE_ABRE onclick_button CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_button",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // font_size_button ::= FONT_SIZE IGUAL COMILLA SIZE COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" FONT SIZE BUTTON : "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("font_size_button",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // font_family_button ::= FONT_FAMILY IGUAL COMILLA TIPOS_LETRA COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" FONT FAMILY BUTTON: "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("font_family_button",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // text_align_button ::= TEXT_ALIGN IGUAL COMILLA ALINEACION COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" TEXT ALIGN BUTTON: "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("text_align_button",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // id_button ::= ID IGUAL COMILLA TEXTO_ID COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" ID BUTTON: "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id_button",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // color_button ::= COLOR IGUAL COMILLA CTE_COLOR COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" CTE Color BUTTON "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("color_button",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // color_button ::= COLOR IGUAL COMILLA RGB_COLOR COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" RGB BUTTON "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("color_button",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // background_button ::= BACKGROUND IGUAL COMILLA RGB_COLOR COMILLA 
            {
              Object RESULT =null;
		int backleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int backright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object back = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" BACKGROUND RGB BUTTON: "+back.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("background_button",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // background_button ::= BACKGROUND IGUAL COMILLA CTE_COLOR COMILLA 
            {
              Object RESULT =null;
		int baleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int baright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ba = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" BACKGROUND constante de color BUTTON: "+ba.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("background_button",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // onclick_button ::= ONCLICK IGUAL COMILLA NOMBRE_METODO COMILLA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" METODO DEL BUTTON: "+a.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("onclick_button",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // etiquetas_img ::= ABRE_IMG parametros_img MAYOR_QUE TEXTO CIERRA_IMG 
            {
              Object RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object txt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" TEXTO EN IMAGEN:  "+txt.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_img",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // etiquetas_img ::= ABRE_IMG parametros_img MAYOR_QUE CIERRA_IMG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_img",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // etiquetas_img ::= ABRE_IMG MAYOR_QUE TEXTO CIERRA_IMG 
            {
              Object RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object txt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" TEXTO EN IMAGEN:  "+txt.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_img",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // etiquetas_img ::= ABRE_IMG MAYOR_QUE CIERRA_IMG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_img",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // parametros_img ::= CORCHETE_ABRE id_img CORCHETE_CIERRA parametros_img 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_img",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // parametros_img ::= CORCHETE_ABRE src_img CORCHETE_CIERRA parametros_img 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_img",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // parametros_img ::= CORCHETE_ABRE width_img CORCHETE_CIERRA parametros_img 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_img",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // parametros_img ::= CORCHETE_ABRE height_img CORCHETE_CIERRA parametros_img 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_img",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // parametros_img ::= CORCHETE_ABRE alt_img CORCHETE_CIERRA parametros_img 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_img",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // parametros_img ::= CORCHETE_ABRE id_img CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_img",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // parametros_img ::= CORCHETE_ABRE src_img CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_img",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // parametros_img ::= CORCHETE_ABRE width_img CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_img",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // parametros_img ::= CORCHETE_ABRE height_img CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_img",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // parametros_img ::= CORCHETE_ABRE alt_img CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_img",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // src_img ::= SRC IGUAL COMILLA TEXTO COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("SRC: IMG : "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("src_img",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // width_img ::= WIDTH IGUAL COMILLA SIZE COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" WIDHT IMG: "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("width_img",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // height_img ::= HEIGHT IGUAL COMILLA SIZE COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" HEIGHT IMG: : "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("height_img",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // id_img ::= ID IGUAL COMILLA TEXTO_ID COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" ID IMG: "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id_img",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // alt_img ::= ALT IGUAL COMILLA TEXTO COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" ALT DE IMG "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("alt_img",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // etiquetas_select ::= ABRE_C_SELECT parametros_select MAYOR_QUE etiquetas_option CIERRA_C_SELECT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_select",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // etiquetas_select ::= ABRE_C_SELECT parametros_select MAYOR_QUE CIERRA_C_SELECT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_select",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // etiquetas_select ::= ABRE_C_SELECT MAYOR_QUE CIERRA_C_SELECT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_select",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // parametros_select ::= CORCHETE_ABRE id_select CORCHETE_CIERRA parametros_select 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_select",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // parametros_select ::= CORCHETE_ABRE color_select CORCHETE_CIERRA parametros_select 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_select",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // parametros_select ::= CORCHETE_ABRE font_size_select CORCHETE_CIERRA parametros_select 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_select",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // parametros_select ::= CORCHETE_ABRE font_family_select CORCHETE_CIERRA parametros_select 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_select",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // parametros_select ::= CORCHETE_ABRE text_align_select CORCHETE_CIERRA parametros_select 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_select",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // parametros_select ::= CORCHETE_ABRE id_select CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_select",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // parametros_select ::= CORCHETE_ABRE color_select CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_select",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // parametros_select ::= CORCHETE_ABRE font_size_select CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_select",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // parametros_select ::= CORCHETE_ABRE font_family_select CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_select",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // parametros_select ::= CORCHETE_ABRE text_align_select CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_select",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // font_size_select ::= FONT_SIZE IGUAL COMILLA SIZE COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" FONT SIZE SELECT "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("font_size_select",74, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // font_family_select ::= FONT_FAMILY IGUAL COMILLA TIPOS_LETRA COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" FONT FAMILY SELECT "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("font_family_select",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // text_align_select ::= TEXT_ALIGN IGUAL COMILLA ALINEACION COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" TEXT ALIGN SELECT "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("text_align_select",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // id_select ::= ID IGUAL COMILLA TEXTO_ID COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" ID SELECT "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id_select",72, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // color_select ::= COLOR IGUAL COMILLA CTE_COLOR COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" CTE Color SELECT "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("color_select",73, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // color_select ::= COLOR IGUAL COMILLA RGB_COLOR COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" RGB SELECT "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("color_select",73, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // etiquetas_option ::= ABRE_C_OPTION TEXTO CIERRA_C_OPTION etiquetas_option 
            {
              Object RESULT =null;
		int optleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int optright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object opt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 System.out.println(" OPCIONES EN SELECT.: "+opt.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_option",77, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // etiquetas_option ::= ABRE_C_OPTION TEXTO CIERRA_C_OPTION 
            {
              Object RESULT =null;
		int optleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int optright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object opt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" OPCIONES EN SELECT "+opt.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_option",77, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // etiquetas_div ::= ABRE_C_DIV parametros_div MAYOR_QUE parametros_body CIERRA_C_DIV 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_div",79, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // etiquetas_div ::= ABRE_C_DIV parametros_div MAYOR_QUE CIERRA_C_DIV 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_div",79, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // etiquetas_div ::= ABRE_C_DIV MAYOR_QUE CIERRA_C_DIV 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_div",79, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // parametros_div ::= CORCHETE_ABRE id_div CORCHETE_CIERRA parametros_div 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_div",78, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // parametros_div ::= CORCHETE_ABRE color_div CORCHETE_CIERRA parametros_div 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_div",78, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // parametros_div ::= CORCHETE_ABRE font_size_div CORCHETE_CIERRA parametros_div 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_div",78, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // parametros_div ::= CORCHETE_ABRE font_family_div CORCHETE_CIERRA parametros_div 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_div",78, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // parametros_div ::= CORCHETE_ABRE text_align_div CORCHETE_CIERRA parametros_div 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_div",78, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // parametros_div ::= CORCHETE_ABRE background_div CORCHETE_CIERRA parametros_div 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_div",78, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // parametros_div ::= CORCHETE_ABRE class_div CORCHETE_CIERRA parametros_div 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_div",78, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // parametros_div ::= CORCHETE_ABRE id_div CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_div",78, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // parametros_div ::= CORCHETE_ABRE color_div CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_div",78, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // parametros_div ::= CORCHETE_ABRE font_size_div CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_div",78, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // parametros_div ::= CORCHETE_ABRE font_family_div CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_div",78, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // parametros_div ::= CORCHETE_ABRE text_align_div CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_div",78, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // parametros_div ::= CORCHETE_ABRE background_div CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_div",78, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // parametros_div ::= CORCHETE_ABRE class_div CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_div",78, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // font_size_div ::= FONT_SIZE IGUAL COMILLA SIZE COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" FONT SIZE DIV "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("font_size_div",83, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // font_family_div ::= FONT_FAMILY IGUAL COMILLA TIPOS_LETRA COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" FONT FAMILY DIV "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("font_family_div",84, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // text_align_div ::= TEXT_ALIGN IGUAL COMILLA ALINEACION COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" TEXT ALIGN DIV "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("text_align_div",85, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // id_div ::= ID IGUAL COMILLA TEXTO_ID COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" ID DIV "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id_div",80, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // background_div ::= BACKGROUND IGUAL COMILLA RGB_COLOR COMILLA 
            {
              Object RESULT =null;
		int backleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int backright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object back = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" BACKGROUND RGB DIV: "+back.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("background_div",82, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // background_div ::= BACKGROUND IGUAL COMILLA CTE_COLOR COMILLA 
            {
              Object RESULT =null;
		int baleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int baright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ba = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" BACKGROUND constante de color DIV: "+ba.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("background_div",82, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // color_div ::= COLOR IGUAL COMILLA CTE_COLOR COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" CTE Color DIV "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("color_div",81, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // color_div ::= COLOR IGUAL COMILLA RGB_COLOR COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" RGB DIV "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("color_div",81, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // class_div ::= CLASS IGUAL COMILLA TIPOS_CLASE COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" Class DIV "+s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_div",86, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // etiquetas_scripting ::= ABRE_C_SCRIPTING MAYOR_QUE parametros_scripting CIERRA_C_SCRIPTING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_scripting",87, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // etiquetas_scripting ::= ABRE_C_SCRIPTING MAYOR_QUE parametros_proces CIERRA_C_SCRIPTING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas_scripting",87, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // parametros_scripting ::= onload parametros_proces 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_scripting",89, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // parametros_scripting ::= onload 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_scripting",89, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // parametros_proces ::= proces parametros_proces 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_proces",88, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // parametros_proces ::= proces 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_proces",88, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // proces ::= NOMBRE_METODO CORCHETE_ABRE definicion_variables CORCHETE_CIERRA 
            {
              Object RESULT =null;
		int methodleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int methodright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object method = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 System.out.println(" METODO PROCESS_() "+method.toString()+"-------------------------------"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proces",90, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // proces ::= NOMBRE_METODO CORCHETE_ABRE CORCHETE_CIERRA 
            {
              Object RESULT =null;
		int methodleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int methodright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object method = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 System.out.println(" METODO PROCESS_() "+method.toString()+"-------------------------------"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proces",90, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // onload ::= ON_LOAD PARENTESIS_ABRE PARENTESIS_CIERRA CORCHETE_ABRE CORCHETE_CIERRA 
            {
              Object RESULT =null;
		 System.out.println(" METODO ONLOAD() "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("onload",92, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // definicion_variables ::= integer definicion_variables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("definicion_variables",103, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // definicion_variables ::= integer 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("definicion_variables",103, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // definicion_variables ::= string definicion_variables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("definicion_variables",103, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // definicion_variables ::= string 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("definicion_variables",103, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // definicion_variables ::= decimal definicion_variables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("definicion_variables",103, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // definicion_variables ::= decimal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("definicion_variables",103, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // definicion_variables ::= char definicion_variables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("definicion_variables",103, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // definicion_variables ::= char 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("definicion_variables",103, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // definicion_variables ::= asig definicion_variables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("definicion_variables",103, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // definicion_variables ::= asig 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("definicion_variables",103, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // definicion_variables ::= boolean definicion_variables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("definicion_variables",103, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // definicion_variables ::= boolean 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("definicion_variables",103, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // definicion_variables ::= metodos_especiales definicion_variables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("definicion_variables",103, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // definicion_variables ::= metodos_especiales 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("definicion_variables",103, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // definicion_variables ::= sentencias_control definicion_variables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("definicion_variables",103, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // definicion_variables ::= sentencias_control 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("definicion_variables",103, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // instruccion ::= integer 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",97, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // instruccion ::= string 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",97, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // instruccion ::= decimal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",97, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // instruccion ::= char 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",97, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // instruccion ::= asig 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",97, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // instruccion ::= boolean 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",97, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // instruccion ::= metodos_especiales 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",97, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // asig ::= NOMBRE_VARIABLE IGUAL asig2 PUNTO_COMA 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("----- ASIGNACION INTEGER:   "+var1+" Valores: "+val); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asig",109, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // asig2 ::= asig2 SUMA asig2 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1.toString()+"+"+e2.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asig2",110, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // asig2 ::= asig2 RESTA asig2 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1.toString()+"-"+e2.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asig2",110, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // asig2 ::= asig2 MULTIPLICACION asig2 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1.toString()+"*"+e2.toString() ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asig2",110, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // asig2 ::= asig2 DIVISION asig2 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1.toString()+"/"+e2.toString() ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asig2",110, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // asig2 ::= asig2 OR_O_AND asig2 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s.toString()+o.toString()+" "+t.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asig2",110, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // asig2 ::= RESTA asig2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "-"+e.toString();  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asig2",110, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // asig2 ::= PARENTESIS_ABRE asig2 PARENTESIS_CIERRA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "("+e.toString()+")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asig2",110, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // asig2 ::= NUMERO_ENTERO 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asig2",110, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // asig2 ::= NUMERO_DECIMAL 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asig2",110, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // asig2 ::= NOMBRE_VARIABLE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asig2",110, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // asig2 ::= COMILLA TEXTO COMILLA 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = t.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asig2",110, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // asig2 ::= COMILLA_SIMPLE TEXTO COMILLA_SIMPLE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = t.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asig2",110, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // asig2 ::= operador_logico_boolean 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t.toString()+""; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asig2",110, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // get_element ::= GETELEMENBYID PARENTESIS_ABRE COMILLA_SIMPLE TEXTO_ID COMILLA_SIMPLE PARENTESIS_CIERRA 
            {
              Object RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ids = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT= ids.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("get_element",112, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // integer ::= INTEGER GLOBAL nombre_variables PUNTO_COMA 
            {
              Object RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 /*lstVariable.add();*/  System.out.println(" VARIABLES:  G "+vars); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("integer",104, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // integer ::= INTEGER GLOBAL nombre_variables IGUAL valor_integer PUNTO_COMA 
            {
              Object RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" VARIABLES:  G "+vars+" Valores: "+val); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("integer",104, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // integer ::= INTEGER nombre_variables PUNTO_COMA 
            {
              Object RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" VARIABLES:   "+vars); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("integer",104, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // integer ::= INTEGER nombre_variables IGUAL valor_integer PUNTO_COMA 
            {
              Object RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" VARIABLES:   "+vars+" Valores: "+val); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("integer",104, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // nombre_variables ::= nombre_variables COMA NOMBRE_VARIABLE 
            {
              Object RESULT =null;
		int aaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object aa = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object var2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= aa.toString()+var2.toString()+c.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nombre_variables",105, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */
  /** Method 1 with the actual generated action code for actions 300 to 600. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000001(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // nombre_variables ::= NOMBRE_VARIABLE 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= var1+",";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nombre_variables",105, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // valor_integer ::= valor_integer SUMA valor_integer 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1.toString()+"+"+e2.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_integer",106, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // valor_integer ::= valor_integer RESTA valor_integer 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1.toString()+"-"+e2.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_integer",106, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // valor_integer ::= valor_integer MULTIPLICACION valor_integer 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1.toString()+"*"+e2.toString() ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_integer",106, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // valor_integer ::= valor_integer DIVISION valor_integer 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1.toString()+"/"+e2.toString() ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_integer",106, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // valor_integer ::= RESTA valor_integer 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "-"+e.toString();  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_integer",106, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // valor_integer ::= PARENTESIS_ABRE valor_integer PARENTESIS_CIERRA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "("+e.toString()+")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_integer",106, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // valor_integer ::= NUMERO_ENTERO 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_integer",106, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // valor_integer ::= NOMBRE_VARIABLE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_integer",106, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // string ::= STRING GLOBAL nombre_variables IGUAL get_element PUNTO_COMA 
            {
              Object RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" GETELEMENT BY ID "+vars+" ID: "+id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("string",111, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // string ::= STRING nombre_variables IGUAL get_element PUNTO_COMA 
            {
              Object RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" GETELEMENT BY ID "+vars+" ID: "+id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("string",111, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // string ::= STRING GLOBAL nombre_variables PUNTO_COMA 
            {
              Object RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 /*lstVariable.add();*/  System.out.println(" VARIABLES: STRING  G "+vars); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("string",111, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // string ::= STRING GLOBAL nombre_variables IGUAL valor_string PUNTO_COMA 
            {
              Object RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" VARIABLES: STRING G "+vars+" Valores: "+val); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("string",111, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // string ::= STRING nombre_variables PUNTO_COMA 
            {
              Object RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" VARIABLES: STRING "+vars); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("string",111, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // string ::= STRING nombre_variables IGUAL valor_string PUNTO_COMA 
            {
              Object RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" VARIABLES: STRING "+vars+" Valores: "+val); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("string",111, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // valor_string ::= valor_string SUMA COMILLA TEXTO COMILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = s.toString()+t.toString()+","; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_string",113, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // valor_string ::= valor_string SUMA NOMBRE_VARIABLE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s.toString()+t.toString()+","; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_string",113, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // valor_string ::= COMILLA TEXTO COMILLA 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = t.toString()+","; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_string",113, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // valor_string ::= NOMBRE_VARIABLE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t.toString()+","; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_string",113, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // char ::= CHAR GLOBAL nombre_variables PUNTO_COMA 
            {
              Object RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  System.out.println(" VARIABLES: CHAR  G "+vars); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("char",115, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // char ::= CHAR GLOBAL nombre_variables IGUAL valor_char PUNTO_COMA 
            {
              Object RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" VARIABLES: CHAR G "+vars+" Valores: "+val); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("char",115, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // char ::= CHAR nombre_variables PUNTO_COMA 
            {
              Object RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" VARIABLES: CHAR "+vars); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("char",115, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // char ::= CHAR nombre_variables IGUAL valor_char PUNTO_COMA 
            {
              Object RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" VARIABLES: CHAR "+vars+" Valores: "+val); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("char",115, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // valor_char ::= valor_char SUMA COMILLA_SIMPLE TEXTO COMILLA_SIMPLE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = s.toString()+t.toString()+","; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_char",116, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // valor_char ::= valor_char SUMA NOMBRE_VARIABLE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s.toString()+t.toString()+","; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_char",116, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // valor_char ::= COMILLA_SIMPLE TEXTO COMILLA_SIMPLE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = t.toString()+","; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_char",116, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // valor_char ::= NOMBRE_VARIABLE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t.toString()+","; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_char",116, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // decimal ::= DECIMAL GLOBAL nombre_variables PUNTO_COMA 
            {
              Object RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" VARIABLES: DECIMAL  G "+vars); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decimal",114, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // decimal ::= DECIMAL GLOBAL nombre_variables IGUAL valor_decimal PUNTO_COMA 
            {
              Object RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" VARIABLES: DECIMAL G "+vars+" Valores: "+val); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decimal",114, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // decimal ::= DECIMAL nombre_variables PUNTO_COMA 
            {
              Object RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" VARIABLES: DECIMAL  "+vars); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decimal",114, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // decimal ::= DECIMAL nombre_variables IGUAL valor_decimal PUNTO_COMA 
            {
              Object RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" VARIABLES: DECIMAL  "+vars+" Valores: "+val); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decimal",114, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // valor_decimal ::= valor_decimal SUMA valor_decimal 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1.toString()+"+"+e2.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_decimal",107, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // valor_decimal ::= valor_decimal RESTA valor_decimal 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1.toString()+"-"+e2.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_decimal",107, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // valor_decimal ::= valor_decimal MULTIPLICACION valor_decimal 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1.toString()+"*"+e2.toString() ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_decimal",107, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // valor_decimal ::= valor_decimal DIVISION valor_decimal 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1.toString()+"/"+e2.toString() ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_decimal",107, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // valor_decimal ::= RESTA valor_decimal 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "-"+e.toString();  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_decimal",107, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // valor_decimal ::= PARENTESIS_ABRE valor_decimal PARENTESIS_CIERRA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "("+e.toString()+")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_decimal",107, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // valor_decimal ::= NUMERO_ENTERO 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_decimal",107, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // valor_decimal ::= NUMERO_DECIMAL 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_decimal",107, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // valor_decimal ::= NOMBRE_VARIABLE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_decimal",107, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // boolean ::= BOOLEAN GLOBAL nombre_variables PUNTO_COMA 
            {
              Object RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" VARIABLES: BOOLEAN  G "+vars); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean",117, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // boolean ::= BOOLEAN GLOBAL nombre_variables IGUAL valor_boolean PUNTO_COMA 
            {
              Object RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" VARIABLES: BOOLEAN G "+vars+" Valores: "+val); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean",117, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // boolean ::= BOOLEAN nombre_variables PUNTO_COMA 
            {
              Object RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" VARIABLES: BOOLEAN  "+vars); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean",117, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // boolean ::= BOOLEAN nombre_variables IGUAL valor_boolean PUNTO_COMA 
            {
              Object RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" VARIABLES: BOOLEAN  "+vars+" Valores: "+val); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean",117, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // valor_boolean ::= valor_boolean OR_O_AND operador_logico_boolean 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s.toString()+o.toString()+" "+t.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_boolean",118, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // valor_boolean ::= valor_boolean OR_O_AND NOMBRE_VARIABLE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s.toString()+o.toString()+" "+t.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_boolean",118, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // valor_boolean ::= operador_logico_boolean 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t.toString()+""; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_boolean",118, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // valor_boolean ::= NOMBRE_VARIABLE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t.toString()+" "; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_boolean",118, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // operador_logico_boolean ::= NOT TRUE_O_FALSE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "!"+t.toString()+" "; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_logico_boolean",119, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // operador_logico_boolean ::= NOT NOMBRE_VARIABLE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "!"+t.toString()+" "; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_logico_boolean",119, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // operador_logico_boolean ::= TRUE_O_FALSE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t.toString()+" "; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_logico_boolean",119, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // sentencias ::= sentencias_control sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",102, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // sentencias ::= sentencias_control 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",102, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // sentencias_control ::= if instruccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_control",98, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // sentencias_control ::= if bloque_INIT_END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_control",98, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // sentencias_control ::= if instruccion pametro_els 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_control",98, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // sentencias_control ::= if bloque_INIT_END pametro_els 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_control",98, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // sentencias_control ::= if instruccion pametros_elseif pametro_els 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_control",98, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // sentencias_control ::= if bloque_INIT_END pametros_elseif pametro_els 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_control",98, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // if ::= IF PARENTESIS_ABRE PARENTESIS_CIERRA THEN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",101, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // pametro_els ::= ELSE instruccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pametro_els",100, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // pametro_els ::= ELSE bloque_INIT_END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pametro_els",100, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // pametros_elseif ::= ELSE IF PARENTESIS_ABRE PARENTESIS_CIERRA THEN instruccion 
            {
              Object RESULT =null;
		System.out.println("aqui 1");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pametros_elseif",99, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // pametros_elseif ::= ELSE IF PARENTESIS_ABRE PARENTESIS_CIERRA THEN bloque_INIT_END 
            {
              Object RESULT =null;
		System.out.println("aqui 1");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pametros_elseif",99, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // pametros_elseif ::= pametros_elseif ELSE IF PARENTESIS_ABRE PARENTESIS_CIERRA THEN instruccion 
            {
              Object RESULT =null;
		System.out.println("aqui 2");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pametros_elseif",99, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // pametros_elseif ::= pametros_elseif ELSE IF PARENTESIS_ABRE PARENTESIS_CIERRA THEN bloque_INIT_END 
            {
              Object RESULT =null;
		System.out.println("aqui 2");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pametros_elseif",99, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // bloque_INIT_END ::= INIT ABRE_INIT definicion_variables CIERRA_INIT END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_INIT_END",96, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // bloque_INIT_END ::= INIT ABRE_INIT CIERRA_INIT END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_INIT_END",96, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // metodos_especiales ::= ASC PARENTESIS_ABRE NOMBRE_VARIABLE PARENTESIS_CIERRA PUNTO_COMA 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 System.out.println(" ASC "+b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodos_especiales",94, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // metodos_especiales ::= DESC PARENTESIS_ABRE NOMBRE_VARIABLE PARENTESIS_CIERRA PUNTO_COMA 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 System.out.println(" DESC "+b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodos_especiales",94, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // metodos_especiales ::= LETPAR_NUM PARENTESIS_ABRE NOMBRE_VARIABLE PARENTESIS_CIERRA PUNTO_COMA 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 System.out.println(" LETPAR_NUM "+b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodos_especiales",94, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // metodos_especiales ::= LETIMPAR_NUM PARENTESIS_ABRE NOMBRE_VARIABLE PARENTESIS_CIERRA PUNTO_COMA 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 System.out.println(" LETIMPAR_NUM "+b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodos_especiales",94, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // metodos_especiales ::= REVERSE PARENTESIS_ABRE NOMBRE_VARIABLE PARENTESIS_CIERRA PUNTO_COMA 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 System.out.println(" REVERSE "+b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodos_especiales",94, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // metodos_especiales ::= CARACTER_ALEATORIO PARENTESIS_ABRE PARENTESIS_CIERRA PUNTO_COMA 
            {
              Object RESULT =null;
		 System.out.println(" CARACTER_ALEATORIO "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodos_especiales",94, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // metodos_especiales ::= NUM_ALEATORIO PARENTESIS_ABRE PARENTESIS_CIERRA PUNTO_COMA 
            {
              Object RESULT =null;
		 System.out.println(" NUM_ALEATORIO "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodos_especiales",94, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // metodos_especiales ::= ALERT_INFO PARENTESIS_ABRE NOMBRE_VARIABLE PARENTESIS_CIERRA PUNTO_COMA 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 System.out.println(" DESC "+b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodos_especiales",94, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // metodos_especiales ::= EXIT PARENTESIS_ABRE PARENTESIS_CIERRA PUNTO_COMA 
            {
              Object RESULT =null;
		 System.out.println(" EXIT "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodos_especiales",94, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* select the action handler based on the action number */
      switch (CUP$parser$act_num/300)
        {
          /*. . . . . . . . 0 < #action < 300. . . . . . . . . . . .*/
          case 0: 
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
          /*. . . . . . . . 300 < #action < 600. . . . . . . . . . . .*/
          case 1: 
              return CUP$parser$do_action_part00000001(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
          /* . . . no valid action number: . . .*/
          default:
            throw new Exception("Invalid action number found in internal parse table");

        }      /* end of switch */
    }
}

}
