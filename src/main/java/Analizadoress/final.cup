/*JAMES GRAMAJO COMPILADORES1 201731172*/
package Analizadoress;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;
import java.util.ArrayList;
import HTML.*;
import Script.*;
import Variables.*;

parser code
{:
	boolean banderaDiv=false;
	private Symbol sym;
	//lista errores sintacticos
	ArrayList<String> sintaxERROR = new ArrayList<String>();


	ArrayList<Variable> lstVariable = new ArrayList();
	IntegerV integ= new IntegerV();
	ArrayList<String> Variables = new ArrayList<String>();

	ArrayList<Html> listHtml = new ArrayList<>();

	ArrayList<Body> listB = new ArrayList<>();
	ArrayList<Body> listC = new ArrayList<>();
	
	

	//OBJETOS HTML
	Html2 html=new Html2();
	Head head=new Head();
	Body body= new Body();
	Spam spam= new Spam();
	Input input = new Input();
	TextArea area=new TextArea();
	Select select= new Select();
	H1 h1= new H1();
	Div div= new Div();
	DivC divc= new DivC();
	Br br= new Br();
	P p= new P();
	Button button = new Button();
	Img img= new Img();
	Script script= new Script();
	Script2 script2= new Script2();


	//constructor
	public parser( LexerCup lex){
	 super(lex);
	}
	public void report_error(String message, Object info){
		System.out.println("\nREPORT ERROR");
	}
	public void report_fatal_error(String message, Object info){
		System.out.println("\nREPORT FATAL");
	}
	public void syntax_error(Symbol curl_token){
		sintaxERROR.add("Se esperaba: "+symbl_name_from_id(expected_token_ids().get(0)) +"\n"
		+" Columna: "+cur_token.right+" Linea: "+cur_token.left+" Valor:"+cur_token.value);

		System.out.println("\nSE ESPERABA: "+symbl_name_from_id(expected_token_ids().get(0)));
        System.out.println("syntaxerr: " + symbl_name_from_id(cur_token.sym) +" Columna: "+cur_token.right+" Linea: "+cur_token.left+" Valor:"+cur_token.value);
	}
	


	public void prueba(Symbol curl_token){
		System.out.println("----HEYYYY :"+cur_token.right);
	}
	public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        	System.out.println("Error s√≠ntactico  " +  (s.left)+ " columna "+(s.right)+". palabra " + s.value ); 
    	}
		protected int error_sync_size() {
        return 1;
    }
	public float obtenerValorNum(Object object){
		return Float.valueOf(String.valueOf(object));
	}
	public int obtenerValorNumInt(Object object){
		return Integer.valueOf(String.valueOf(object));
	}
	public void addNameVar(String var){
		Variables.add(var);
	}
	public ArrayList<Html> getLISTAHTML() {
        return listHtml;
    }
	public ArrayList<String> getSintaxError() {
        return sintaxERROR;
    }



:};
//terminal de C_GCIC
terminal C_GCIC, C_HEAD, C_H1, C_LINK, C_BODY, C_SPAM, C_INPUT, C_TEXTAREA, C_SELECT, C_OPTION, C_DIV, C_IMG, C_BR, C_BUTTON;

//terminal de colores
terminal  COLOR, URL;

terminal HREF, LINK, BACKGROUND, FONT_SIZE;

terminal TEXTO, TEXTO_ID;

//terminal tipos de letra 
terminal TIPOS_LETRA;

//LINEACION DE TEXTO terminal
terminal TEXT_ALIGN;

terminal
TYPE, TIPOS_DE_INPUT, ID, NAME, COLS, ROWS, CLASS, TIPOS_CLASE, ROW, COLUMN, SRC, WIDTH, HEIGHT, ALT, ONCLICK, NOMBRE_METODO, C_SCRIPTING, PROCESS_, ON_LOAD;

terminal RGB_COLOR, CTE_COLOR, NOMBRE_VARIABLE, GLOBAL, INTEGER, DECIMAL, BOOLEAN, TRUE_O_FALSE, OR_O_AND, CHAR, STRING, IGUALDAD, IGUAL, NO_IGUAL, MENOR_QUE, MENOR_IGUAL, MAYOR_QUE, MAYOR_IGUAK, MAYOR_IGUAL, 
OR, AND, NOT, ASC, DESC, LETPAR_NUM, LETIMPAR_NUM, REVERSE, CARACTER_ALEATORIO, NUM_ALEATORIO, ALERT_INFO, EXIT, REDIRECT, MODO, GETELEMENBYID, INIT, END, 
IF, ELSE, THEN, REPEAT, HUNTIL, INSERT, WHILE, THENWHILE, ABRE_INIT, CIERRA_INIT, PARENTESIS_ABRE, PARENTESIS_CIERRA, CORCHETE_ABRE, CORCHETE_CIERRA, COMILLA, COMILLA_SIMPLE, TI, TD;

//SIMBOLOSSS  
terminal PUNTO_COMA, COMA;

//operadores ARITMETICOS y CALCULADORA
terminal SUMA, RESTA, MULTIPLICACION, DIVISION, NUMERO_ENTERO, NUMERO_DECIMAL;
terminal UMENOS, RMENOS;


terminal FONT_FAMILY, ALINEACION, SIZE;
terminal ABRE_C_H1, CIERRA_C_H1, ABRE_C_SPAM, CIERRA_C_SPAM, ABRE_C_P, CIERRA_C_P, ABRE_INPUT, CIERRA_INPUT, ABRE_TEXT_AREA, CIERRA_TEXT_AREA, 
ABRE_BUTTON, CIERRA_BUTTON, ABRE_IMG, CIERRA_IMG, ABRE_C_SELECT, CIERRA_C_SELECT, ABRE_C_OPTION, CIERRA_C_OPTION, ABRE_C_DIV, CIERRA_C_DIV, 
ABRE_C_SCRIPTING, CIERRA_C_SCRIPTING;

/* No terminales */
non terminal etiqueta_gcic, parametro_c_gcic, parametros_head, parametros_head1, parametros_head2, titulo, head, link, href, id, name;
non terminal body, background,parametros_body, br;	 
/*No terminales de C_H1*/
non terminal parametros_h1, etiquetas_h1, id_h1, color_h1, font_size_h1, font_family_h1, text_align_h1;
non terminal parametros_spam, etiquetas_spam, id_spam, color_spam, font_size_spam, font_family_spam, text_align_spam;
non terminal parametros_cp, etiquetas_cp, id_cp, color_cp, font_size_cp, font_family_cp, text_align_cp;
non terminal parametros_area, etiquetas_area, id_area, font_size_area, font_family_area, text_align_area, rows_area, cols_area;
non terminal parametros_img, etiquetas_img, id_img, src_img, width_img, height_img, alt_img;
non terminal parametros_button, etiquetas_button, id_button, font_size_button, font_family_button, text_align_button, color_button, background_button, onclick_button;
non terminal tipos_input, parametros_input, etiquetas_input, id_input, color_input, font_size_input, font_family_input, text_align_input;
non terminal parametros_select, etiquetas_select, id_select, color_select, font_size_select, font_family_select, text_align_select, etiquetas_option;
non terminal parametros_div, etiquetas_div, id_div, color_div, background_div, font_size_div, font_family_div, text_align_div, class_div, abre_div, cierra_div, mayor;


non terminal etiquetas_scripting, abre_script, cierra_script, parametros_proces,parametros_scripting, proces, onload;
non terminal estado_inicial, metodos_especiales, bloque_INIT_END, instruccion, sentencias_control, pametros_elseif, pametro_els, if;
non terminal  repeat, while, insert, param_var, condicionales, condicionales2, cond_str;
//NO TERMINALES DE VARIABLES EN SCRIPTING 
non terminal definicion_variables,integer ,nombre_variables,valor_integer, valor_decimal;
non terminal asig, asig2, string, get_element, valor_string, decimal, char, valor_char, boolean, valor_boolean, operador_logico_boolean;


/* PRECEDENCIA DE OPERADORES */
precedence left SUMA, RESTA;
precedence left MULTIPLICACION, DIVISION;
precedence left IGUALDAD, NO_IGUAL, MENOR_QUE, MENOR_IGUAL, MAYOR_QUE, MAYOR_IGUAL;
precedence left OR, AND, OR_O_AND;
precedence left NOT;
precedence left UMENOS;
//precedence left RMENOS;

start with estado_inicial;

estado_inicial ::=
	etiqueta_gcic
	//sentencias
;

//etiquetas HTML C_GCIC
etiqueta_gcic::=
	MENOR_QUE C_GCIC parametro_c_gcic MAYOR_QUE
	head
	body
	MENOR_QUE DIVISION C_GCIC MAYOR_QUE
	{: :}

	| MENOR_QUE C_GCIC  MAYOR_QUE
	head
	body
	MENOR_QUE DIVISION C_GCIC MAYOR_QUE
	{:  :}
	

;
parametro_c_gcic::=
	CORCHETE_ABRE id:ts CORCHETE_CIERRA CORCHETE_ABRE name:na CORCHETE_CIERRA
	{:   html.setId(ts.toString()); html.setName(na.toString()); html= new Html2();  listHtml.add(html); :}
	
	| CORCHETE_ABRE name:na CORCHETE_CIERRA CORCHETE_ABRE id:ts CORCHETE_CIERRA
	{:  html.setId(ts.toString()); html.setName(na.toString()); html= new Html2();  listHtml.add(html); :}
	
	| CORCHETE_ABRE name:ts CORCHETE_CIERRA
	{:  html.setName(ts.toString()); html= new Html2();  listHtml.add(html); :}
	
	| CORCHETE_ABRE id:ts CORCHETE_CIERRA
	{:  html.setId(ts.toString()); html= new Html2();  listHtml.add(html); :}
	/*
	| error 
	{: sintaxERROR.add(" Se esperaba la definicion de PARAMETROS EN c_gcic \n");
	 expected_token_ids();
	 :}
	*/

;
id::=
	 ID IGUAL COMILLA TEXTO_ID:ts COMILLA 		{: RESULT=ts.toString(); System.out.println(" ID "+ts.toString());:}
	
;

name::=
	NAME IGUAL COMILLA TEXTO:es COMILLA	{:  RESULT=es.toString(); System.out.println(" NAME "+es.toString());:}
;
head::=
	MENOR_QUE C_HEAD MAYOR_QUE
	parametros_head 
	MENOR_QUE DIVISION C_HEAD MAYOR_QUE
	{: listHtml.add(head); :}

	| MENOR_QUE C_HEAD MAYOR_QUE 
	titulo
	MENOR_QUE DIVISION C_HEAD MAYOR_QUE
	{: listHtml.add(head); :}

	| MENOR_QUE C_HEAD MAYOR_QUE 
	MENOR_QUE DIVISION C_HEAD MAYOR_QUE
	{: listHtml.add(head); :}
	

;

parametros_head::=
	  link parametros_head2

	| titulo  parametros_head1

	| parametros_head1
;
parametros_head1::=
	 link
;
parametros_head2::=
	titulo
;

link::=
	MENOR_QUE C_LINK  CORCHETE_ABRE href:r CORCHETE_CIERRA MAYOR_QUE
	MENOR_QUE DIVISION C_LINK MAYOR_QUE
	{: System.out.println(r.toString()); Link link= new Link(); link.setHref(r.toString()); head.getListHead().add(link); :}

	| MENOR_QUE C_LINK  CORCHETE_ABRE  CORCHETE_CIERRA MAYOR_QUE
	MENOR_QUE DIVISION C_LINK MAYOR_QUE
	{: Link link= new Link(); head.getListHead().add(link); :}
;

titulo::=
	TI TEXTO:a 	TD  
	{: Title title= new Title(a.toString()); head.getListHead().add(title);         System.out.println(" Titulo: "+a.toString()); :}
	
	| TI TD
	{: Title title= new Title(); head.getListHead().add(title);         :}
;

href::=
	HREF IGUAL COMILLA TEXTO:linkk COMILLA	{: RESULT=linkk.toString(); System.out.println(" LINK "+linkk.toString());:} 	
;

body::=
	MENOR_QUE C_BODY CORCHETE_ABRE background CORCHETE_CIERRA MAYOR_QUE
	parametros_body
	MENOR_QUE DIVISION C_BODY MAYOR_QUE
	{: listHtml.add(body); :}

	| MENOR_QUE C_BODY CORCHETE_ABRE CORCHETE_CIERRA MAYOR_QUE
	parametros_body
	MENOR_QUE DIVISION C_BODY MAYOR_QUE
	{: listHtml.add(body); :}
;

background::=
	BACKGROUND IGUAL COMILLA RGB_COLOR:back COMILLA		
	{: body.setBackground(back.toString()); System.out.println(" BACKGROUND RGB "+back.toString()); :}

	| BACKGROUND IGUAL COMILLA CTE_COLOR:ba COMILLA		
	{: body.setBackground(ba.toString()); System.out.println(" BACKGROUND CTE COLOR "+ba.toString()); :}
;

//AQUIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII
//AQUIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII
parametros_body::=
	parametros_body etiquetas_h1 
	| etiquetas_h1
	| parametros_body br 
	| br
	| parametros_body etiquetas_spam
	| etiquetas_spam
	| parametros_body etiquetas_cp
	| etiquetas_cp
	| parametros_body etiquetas_input
	| etiquetas_input
	| parametros_body etiquetas_area
	| etiquetas_area
	| parametros_body etiquetas_button
	| etiquetas_button
	| parametros_body etiquetas_img
	| etiquetas_img
	| parametros_body etiquetas_select
	| etiquetas_select
	| parametros_body etiquetas_div
	| etiquetas_div
	| parametros_body etiquetas_scripting
	| etiquetas_scripting
;

etiquetas_h1::=
	ABRE_C_H1 parametros_h1 MAYOR_QUE TEXTO:txt CIERRA_C_H1
	{: h1.setTexto(txt.toString()); if(banderaDiv==false){body.getListBody().add(h1);}else{div.getListDiv().add(h1);} h1= new H1(); System.out.println(" TEXTO EN H1:  "+txt.toString());:}

	| ABRE_C_H1 parametros_h1 MAYOR_QUE  CIERRA_C_H1 
	{: if(banderaDiv==false){body.getListBody().add(h1);}else{div.getListDiv().add(h1);} h1= new H1();:}

	| ABRE_C_H1  MAYOR_QUE TEXTO:txt CIERRA_C_H1
	{:h1.setTexto(txt.toString()); if(banderaDiv==false){body.getListBody().add(h1);}else{div.getListDiv().add(h1);} h1= new H1(); System.out.println(" TEXTO EN H1:  "+txt.toString());:}
	| ABRE_C_H1  MAYOR_QUE  CIERRA_C_H1
	{: if(banderaDiv==false){body.getListBody().add(h1);}else{div.getListDiv().add(h1);} h1= new H1(); :}
	
;
parametros_h1::=
	CORCHETE_ABRE id_h1 CORCHETE_CIERRA parametros_h1
	| CORCHETE_ABRE color_h1 CORCHETE_CIERRA parametros_h1
	| CORCHETE_ABRE font_size_h1 CORCHETE_CIERRA parametros_h1
	| CORCHETE_ABRE font_family_h1 CORCHETE_CIERRA parametros_h1
	| CORCHETE_ABRE text_align_h1 CORCHETE_CIERRA parametros_h1
	| CORCHETE_ABRE id_h1 CORCHETE_CIERRA 
	| CORCHETE_ABRE color_h1 CORCHETE_CIERRA 
	| CORCHETE_ABRE font_size_h1 CORCHETE_CIERRA 
	| CORCHETE_ABRE font_family_h1 CORCHETE_CIERRA 
	| CORCHETE_ABRE text_align_h1 CORCHETE_CIERRA
	//| error:er {: System.out.println("Se esperaba aparametro de H1: "+er.toString());:}
	
;
font_size_h1::=
	FONT_SIZE IGUAL COMILLA SIZE:s COMILLA 					{: h1.setSize(s.toString()); System.out.println(" FONT SIZE H1 "+s.toString());:}
;
font_family_h1::=
	FONT_FAMILY IGUAL COMILLA TIPOS_LETRA:s COMILLA 		{: h1.setLetra(s.toString()); System.out.println(" FONT FAMILY H1 "+s.toString());:}
;
text_align_h1::=
	TEXT_ALIGN IGUAL COMILLA ALINEACION:s COMILLA 			{: h1.setAlign(s.toString()); System.out.println(" TEXT ALIGN H1 "+s.toString());:}	
;
id_h1::=
	ID IGUAL COMILLA TEXTO_ID:s COMILLA 					{: h1.setId(s.toString()); System.out.println(" ID H1 "+s.toString());:}	
;
color_h1::=
	COLOR IGUAL COMILLA CTE_COLOR:s COMILLA 				{: h1.setColor(s.toString()); System.out.println(" CTE Color H1 "+s.toString());:}
	| COLOR IGUAL COMILLA RGB_COLOR:s COMILLA 				{: h1.setColor(s.toString()); System.out.println(" RGB H1 "+s.toString());:}
;
br::=
	MENOR_QUE C_BR MAYOR_QUE {: if(banderaDiv==false){body.getListBody().add(br);}else{div.getListDiv().add(br);} br= new Br();   System.out.println(" BR Salto de Linea \n");:}
;

//PARAMETROS DE LA ETIQUETA SPAM
etiquetas_spam::=
	ABRE_C_SPAM parametros_spam MAYOR_QUE TEXTO:txt CIERRA_C_SPAM
	{: spam.setTexto(txt.toString());   if(banderaDiv==false){body.getListBody().add(spam);}else{div.getListDiv().add(spam);}   spam= new Spam(); System.out.println(" TEXTO EN SPAM:  "+txt.toString()); :}
	
	| ABRE_C_SPAM parametros_spam MAYOR_QUE  CIERRA_C_SPAM 
	{:if(banderaDiv==false){body.getListBody().add(spam);}else{div.getListDiv().add(spam);}  spam= new Spam(); :}

	| ABRE_C_SPAM  MAYOR_QUE TEXTO:txt CIERRA_C_SPAM
	{: spam.setTexto(txt.toString()); if(banderaDiv==false){body.getListBody().add(spam);}else{div.getListDiv().add(spam);} spam= new Spam(); System.out.println(" TEXTO EN SPAM:  "+txt.toString()); :}

	| ABRE_C_SPAM  MAYOR_QUE  CIERRA_C_SPAM
	{:if(banderaDiv==false){body.getListBody().add(spam);}else{div.getListDiv().add(spam);} spam= new Spam(); :}
	
;
parametros_spam::=
	CORCHETE_ABRE id_spam CORCHETE_CIERRA parametros_spam
	| CORCHETE_ABRE color_spam CORCHETE_CIERRA parametros_spam
	| CORCHETE_ABRE font_size_spam CORCHETE_CIERRA parametros_spam
	| CORCHETE_ABRE font_family_spam CORCHETE_CIERRA parametros_spam
	| CORCHETE_ABRE text_align_spam CORCHETE_CIERRA parametros_spam
	| CORCHETE_ABRE id_spam CORCHETE_CIERRA 
	| CORCHETE_ABRE color_spam CORCHETE_CIERRA 
	| CORCHETE_ABRE font_size_spam CORCHETE_CIERRA 
	| CORCHETE_ABRE font_family_spam CORCHETE_CIERRA 
	| CORCHETE_ABRE text_align_spam CORCHETE_CIERRA
	//| error:er {: System.out.println("Se esperaba aparametro de SPAM: "+er.toString());:}
	
;
font_size_spam::=
	FONT_SIZE IGUAL COMILLA SIZE:s COMILLA 					{: spam.setSize(s.toString()); System.out.println(" FONT SIZE SPAM "+s.toString());:}
;
font_family_spam::=
	FONT_FAMILY IGUAL COMILLA TIPOS_LETRA:s COMILLA 		{: spam.setLetra(s.toString());  System.out.println(" FONT FAMILY SPAM "+s.toString());:}
;
text_align_spam::=
	TEXT_ALIGN IGUAL COMILLA ALINEACION:s COMILLA 			{: spam.setAlineacion(s.toString()); System.out.println(" TEXT ALIGN SPAM "+s.toString());:}	
;
id_spam::=
	ID IGUAL COMILLA TEXTO_ID:s COMILLA 					{: spam.setId(s.toString());    System.out.println(" ID SPAM "+s.toString());:}	
;
color_spam::=
	COLOR IGUAL COMILLA CTE_COLOR:s COMILLA 				{: spam.setColor(s.toString());  System.out.println(" CTE Color SPAM "+s.toString());:}
	| COLOR IGUAL COMILLA RGB_COLOR:s COMILLA 				{: spam.setColor(s.toString()); System.out.println(" RGB SPAM "+s.toString());:}
;

//PARAMETROS DE LA ETIQUETA C_P
etiquetas_cp::=
	ABRE_C_P parametros_cp MAYOR_QUE TEXTO:txt CIERRA_C_P
	{: p.setTexto(txt.toString()); if(banderaDiv==false){body.getListBody().add(p);}else{div.getListDiv().add(p);} p= new P(); System.out.println(" TEXTO EN CP:  "+txt.toString());:}
	| ABRE_C_P parametros_cp MAYOR_QUE  CIERRA_C_P 
	{: if(banderaDiv==false){body.getListBody().add(p);}else{div.getListDiv().add(p);} p= new P(); :}
	| ABRE_C_P  MAYOR_QUE TEXTO:txt CIERRA_C_P
	{: p.setTexto(txt.toString()); if(banderaDiv==false){body.getListBody().add(p);}else{div.getListDiv().add(p);} p= new P(); System.out.println(" TEXTO EN CP:  "+txt.toString());:}
	| ABRE_C_P  MAYOR_QUE  CIERRA_C_P
	{:  if(banderaDiv==false){body.getListBody().add(p);}else{div.getListDiv().add(p);} p= new P();:}
;

parametros_cp::=
	 CORCHETE_ABRE id_cp CORCHETE_CIERRA parametros_cp
	| CORCHETE_ABRE color_cp CORCHETE_CIERRA parametros_cp
	| CORCHETE_ABRE font_size_cp CORCHETE_CIERRA parametros_cp
	| CORCHETE_ABRE font_family_cp CORCHETE_CIERRA parametros_cp
	| CORCHETE_ABRE text_align_cp CORCHETE_CIERRA parametros_cp
	| CORCHETE_ABRE id_cp CORCHETE_CIERRA 
	| CORCHETE_ABRE color_cp CORCHETE_CIERRA 
	| CORCHETE_ABRE font_size_cp CORCHETE_CIERRA 
	| CORCHETE_ABRE font_family_cp CORCHETE_CIERRA 
	| CORCHETE_ABRE text_align_cp CORCHETE_CIERRA
	//| error:er {: System.out.println("Se esperaba parametro de CP: "+er.toString());:}	
;
font_size_cp::=
	FONT_SIZE IGUAL COMILLA SIZE:s COMILLA 		{: System.out.println(" FONT SIZE CP "+s.toString());:}
;
font_family_cp::=
	FONT_FAMILY IGUAL COMILLA TIPOS_LETRA:s COMILLA 		{: System.out.println(" FONT FAMILY CP "+s.toString());:}
;
text_align_cp::=
	TEXT_ALIGN IGUAL COMILLA ALINEACION:s COMILLA 		{: System.out.println(" TEXT ALIGN CP "+s.toString());:}	
;
id_cp::=
	ID IGUAL COMILLA TEXTO_ID:s COMILLA 		{: System.out.println(" ID CP "+s.toString());:}	
;
color_cp::=
	COLOR IGUAL COMILLA CTE_COLOR:s COMILLA 		{: System.out.println(" CTE Color CP "+s.toString());:}
	| COLOR IGUAL COMILLA RGB_COLOR:s COMILLA 		{: System.out.println(" RGB CP "+s.toString());:}
;

//PARAMETROS DE LA ETIQUETA INPUT
etiquetas_input::=
	ABRE_INPUT parametros_input MAYOR_QUE TEXTO:txt CIERRA_INPUT
	{: input.setTexto(txt.toString()); if(banderaDiv==false){body.getListBody().add(input);}else{div.getListDiv().add(input);}  input= new Input(); System.out.println(" TEXTO EN INPUT:  "+txt.toString());:}

	| ABRE_INPUT parametros_input MAYOR_QUE  CIERRA_INPUT
	{: if(banderaDiv==false){body.getListBody().add(input);}else{div.getListDiv().add(input);}  input= new Input();  input= new Input(); :}

	| ABRE_INPUT  MAYOR_QUE TEXTO:txt CIERRA_INPUT
	{: input.setTexto(txt.toString()); if(banderaDiv==false){body.getListBody().add(input);}else{div.getListDiv().add(input);}  input= new Input(); System.out.println(" TEXTO EN INPUT:  "+txt.toString());:}

	| ABRE_INPUT  MAYOR_QUE  CIERRA_INPUT
	{: if(banderaDiv==false){body.getListBody().add(input);}else{div.getListDiv().add(input);}  input= new Input(); :}
;


parametros_input::=
	CORCHETE_ABRE id_input CORCHETE_CIERRA parametros_input
	| CORCHETE_ABRE color_input CORCHETE_CIERRA parametros_input
	| CORCHETE_ABRE font_size_input CORCHETE_CIERRA parametros_input
	| CORCHETE_ABRE font_family_input CORCHETE_CIERRA parametros_input
	| CORCHETE_ABRE text_align_input CORCHETE_CIERRA parametros_input
	| CORCHETE_ABRE tipos_input CORCHETE_CIERRA parametros_input
	| CORCHETE_ABRE id_input CORCHETE_CIERRA 
	| CORCHETE_ABRE color_input CORCHETE_CIERRA 
	| CORCHETE_ABRE font_size_input CORCHETE_CIERRA 
	| CORCHETE_ABRE font_family_input CORCHETE_CIERRA 
	| CORCHETE_ABRE text_align_input CORCHETE_CIERRA
	| CORCHETE_ABRE tipos_input CORCHETE_CIERRA
	//| error:er {: System.out.println("Se esperaba parametro de INPUT: "+er.toString());:}
;

font_size_input::=
	FONT_SIZE IGUAL COMILLA SIZE:s COMILLA 					{: input.setSize(s.toString() ); System.out.println(" FONT SIZE INPUT "+s.toString());:}
;
font_family_input::=
	FONT_FAMILY IGUAL COMILLA TIPOS_LETRA:s COMILLA 		{: input.setLetra(s.toString() ); System.out.println(" FONT FAMILY INPUT "+s.toString());:}
;
text_align_input::=
	TEXT_ALIGN IGUAL COMILLA ALINEACION:s COMILLA 			{: input.setAlign(s.toString() ); System.out.println(" TEXT ALIGN INPUT "+s.toString());:}	
;
id_input::=
	ID IGUAL COMILLA TEXTO_ID:s COMILLA 					{: input.setId(s.toString() ); System.out.println(" ID INPUT "+s.toString());:}	
;
color_input::=
	COLOR IGUAL COMILLA CTE_COLOR:s COMILLA 				{: input.setColor(s.toString() ); System.out.println(" CTE Color INPUT "+s.toString());:}
	| COLOR IGUAL COMILLA RGB_COLOR:s COMILLA 				{: input.setColor(s.toString() ); System.out.println(" RGB INPUT "+s.toString());:}
;
tipos_input::=
	TYPE IGUAL COMILLA TIPOS_DE_INPUT:s COMILLA			{: input.setTipo(s.toString() ); System.out.println(" TIPOS DE INPUT "+s.toString());:}
;
//PARAMETROS DEL TEXT AREA 
etiquetas_area::=
	ABRE_TEXT_AREA parametros_area MAYOR_QUE TEXTO:txt CIERRA_TEXT_AREA
	{: area.setTexto(txt.toString()); if(banderaDiv==false){body.getListBody().add(area);}else{div.getListDiv().add(area);} area= new TextArea(); System.out.println(" TEXTO EN TEXT AREA:  "+txt.toString());:}

	| ABRE_TEXT_AREA parametros_area MAYOR_QUE  CIERRA_TEXT_AREA
	{:  if(banderaDiv==false){body.getListBody().add(area);}else{div.getListDiv().add(area);} area= new TextArea(); :}

	| ABRE_TEXT_AREA  MAYOR_QUE TEXTO:txt CIERRA_TEXT_AREA
	{:  if(banderaDiv==false){body.getListBody().add(area);}else{div.getListDiv().add(area);} area= new TextArea(); System.out.println(" TEXTO EN TEXT AREA:  "+txt.toString());:}

	| ABRE_TEXT_AREA  MAYOR_QUE  CIERRA_TEXT_AREA
	{:  if(banderaDiv==false){body.getListBody().add(area);}else{div.getListDiv().add(area);} area= new TextArea(); :}
;


parametros_area::=
	CORCHETE_ABRE id_area CORCHETE_CIERRA parametros_area
	| CORCHETE_ABRE font_size_area CORCHETE_CIERRA parametros_area
	| CORCHETE_ABRE font_family_area CORCHETE_CIERRA parametros_area
	| CORCHETE_ABRE text_align_area CORCHETE_CIERRA parametros_area
	| CORCHETE_ABRE cols_area CORCHETE_CIERRA parametros_area
	| CORCHETE_ABRE rows_area CORCHETE_CIERRA parametros_area
	| CORCHETE_ABRE id_area CORCHETE_CIERRA 
	| CORCHETE_ABRE font_size_area CORCHETE_CIERRA 
	| CORCHETE_ABRE font_family_area CORCHETE_CIERRA 
	| CORCHETE_ABRE text_align_area CORCHETE_CIERRA
	| CORCHETE_ABRE cols_area CORCHETE_CIERRA
	| CORCHETE_ABRE rows_area CORCHETE_CIERRA

	//| error:er {: System.out.println("Se esperaba parametro de INPUT: "+er.toString());:}
;

font_size_area::=
	FONT_SIZE IGUAL COMILLA SIZE:s COMILLA 					{: area.setSize(s.toString()); System.out.println(" FONT SIZE TEXT  AREA: "+s.toString());:}
;
font_family_area::=
	FONT_FAMILY IGUAL COMILLA TIPOS_LETRA:s COMILLA 		{: area.setLetra(s.toString()); System.out.println(" FONT FAMILY TEXT AREA: "+s.toString());:}
;
text_align_area::=
	TEXT_ALIGN IGUAL COMILLA ALINEACION:s COMILLA 			{: area.setAlign(s.toString()); System.out.println(" TEXT ALIGN TEXT AREA: "+s.toString());:}	
;
id_area::=
	ID IGUAL COMILLA TEXTO_ID:s COMILLA 					{: area.setId(s.toString()); System.out.println(" ID TEXT AREA: "+s.toString());:}	
;
cols_area::=
	COLS IGUAL COMILLA NUMERO_ENTERO:s COMILLA 					{: area.setCols(s.toString()); System.out.println(" NUMERO COLS TEXT AREA "+s.toString());:}	
;
rows_area::=
	ROWS IGUAL COMILLA NUMERO_ENTERO:s COMILLA 					{: area.setRows(s.toString()); System.out.println(" NUMERO ROWS TEXT AREA "+s.toString());:}	
;
//PARAMETROS DEL BUTTON
etiquetas_button::=
	ABRE_BUTTON parametros_button MAYOR_QUE TEXTO:txt CIERRA_BUTTON
	{: button.setTexto(txt.toString()); if(banderaDiv==false){body.getListBody().add(button);}else{div.getListDiv().add(button);} button= new Button();  System.out.println(" TEXTO EN BUTTON:  "+txt.toString());:}

	| ABRE_BUTTON parametros_button MAYOR_QUE  CIERRA_BUTTON
	{: if(banderaDiv==false){body.getListBody().add(button);}else{div.getListDiv().add(button);} button= new Button(); :}

	| ABRE_BUTTON  MAYOR_QUE TEXTO:txt CIERRA_BUTTON
	{: button.setTexto(txt.toString()); if(banderaDiv==false){body.getListBody().add(button);}else{div.getListDiv().add(button);} button= new Button(); System.out.println(" TEXTO EN BUTTON:  "+txt.toString());:}

	| ABRE_BUTTON  MAYOR_QUE  CIERRA_BUTTON
	{:  if(banderaDiv==false){body.getListBody().add(button);}else{div.getListDiv().add(button);} button= new Button(); :}
	
;
parametros_button::=
	CORCHETE_ABRE id_button CORCHETE_CIERRA parametros_button
	| CORCHETE_ABRE font_size_button CORCHETE_CIERRA parametros_button
	| CORCHETE_ABRE font_family_button CORCHETE_CIERRA parametros_button
	| CORCHETE_ABRE text_align_button CORCHETE_CIERRA parametros_button
	| CORCHETE_ABRE color_button CORCHETE_CIERRA parametros_button
	| CORCHETE_ABRE background_button CORCHETE_CIERRA parametros_button
	| CORCHETE_ABRE onclick_button CORCHETE_CIERRA parametros_button
	| CORCHETE_ABRE id_button CORCHETE_CIERRA 
	| CORCHETE_ABRE font_size_button CORCHETE_CIERRA 
	| CORCHETE_ABRE font_family_button CORCHETE_CIERRA 
	| CORCHETE_ABRE text_align_button CORCHETE_CIERRA
	| CORCHETE_ABRE color_button CORCHETE_CIERRA
	| CORCHETE_ABRE background_button CORCHETE_CIERRA
	| CORCHETE_ABRE onclick_button CORCHETE_CIERRA


	//| error:er {: System.out.println("Se esperaba parametro de INPUT: "+er.toString());:}
;

font_size_button::=
	FONT_SIZE IGUAL COMILLA SIZE:s COMILLA 					{: button.setSize(s.toString()); System.out.println(" FONT SIZE BUTTON : "+s.toString());:}
;
font_family_button::=
	FONT_FAMILY IGUAL COMILLA TIPOS_LETRA:s COMILLA 		{: button.setLetra(s.toString()); System.out.println(" FONT FAMILY BUTTON: "+s.toString());:}
;
text_align_button::=
	TEXT_ALIGN IGUAL COMILLA ALINEACION:s COMILLA 			{: button.setAlign(s.toString()); System.out.println(" TEXT ALIGN BUTTON: "+s.toString());:}	
;
id_button::=
	ID IGUAL COMILLA TEXTO_ID:s COMILLA 					{: button.setId(s.toString()); System.out.println(" ID BUTTON: "+s.toString());:}	
;
color_button::=
	COLOR IGUAL COMILLA CTE_COLOR:s COMILLA 				{: button.setColor(s.toString()); System.out.println(" CTE Color BUTTON "+s.toString());:}
	| COLOR IGUAL COMILLA RGB_COLOR:s COMILLA 				{: button.setColor(s.toString()); System.out.println(" RGB BUTTON "+s.toString());:}
;
background_button::=
	BACKGROUND IGUAL COMILLA RGB_COLOR:s COMILLA		{: button.setBackground(s.toString()); System.out.println(" BACKGROUND RGB BUTTON: "+s.toString());:}
	| BACKGROUND IGUAL COMILLA CTE_COLOR:s COMILLA		{: button.setBackground(s.toString()); System.out.println(" BACKGROUND constante de color BUTTON: "+s.toString());:}
;
onclick_button::=
	ONCLICK IGUAL COMILLA NOMBRE_METODO:s COMILLA		{:  button.setOnclick(s.toString()); System.out.println(" METODO DEL BUTTON: "+s.toString());:}
;

//parametros IMAGENES
etiquetas_img::=
	ABRE_IMG parametros_img MAYOR_QUE TEXTO:txt CIERRA_IMG
	{: img.setTexto(txt.toString()); if(banderaDiv==false){body.getListBody().add(img);}else{div.getListDiv().add(img);} img= new Img(); System.out.println(" TEXTO EN IMAGEN:  "+txt.toString());:}

	| ABRE_IMG parametros_img MAYOR_QUE  CIERRA_IMG
	{:  if(banderaDiv==false){body.getListBody().add(img);}else{div.getListDiv().add(img);} img= new Img(); :}

	| ABRE_IMG  MAYOR_QUE TEXTO:txt CIERRA_IMG
	{:img.setTexto(txt.toString()); if(banderaDiv==false){body.getListBody().add(img);}else{div.getListDiv().add(img);} img= new Img(); System.out.println(" TEXTO EN IMAGEN:  "+txt.toString());:}

	| ABRE_IMG  MAYOR_QUE  CIERRA_IMG
	{:  if(banderaDiv==false){body.getListBody().add(img);}else{div.getListDiv().add(img);} img= new Img();  :}
	
;

parametros_img::=
	CORCHETE_ABRE id_img CORCHETE_CIERRA parametros_img
	| CORCHETE_ABRE src_img CORCHETE_CIERRA parametros_img
	| CORCHETE_ABRE width_img CORCHETE_CIERRA parametros_img
	| CORCHETE_ABRE height_img CORCHETE_CIERRA parametros_img
	| CORCHETE_ABRE alt_img CORCHETE_CIERRA parametros_img
	| CORCHETE_ABRE id_img CORCHETE_CIERRA 
	| CORCHETE_ABRE src_img CORCHETE_CIERRA 
	| CORCHETE_ABRE width_img CORCHETE_CIERRA 
	| CORCHETE_ABRE height_img CORCHETE_CIERRA 
	| CORCHETE_ABRE alt_img CORCHETE_CIERRA 


	//| error:er {: System.out.println("Se esperaba parametro de INPUT: "+er.toString());:}
;

src_img::=
	SRC IGUAL COMILLA TEXTO:s COMILLA 					{: img.setSrc(s.toString()); System.out.println("SRC: IMG : "+s.toString());:}
;
width_img::=
	WIDTH IGUAL COMILLA SIZE:s COMILLA 					{: img.setWidth(s.toString()); System.out.println(" WIDHT IMG: "+s.toString());:}
;
height_img::=
	HEIGHT IGUAL COMILLA SIZE:s COMILLA 				{: img.setHeight(s.toString()); System.out.println(" HEIGHT IMG: : "+s.toString());:}	
;
id_img::=
	ID IGUAL COMILLA TEXTO_ID:s COMILLA 				{: img.setId(s.toString()); System.out.println(" ID IMG: "+s.toString());:}	
;
alt_img::=
	ALT IGUAL COMILLA TEXTO:s COMILLA 					{: img.setAlt(s.toString()); System.out.println(" ALT DE IMG "+s.toString());:}

;
//PARAMETROS DE SELECT 
etiquetas_select::=
	ABRE_C_SELECT parametros_select MAYOR_QUE etiquetas_option:av CIERRA_C_SELECT
	{: select.setOpciones(av.toString());   if(banderaDiv==false){body.getListBody().add(select);}else{div.getListDiv().add(select);} select= new Select(); :}

	| ABRE_C_SELECT parametros_select MAYOR_QUE  CIERRA_C_SELECT 
	{:  if(banderaDiv==false){body.getListBody().add(select);}else{div.getListDiv().add(select);} select= new Select();  :}

	| ABRE_C_SELECT  MAYOR_QUE  CIERRA_C_SELECT
	{:  if(banderaDiv==false){body.getListBody().add(select);}else{div.getListDiv().add(select);} select= new Select(); :}
	
;
parametros_select::=
	CORCHETE_ABRE id_select CORCHETE_CIERRA parametros_select
	| CORCHETE_ABRE color_select CORCHETE_CIERRA parametros_select
	| CORCHETE_ABRE font_size_select CORCHETE_CIERRA parametros_select
	| CORCHETE_ABRE font_family_select CORCHETE_CIERRA parametros_select
	| CORCHETE_ABRE text_align_select CORCHETE_CIERRA parametros_select
	| CORCHETE_ABRE id_select CORCHETE_CIERRA 
	| CORCHETE_ABRE color_select CORCHETE_CIERRA 
	| CORCHETE_ABRE font_size_select CORCHETE_CIERRA 
	| CORCHETE_ABRE font_family_select CORCHETE_CIERRA 
	| CORCHETE_ABRE text_align_select CORCHETE_CIERRA
	//| error:er {: System.out.println("Se esperaba aparametro de SELECT : "+er.toString());:}
	
;
font_size_select::=
	FONT_SIZE IGUAL COMILLA SIZE:s COMILLA 					{: select.setSize(s.toString()); System.out.println(" FONT SIZE SELECT "+s.toString());:}
;
font_family_select::=
	FONT_FAMILY IGUAL COMILLA TIPOS_LETRA:s COMILLA 		{: select.setLetra(s.toString()); System.out.println(" FONT FAMILY SELECT "+s.toString());:}
;
text_align_select::=
	TEXT_ALIGN IGUAL COMILLA ALINEACION:s COMILLA 			{: select.setAlign(s.toString()); System.out.println(" TEXT ALIGN SELECT "+s.toString());:}	
;
id_select::=
	ID IGUAL COMILLA TEXTO_ID:s COMILLA 					{: select.setId(s.toString()); System.out.println(" ID SELECT "+s.toString());:}	
;
color_select::=
	COLOR IGUAL COMILLA CTE_COLOR:s COMILLA 				{: select.setColor(s.toString()); System.out.println(" CTE Color SELECT "+s.toString());:}
	| COLOR IGUAL COMILLA RGB_COLOR:s COMILLA 				{: select.setColor(s.toString()); System.out.println(" RGB SELECT "+s.toString());:}
;
etiquetas_option::=
	 ABRE_C_OPTION   TEXTO:opt CIERRA_C_OPTION  etiquetas_option:opt2 
	{: RESULT = opt2.toString()+""+opt.toString()+","; System.out.println(" OPCIONES EN SELECT.: "+opt.toString());:}
	
	| ABRE_C_OPTION   TEXTO:opt CIERRA_C_OPTION 
	{: RESULT = opt.toString()+","; System.out.println(" OPCIONES EN SELECT "+opt.toString());:}
;
//PARAMETROS DIV
etiquetas_div::=
	  abre_div parametros_div mayor parametros_body cierra_div
	  
	| abre_div parametros_div mayor  cierra_div 

	| abre_div  mayor parametros_body cierra_div

	| abre_div  mayor cierra_div

;
abre_div::=
	ABRE_C_DIV {:  System.out.println("@@@@@@@@@@@@@@@@@@@@@@ABRE-DIV@@@@@@@@@@@@@@@@@@@@@@@@"); :}
	
;
mayor::=
	MAYOR_QUE
	{: body.getListBody().add(div);  div= new Div(); :}
;
cierra_div::=
	CIERRA_C_DIV {:  body.getListBody().add(divc);  divc= new DivC();  System.out.println("######################CIERRA_DIV####################"); :}
;

parametros_div::=
	CORCHETE_ABRE id_div CORCHETE_CIERRA parametros_div
	| CORCHETE_ABRE color_div CORCHETE_CIERRA parametros_div
	| CORCHETE_ABRE font_size_div CORCHETE_CIERRA parametros_div
	| CORCHETE_ABRE font_family_div CORCHETE_CIERRA parametros_div
	| CORCHETE_ABRE text_align_div CORCHETE_CIERRA parametros_div
	| CORCHETE_ABRE background_div CORCHETE_CIERRA parametros_div
	| CORCHETE_ABRE class_div CORCHETE_CIERRA parametros_div
	| CORCHETE_ABRE id_div CORCHETE_CIERRA 
	| CORCHETE_ABRE color_div CORCHETE_CIERRA 
	| CORCHETE_ABRE font_size_div CORCHETE_CIERRA 
	| CORCHETE_ABRE font_family_div CORCHETE_CIERRA 
	| CORCHETE_ABRE text_align_div CORCHETE_CIERRA
	| CORCHETE_ABRE background_div CORCHETE_CIERRA 
	| CORCHETE_ABRE class_div CORCHETE_CIERRA
	//| error:er {: System.out.println("Se esperaba aparametro de DIV : "+er.toString());:}
	
;
font_size_div::=
	FONT_SIZE IGUAL COMILLA SIZE:s COMILLA 					{: div.setSize(s.toString()); System.out.println(" FONT SIZE DIV "+s.toString());:}
;
font_family_div::=
	FONT_FAMILY IGUAL COMILLA TIPOS_LETRA:s COMILLA 		{: div.setLetra(s.toString()); System.out.println(" FONT FAMILY DIV "+s.toString());:}
;
text_align_div::=
	TEXT_ALIGN IGUAL COMILLA ALINEACION:s COMILLA 		{: div.setAlign(s.toString()); System.out.println(" TEXT ALIGN DIV "+s.toString());:}	
;
id_div::=
	ID IGUAL COMILLA TEXTO_ID:s COMILLA 				{: div.setId(s.toString()); System.out.println(" ID DIV "+s.toString());:}	
;
background_div::=
	BACKGROUND IGUAL COMILLA RGB_COLOR:back COMILLA		{: div.setBackground(back.toString()); System.out.println(" BACKGROUND RGB DIV: "+back.toString());:}
	| BACKGROUND IGUAL COMILLA CTE_COLOR:ba COMILLA		{: div.setBackground(ba.toString()); System.out.println(" BACKGROUND constante de color DIV: "+ba.toString());:}
;
color_div::=
	COLOR IGUAL COMILLA CTE_COLOR:s COMILLA 			{: div.setColor(s.toString()); System.out.println(" CTE Color DIV "+s.toString());:}
	| COLOR IGUAL COMILLA RGB_COLOR:s COMILLA 			{: div.setColor(s.toString()); System.out.println(" RGB DIV "+s.toString());:}
;
class_div::=
	CLASS IGUAL COMILLA TIPOS_CLASE:s COMILLA				{: div.setClasss(s.toString()); System.out.println(" Class DIV "+s.toString());:}

;
etiquetas_scripting::=
	abre_script MAYOR_QUE parametros_scripting cierra_script

	| abre_script MAYOR_QUE  parametros_proces cierra_script
;
abre_script::=
	ABRE_C_SCRIPTING
	{:  body.getListBody().add(script); script= new Script(); :}
;
cierra_script::=
	CIERRA_C_SCRIPTING
	{:  body.getListBody().add(script2); script2= new Script2(); :}
;
parametros_scripting::=
	 onload parametros_proces
	 | onload
;
parametros_proces::=
	 proces parametros_proces 
	| proces
;
proces::=
	NOMBRE_METODO:method  CORCHETE_ABRE 
	definicion_variables
	CORCHETE_CIERRA 											{: System.out.println(" METODO PROCESS_() "+method.toString()+"-------------------------------"); :}

	| NOMBRE_METODO:method  CORCHETE_ABRE
	CORCHETE_CIERRA												{: System.out.println(" METODO PROCESS_() "+method.toString()+"-------------------------------"); :}
;
onload::=
	ON_LOAD PARENTESIS_ABRE PARENTESIS_CIERRA CORCHETE_ABRE
	definicion_variables
	CORCHETE_CIERRA
																{: System.out.println(" METODO ONLOAD() "); :}
	| ON_LOAD PARENTESIS_ABRE PARENTESIS_CIERRA CORCHETE_ABRE
	CORCHETE_CIERRA
																{: System.out.println(" METODO ONLOAD() "); :}

;

//codigo dentro de SCRIPTING  
definicion_variables::=
	integer  definicion_variables
	| integer
	| string definicion_variables
	| string
	| decimal definicion_variables
	| decimal 
	| char definicion_variables
	| char
	| asig definicion_variables
	| asig 
	| boolean definicion_variables
	| boolean
	| metodos_especiales definicion_variables
	| metodos_especiales
	| sentencias_control definicion_variables
	| sentencias_control
	| repeat definicion_variables
	| repeat
	| while definicion_variables
	| while
	| insert definicion_variables
	| insert
;
instruccion::=
	 integer
	| string
	| decimal 
	| char
	| asig 
	| boolean
	| metodos_especiales

;

asig::=
	NOMBRE_VARIABLE:var1 IGUAL asig2:val PUNTO_COMA  
																			{: System.out.println("----- ASIGNACION INTEGER:   "+var1+" Valores: "+val); :}
;
asig2::=
	asig2:e1 SUMA  asig2:e2         									{: RESULT = e1.toString()+"+"+e2.toString(); :}
	| asig2:e1 RESTA asig2:e2        									{: RESULT = e1.toString()+"-"+e2.toString(); :}
    | asig2:e1 MULTIPLICACION asig2:e2        							{: RESULT = e1.toString()+"*"+e2.toString() ; :}
	| asig2:e1 DIVISION asig2:e2        								{: RESULT = e1.toString()+"/"+e2.toString() ; :}
	| asig2:s OR_O_AND:o asig2:t										{: RESULT = s.toString()+o.toString()+" "+t.toString(); :}
    | RESTA asig2:e                 									{: RESULT = "-"+e.toString();  :}
  	%prec UMENOS														
    | PARENTESIS_ABRE asig2:e PARENTESIS_CIERRA	         				{: RESULT = "("+e.toString()+")"; :}
    | NUMERO_ENTERO:n	                      							{: RESULT = n.toString(); :}
	| NUMERO_DECIMAL:n	                      							{: RESULT = n.toString(); :}
	| NOMBRE_VARIABLE:n	   					 							{: RESULT = n.toString(); :}
	| COMILLA TEXTO:t COMILLA											{: RESULT = t.toString(); :}
	| COMILLA_SIMPLE TEXTO:t COMILLA_SIMPLE								{: RESULT = t.toString(); :}
	| operador_logico_boolean:t											{: RESULT = t.toString()+""; :}

;

get_element::=
	GETELEMENBYID PARENTESIS_ABRE COMILLA_SIMPLE TEXTO_ID:ids COMILLA_SIMPLE PARENTESIS_CIERRA {: RESULT= ids.toString(); :}
;

//DEFINIR UNA VARIABLE TIPO INTEGER
integer::=
	INTEGER GLOBAL nombre_variables:vars PUNTO_COMA									
	{: /*lstVariable.add();*/  System.out.println(" VARIABLES:  G "+vars); :}
	| INTEGER GLOBAL nombre_variables:vars IGUAL valor_integer:val PUNTO_COMA 		
	{: System.out.println(" VARIABLES:  G "+vars+" Valores: "+val); :}
	| INTEGER nombre_variables:vars PUNTO_COMA										
	{: System.out.println(" VARIABLES:   "+vars); :}
	| INTEGER nombre_variables:vars IGUAL valor_integer:val PUNTO_COMA				
	{: System.out.println(" VARIABLES:   "+vars+" Valores: "+val); :}
	
;

nombre_variables::=
	nombre_variables:aa COMA:c  NOMBRE_VARIABLE:var2    				{: RESULT= aa.toString()+var2.toString()+c.toString();:}
	| NOMBRE_VARIABLE:var1  											{: RESULT= var1+",";:}
;

valor_integer::=
    valor_integer:e1 SUMA  valor_integer:e2         					{: RESULT = e1.toString()+"+"+e2.toString(); :}
	| valor_integer:e1 RESTA valor_integer:e2        					{: RESULT = e1.toString()+"-"+e2.toString(); :}
    | valor_integer:e1 MULTIPLICACION valor_integer:e2        			{: RESULT = e1.toString()+"*"+e2.toString() ; :}
	| valor_integer:e1 DIVISION valor_integer:e2        				{: RESULT = e1.toString()+"/"+e2.toString() ; :}
    | RESTA valor_integer:e                 							{: RESULT = "-"+e.toString();  :}
  	%prec UMENOS														
    | PARENTESIS_ABRE valor_integer:e PARENTESIS_CIERRA	         		{: RESULT = "("+e.toString()+")"; :}
    | NUMERO_ENTERO:n	                      							{: RESULT = n.toString(); :}
	| NOMBRE_VARIABLE:n	   					 							{: RESULT = n.toString(); :}
;

string::=
	 STRING GLOBAL nombre_variables:vars IGUAL get_element:id PUNTO_COMA				{: System.out.println(" GETELEMENT BY ID "+vars+" ID: "+id); :}
	| STRING  nombre_variables:vars IGUAL get_element:id PUNTO_COMA					{: System.out.println(" GETELEMENT BY ID "+vars+" ID: "+id); :}
	| STRING GLOBAL nombre_variables:vars PUNTO_COMA									
																				{: /*lstVariable.add();*/  System.out.println(" VARIABLES: STRING  G "+vars); :}
	| STRING GLOBAL nombre_variables:vars IGUAL valor_string:val PUNTO_COMA 		
																				{: System.out.println(" VARIABLES: STRING G "+vars+" Valores: "+val); :}
	| STRING nombre_variables:vars PUNTO_COMA										
																				{: System.out.println(" VARIABLES: STRING "+vars); :}
	| STRING nombre_variables:vars IGUAL valor_string:val PUNTO_COMA				
																				{: System.out.println(" VARIABLES: STRING "+vars+" Valores: "+val); :}
	
;
valor_string::=

	valor_string:s SUMA COMILLA TEXTO:t COMILLA										{: RESULT = s.toString()+t.toString()+","; :}
	| valor_string:s SUMA NOMBRE_VARIABLE:t											{: RESULT = s.toString()+t.toString()+","; :}
	| COMILLA TEXTO:t COMILLA														{: RESULT = t.toString()+","; :}
	| NOMBRE_VARIABLE:t																{: RESULT = t.toString()+","; :}
;
char::=
	CHAR GLOBAL nombre_variables:vars PUNTO_COMA									
																				{:  System.out.println(" VARIABLES: CHAR  G "+vars); :}
	| CHAR GLOBAL nombre_variables:vars IGUAL valor_char:val PUNTO_COMA 		
																				{: System.out.println(" VARIABLES: CHAR G "+vars+" Valores: "+val); :}
	| CHAR nombre_variables:vars PUNTO_COMA										
																				{: System.out.println(" VARIABLES: CHAR "+vars); :}
	| CHAR nombre_variables:vars IGUAL valor_char:val PUNTO_COMA				
																				{: System.out.println(" VARIABLES: CHAR "+vars+" Valores: "+val); :}
;

valor_char::=

	valor_char:s SUMA COMILLA_SIMPLE TEXTO:t COMILLA_SIMPLE							{: RESULT = s.toString()+t.toString()+","; :}
	| valor_char:s SUMA NOMBRE_VARIABLE:t											{: RESULT = s.toString()+t.toString()+","; :}
	| COMILLA_SIMPLE TEXTO:t COMILLA_SIMPLE										    {: RESULT = t.toString()+","; :}
	| NOMBRE_VARIABLE:t																{: RESULT = t.toString()+","; :}
;


//DEFINIR UNA VARIABLE TIPO INTEGER
decimal::=
	DECIMAL GLOBAL nombre_variables:vars PUNTO_COMA									
																					{: System.out.println(" VARIABLES: DECIMAL  G "+vars); :}
	| DECIMAL GLOBAL nombre_variables:vars IGUAL valor_decimal:val PUNTO_COMA 		
																					{: System.out.println(" VARIABLES: DECIMAL G "+vars+" Valores: "+val); :}
	| DECIMAL nombre_variables:vars PUNTO_COMA										
																					{: System.out.println(" VARIABLES: DECIMAL  "+vars); :}
	| DECIMAL nombre_variables:vars IGUAL valor_decimal:val PUNTO_COMA				
																					{: System.out.println(" VARIABLES: DECIMAL  "+vars+" Valores: "+val); :}
;
valor_decimal::=
    valor_decimal:e1 SUMA  valor_decimal:e2         					{: RESULT = e1.toString()+"+"+e2.toString(); :}
	| valor_decimal:e1 RESTA valor_decimal:e2        					{: RESULT = e1.toString()+"-"+e2.toString(); :}
    | valor_decimal:e1 MULTIPLICACION valor_decimal:e2        			{: RESULT = e1.toString()+"*"+e2.toString() ; :}
	| valor_decimal:e1 DIVISION valor_decimal:e2        				{: RESULT = e1.toString()+"/"+e2.toString() ; :}
    | RESTA valor_decimal:e                 							{: RESULT = "-"+e.toString();  :}
  	%prec UMENOS														
    | PARENTESIS_ABRE valor_decimal:e PARENTESIS_CIERRA	         		{: RESULT = "("+e.toString()+")"; :}
    | NUMERO_ENTERO:n	                      							{: RESULT = n.toString(); :}
	| NUMERO_DECIMAL:n	                      							{: RESULT = n.toString(); :}
	| NOMBRE_VARIABLE:n	   					 							{: RESULT = n.toString(); :}
;
boolean::=
	 //TRUE_O_FALSE
	BOOLEAN GLOBAL nombre_variables:vars PUNTO_COMA									
																					{: System.out.println(" VARIABLES: BOOLEAN  G "+vars); :}
	| BOOLEAN GLOBAL nombre_variables:vars IGUAL valor_boolean:val PUNTO_COMA 		
																					{: System.out.println(" VARIABLES: BOOLEAN G "+vars+" Valores: "+val); :}
	| BOOLEAN nombre_variables:vars PUNTO_COMA										
																					{: System.out.println(" VARIABLES: BOOLEAN  "+vars); :}
	| BOOLEAN nombre_variables:vars IGUAL valor_boolean:val PUNTO_COMA				
																					{: System.out.println(" VARIABLES: BOOLEAN  "+vars+" Valores: "+val); :}
;
valor_boolean::=
	valor_boolean:s OR_O_AND:o operador_logico_boolean:t									{: RESULT = s.toString()+o.toString()+" "+t.toString(); :}
	| valor_boolean:s OR_O_AND:o NOMBRE_VARIABLE:t											{: RESULT = s.toString()+o.toString()+" "+t.toString(); :}
	| operador_logico_boolean:t									    						{: RESULT = t.toString()+""; :}
	| NOMBRE_VARIABLE:t																		{: RESULT = t.toString()+" "; :}

;
operador_logico_boolean::=
	 NOT TRUE_O_FALSE:t																		{: RESULT = "!"+t.toString()+" "; :}
	| NOT NOMBRE_VARIABLE:t																	{: RESULT = "!"+t.toString()+" "; :}
	| TRUE_O_FALSE:t																		{: RESULT = t.toString()+" "; :}
	//| NOMBRE_VARIABLE:t																	{: RESULT = t.toString()+" "; :}


;

sentencias_control::=
    //primera forma--------------
   	if
    instruccion
	| if
    bloque_INIT_END

    //segunda forma--------------
    | if 
    instruccion 
    pametro_els
	| if 
    bloque_INIT_END 
    pametro_els

    //tercera forma--------------
    | if   
    instruccion
    pametros_elseif 
    pametro_els
	| if   
    bloque_INIT_END
    pametros_elseif 
    pametro_els

;
if::=
	IF PARENTESIS_ABRE condicionales condicionales2 condicionales PARENTESIS_CIERRA THEN
;
pametro_els::=
    ELSE   
    instruccion
	| ELSE   
    bloque_INIT_END
;
pametros_elseif::=
    ELSE IF PARENTESIS_ABRE condicionales condicionales2 condicionales  PARENTESIS_CIERRA THEN
    instruccion {:System.out.println("aqui 1");:}
	| ELSE IF PARENTESIS_ABRE condicionales condicionales2 condicionales PARENTESIS_CIERRA THEN
    bloque_INIT_END {:System.out.println("aqui 1");:}

    | pametros_elseif ELSE IF PARENTESIS_ABRE condicionales condicionales2 condicionales  PARENTESIS_CIERRA THEN
    instruccion  {:System.out.println("aqui 2");:}
	| pametros_elseif ELSE IF PARENTESIS_ABRE condicionales condicionales2 condicionales PARENTESIS_CIERRA THEN
    bloque_INIT_END  {:System.out.println("aqui 2");:}
;

bloque_INIT_END::=
    INIT ABRE_INIT
    definicion_variables
    CIERRA_INIT END
	| INIT ABRE_INIT

    CIERRA_INIT END
	
;
repeat::=
	REPEAT PARENTESIS_ABRE PARENTESIS_CIERRA HUNTIL  PARENTESIS_ABRE PARENTESIS_CIERRA
	instruccion
	| REPEAT PARENTESIS_ABRE PARENTESIS_CIERRA HUNTIL  PARENTESIS_ABRE PARENTESIS_CIERRA
	bloque_INIT_END
;
while::=
	WHILE  PARENTESIS_ABRE PARENTESIS_CIERRA THENWHILE
	instruccion
	| WHILE  PARENTESIS_ABRE PARENTESIS_CIERRA THENWHILE
	bloque_INIT_END
;
insert::=
	INSERT PARENTESIS_ABRE PARENTESIS_CIERRA PUNTO_COMA
	| INSERT PARENTESIS_ABRE nombre_variables:v PARENTESIS_CIERRA PUNTO_COMA 		{: System.out.println(" INSERTT "+v.toString()); :}
	| INSERT PARENTESIS_ABRE param_var PARENTESIS_CIERRA PUNTO_COMA
;

param_var::=
	COMILLA_SIMPLE TEXTO:t COMILLA_SIMPLE COMA NOMBRE_VARIABLE:v 				{: System.out.println(" INSERTT "+t.toString()+" Variable "+v); :}
	| COMILLA_SIMPLE TEXTO:t COMILLA_SIMPLE										{: System.out.println(" INSERTT "+t.toString() ); :}
;

metodos_especiales::=
	ASC PARENTESIS_ABRE NOMBRE_VARIABLE:b PARENTESIS_CIERRA PUNTO_COMA 				{: System.out.println(" ASC "+b); :}
	| DESC PARENTESIS_ABRE NOMBRE_VARIABLE:b PARENTESIS_CIERRA PUNTO_COMA			{: System.out.println(" DESC "+b); :}
	| LETPAR_NUM PARENTESIS_ABRE NOMBRE_VARIABLE:b PARENTESIS_CIERRA PUNTO_COMA		{: System.out.println(" LETPAR_NUM "+b); :}
	| LETIMPAR_NUM PARENTESIS_ABRE NOMBRE_VARIABLE:b PARENTESIS_CIERRA PUNTO_COMA	{: System.out.println(" LETIMPAR_NUM "+b); :}
	| REVERSE PARENTESIS_ABRE NOMBRE_VARIABLE:b PARENTESIS_CIERRA PUNTO_COMA		{: System.out.println(" REVERSE "+b); :}
	| CARACTER_ALEATORIO PARENTESIS_ABRE  PARENTESIS_CIERRA PUNTO_COMA				{: System.out.println(" CARACTER_ALEATORIO "); :}
	| NUM_ALEATORIO PARENTESIS_ABRE  PARENTESIS_CIERRA PUNTO_COMA					{: System.out.println(" NUM_ALEATORIO "); :}
	| ALERT_INFO PARENTESIS_ABRE NOMBRE_VARIABLE:b PARENTESIS_CIERRA PUNTO_COMA		{: System.out.println(" DESC "+b); :}
	| EXIT PARENTESIS_ABRE  PARENTESIS_CIERRA PUNTO_COMA							{: System.out.println(" EXIT "); :}
	| REDIRECT PARENTESIS_ABRE  PARENTESIS_CIERRA PUNTO_COMA						{: System.out.println(" REDIRECT "); :}
;
condicionales::=
	condicionales:e1 SUMA  condicionales:e2         					{: RESULT = e1.toString()+"+"+e2.toString(); :}
	| condicionales:e1 RESTA condicionales:e2        					{: RESULT = e1.toString()+"-"+e2.toString(); :}
    | condicionales:e1 MULTIPLICACION condicionales:e2        			{: RESULT = e1.toString()+"*"+e2.toString() ; :}
	| condicionales:e1 DIVISION condicionales:e2        				{: RESULT = e1.toString()+"/"+e2.toString() ; :}
	| RESTA condicionales:e                 							{: RESULT = "-"+e.toString();  :}
  	%prec UMENOS														
    | PARENTESIS_ABRE condicionales:e PARENTESIS_CIERRA	         		{: RESULT = "("+e.toString()+")"; :}
    | NUMERO_ENTERO:n	                      							{: RESULT = n.toString(); :}
	| NUMERO_DECIMAL:n	                      							{: RESULT = n.toString(); :}
	| NOMBRE_VARIABLE:n	   					 							{: RESULT = n.toString(); :}
	//| COMILLA TEXTO:t COMILLA											{: RESULT = t.toString(); :}
	//| COMILLA_SIMPLE TEXTO:t COMILLA_SIMPLE								{: RESULT = t.toString(); :}
	//| operador_logico_boolean:t											{: RESULT = t.toString()+""; :}
;
cond_str::=
// "algo"==algo
// "algo"=="algo"
// algo=var2
	condicionales:e1 IGUALDAD condicionales:e2        					{: RESULT = e1.toString()+"=="+e2.toString(); :}
    | condicionales:e1 NO_IGUAL condicionales:e2        				{: RESULT = e1.toString()+"!="+e2.toString() ; :}
  	%prec UMENOS														
    | PARENTESIS_ABRE condicionales:e PARENTESIS_CIERRA	         		{: RESULT = "("+e.toString()+")"; :}
    | NUMERO_ENTERO:n	                      							{: RESULT = n.toString(); :}
	| NUMERO_DECIMAL:n	                      							{: RESULT = n.toString(); :}
	| NOMBRE_VARIABLE:n	   					 							{: RESULT = n.toString(); :}
	| COMILLA TEXTO:t COMILLA											{: RESULT = t.toString(); :}
	| COMILLA_SIMPLE TEXTO:t COMILLA_SIMPLE								{: RESULT = t.toString(); :}
	//| operador_logico_boolean:t											{: RESULT = t.toString()+""; :}
;

condicionales2::=
	IGUALDAD:a															{: RESULT= a.toString(); :}
	| NO_IGUAL:a														{: RESULT= a.toString(); :}
	| MENOR_QUE:a														{: RESULT= a.toString(); :}
	| MENOR_IGUAL:a														{: RESULT= a.toString(); :}
	| MAYOR_QUE:a														{: RESULT= a.toString(); :}
	| MAYOR_IGUAL:a														{: RESULT= a.toString(); :}
	| OR:a																{: RESULT= a.toString(); :}
	| AND:a																{: RESULT= a.toString(); :}
	| NOT:a																{: RESULT= a.toString(); :}

;








/*
condicionales2::=

	condicionales:e1 IGUALDAD condicionales:e2        					{: RESULT = e1.toString()+"=="+e2.toString(); :}
    | condicionales:e1 NO_IGUAL condicionales:e2        				{: RESULT = e1.toString()+"!="+e2.toString() ; :}
	| condicionales:e1 MENOR_QUE condicionales:e2        				{: RESULT = e1.toString()+"<"+e2.toString() ; :}
	| condicionales:e1 MENOR_IGUAL condicionales:e2        				{: RESULT = e1.toString()+"<="+e2.toString() ; :}
	| condicionales:e1 MAYOR_QUE condicionales:e2        				{: RESULT = e1.toString()+">"+e2.toString() ; :}
	| condicionales:e1 MAYOR_IGUAL condicionales:e2        				{: RESULT = e1.toString()+">="+e2.toString() ; :}
    | condicionales:e1 OR condicionales:e2        						{: RESULT = e1.toString()+"||"+e2.toString() ; :}
	| condicionales:e1 AND condicionales:e2        						{: RESULT = e1.toString()+"&&"+e2.toString() ; :}
	| condicionales:e1 NOT condicionales:e2        						{: RESULT = e1.toString()+"!"+e2.toString() ; :}
	%prec RMENOS
;
*/

/*ALGUN DIA SERE INGE :')*/